import{_ as e,c as p,a as s,b as t,d as o,w as c,r as l,o as i,e as u}from"./app-CRAEKUA-.js";const r={};function d(k,n){const a=l("RouteLink");return i(),p("div",null,[n[1]||(n[1]=s('<div class="hint-container warning"><p class="hint-container-title">Примечание</p><p><strong>ЭТО АРХИВНАЯ ВЕРСИЯ КУРСА!</strong></p><p>Материалы предназначаются для пересдающих дисциплину &quot;ОП.04 - Основы алгоритмизации и программирования&quot; в соответствии с учебными планами СПО годов набора <strong>ДО 2023-го</strong>.</p><p>Материалы были перенесены со старого сайта с минимальной доработкой, поэтому не все возможности курса могут работать как ожидается, где-то может слететь форматирование.</p><p><strong>Домашние задания в рамках курса проверяться не будут!</strong></p></div><h1 id="оп-04-13-особенности-реализации-встроенных-функции-даты-и-времени" tabindex="-1"><a class="header-anchor" href="#оп-04-13-особенности-реализации-встроенных-функции-даты-и-времени"><span>ОП.04 - 13 - Особенности реализации встроенных функций даты и времени</span></a></h1>',2)),t("p",null,[o(a,{to:"/disciplines/op04/includes/_html_example.html",title:":include"},{default:c(()=>[...n[0]||(n[0]=[u("Код примера для практической работы",-1)])]),_:1})]),n[2]||(n[2]=s(`<h2 id="историческая-справка" tabindex="-1"><a class="header-anchor" href="#историческая-справка"><span>Историческая справка</span></a></h2><p>Вы когда-нибудь задумывались о том, как хранится в компьютере время? Включение и выключение компьютера никак не влияет на часы. Можно сделать вывод, что часы в компьютере работают сами по себе.</p><p>Это действительно так. Основные часы компьютера — аппаратные, они живут самостоятельной жизнью и имеют свою собственную батарею. При включении компьютер считывает данные этих часов, записывает к себе в память и начинает самостоятельно отсчитывать время. Эти часы называются системными. Любое изменение системных часов влияет и на аппаратные.</p><p>В большинстве современных операционных систем системное время представляется в формате Unix time. Оно определяется как количество секунд, <em>прошедших с полуночи 1 января 1970 года</em>. Время с этого момента называют «Началом эпохи Unix» или просто «Началом эпохи».</p><blockquote><p><strong>Unix-время</strong> (англ. Unix time, также POSIX-время) — система описания моментов во времени, принятая в Unix и других POSIX-совместимых операционных системах. Определяется как количество секунд, прошедших с полуночи (00:00:00 UTC) 1 января 1970 года (четверг); этот момент называют «эпохой Unix» (англ. Unix Epoch).</p></blockquote><p>Unix-время представлено целым числом, которое увеличивается с каждой прошедшей секундой без необходимости вычислений для определения года, месяца, дня, часа или минуты для удобства восприятия человеком. Современное Unix-время согласуется со Всемирным координируемым временем (UTC) — отсчет происходит в секундах системы СИ.</p><blockquote><p><strong>Всемирное время</strong> или <strong>UT</strong> (англ. Universal Time) — шкала времени, основанная на вращении Земли. Всемирное время является современной заменой среднего времени по Гринвичу (GMT), которое сейчас иногда некорректно используется в качестве синонима для всемирного координированного времени (UTC).</p></blockquote><p>Все версии всемирного времени основаны на вращении Земли относительно далёких небесных объектов (звёзд и квазаров), используя коэффициент масштабирования и другие подстройки для того, чтобы быть ближе к солнечному времени.</p><blockquote><p><strong>Всемирное координированное время</strong> (англ. Coordinated Universal Time, <strong>UTC</strong>) — стандарт, по которому общество регулирует часы и время. Отличается на целое количество секунд от атомного времени и на дробное количество секунд от всемирного времени UT.</p></blockquote><p>UTC было введено вместо устаревшего среднего времени по Гринвичу (GMT), поскольку шкала GMT является неравномерной и связана с суточным вращением Земли. В свою очередь, шкала UTC основана на равномерной шкале атомного времени (TAI) и является более удобной для гражданского использования. Время по UTC не переводится ни зимой, ни летом. Поэтому для тех мест, где есть переход на летнее время, меняется смещение относительно UTC. Часовые пояса вокруг земного шара выражаются как положительное или отрицательное смещение от UTC.</p><p>Вернемся к Unix-time. В момент времени 00:00:00 UTC 1 января 1970 года (четверг) Unix-время равно нулю. Начиная с этого времени, число возрастает на определённое количество в день. Временной промежуток одного дня почти всегда разбит на 86 400 секунд, но при объявлении дополнительных секунд составляет 86 401 секунду. Такие секунды, согласно Всемирному времени, сохраняют длительность дней синхронизированной со временем оборота планеты. В Unix-времени соответствующие номера секунд повторяются, то есть високосные секунды не учитываются. Таким образом, к примеру, 16 сентября 2004 года в 00:00:00, спустя 12677 дней после начала отсчета Unix-времени, время будет представлено числом <code>12 677 × 86 400 = 1 095 292 800</code>, или в случае с 17 декабря 2003 года в 00:00:00, через 12403 дня после начала отсчёта время будет являться числом <code>12403 × 86 400 = 1 071 619 200</code>. Расчеты могут быть также произведены в обратном направлении, используя отрицательные числа. К примеру, дата 4 октября 1957 года 00:00:00, а это 4472 дня до начала отсчета, представлена в Unix-времени числом <code>−4472 × 86 400 = −386 380 800</code>.</p><p>Каждый день число, представляющее Unix-время, вычисляется описанным образом в UTC (00:00:00Z), и увеличивается ровно на 1 в секунду, начиная с полночи. Используемую целочисленную систему удобно использовать для сравнения и хранения дат (дата и время в этом формате занимают всего 4 или 8 байт). При необходимости обращения к элементам дат (день, месяц, год) секунды можно преобразовать в любой подходящий формат (и наоборот).</p><p>В программах для хранения Unix-времени используется целочисленный знаковый тип. 32-битные числа со знаком могут ссылаться на моменты времени от пятницы 13 декабря 1901 года 20:45:52 до вторника 19 января 2038 года 03:14:07 включительно.</p><p>Минимальная дата в знаковом 32-битном представлении — 13 декабря 1901 года, 20:45:52 UTC (0x80000000, −2 147 483 648 секунд от 1 января 1970 года).</p><p>Главной критической датой с точки зрения Unix-времени считается 19 января 2038 года в 03:14:08 по всемирному времени, когда значение переменной, отсчитывающей число секунд, прошедших с 1 января 1970 года, достигнет <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>31</mn></msup></mrow><annotation encoding="application/x-tex">2^{31}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">31</span></span></span></span></span></span></span></span></span></span></span></span>, что может привести к ошибочной интерпретации этого числа как отрицательного. Комплекс рисков, связанных с этой датой, получил наименование проблемы 2038 года. Возможное решение данной проблемы состоит в использовании для хранения времени не 32-битной, а 64-битной переменной (что и делается во всех современных 64-битных операционных системах), этого хватит на 292 млрд лет.</p><p>Конкретная дата в формате Unix time называется <code>timestamp</code> (временной штамп).</p><h2 id="дата-и-время-в-javascript" tabindex="-1"><a class="header-anchor" href="#дата-и-время-в-javascript"><span>Дата и время в JavaScript</span></a></h2><p>Для представления даты и времени в языке JavaScript используется встроенный объект <code>Date</code>. Он содержит дату и время, а также предоставляет методы управления ими. Например, его можно использовать для хранения времени создания/изменения, для измерения времени или просто для вывода текущей даты.</p><p>Для создания нового объекта <code>Date</code> нужно вызвать конструктор <code>new Date()</code> с одним из следующих аргументов:</p><p><strong><code>new Date()</code></strong></p><p>Без аргументов — создать объект <code>Date</code> с текущими датой и временем:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">let</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> now <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// показывает текущие дату и время</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong><code>new Date(milliseconds)</code></strong></p><p>Создать объект <code>Date</code> с временем, равным количеству миллисекунд (тысячная доля секунды), прошедших с 1 января 1970 года UTC+0.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// 0 соответствует 01.01.1970 UTC+0</span></span>
<span class="line"><span class="token keyword">let</span> Jan01_1970 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> Jan01_1970 <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// теперь добавим 24 часа и получим 02.01.1970 UTC+0</span></span>
<span class="line"><span class="token keyword">let</span> Jan02_1970 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">24</span> <span class="token operator">*</span> <span class="token number">3600</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> Jan02_1970 <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Целое число, представляющее собой количество миллисекунд, прошедших с начала 1970 года, называется таймстамп (англ. timestamp). Это — легковесное численное представление даты. Из таймстампа всегда можно получить дату с помощью <code>new Date(timestamp)</code> и преобразовать существующий объект <code>Date</code> в таймстамп, используя метод <code>date.getTime()</code>.</p><p>Датам до 1 января 1970 будут соответствовать отрицательные таймстампы, например:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// 31 декабря 1969 года</span></span>
<span class="line"><span class="token keyword">let</span> Dec31_1969 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">24</span> <span class="token operator">*</span> <span class="token number">3600</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> Dec31_1969 <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong><code>new Date(datestring)</code></strong></p><p>Если аргумент всего один, и это строка, то из неё «прочитывается» дата. Алгоритм разбора – такой же, как в Date.parse, который мы рассмотрим позже.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">let</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">&quot;2017-01-26&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// Время не указано, поэтому оно ставится в полночь по Гринвичу и</span></span>
<span class="line"><span class="token comment">// меняется в соответствии с часовым поясом места выполнения кода</span></span>
<span class="line"><span class="token comment">// Так что в результате можно получить</span></span>
<span class="line"><span class="token comment">// Thu Jan 26 2017 11:00:00 GMT+1100 (восточно-австралийское время)</span></span>
<span class="line"><span class="token comment">// или</span></span>
<span class="line"><span class="token comment">// Wed Jan 25 2017 16:00:00 GMT-0800 (тихоокеанское время)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong><code>new Date(year, month, date, hours, minutes, seconds, ms)</code></strong></p><p>Создать объект <code>Date</code> с заданными компонентами в местном часовом поясе. Обязательны только первые два аргумента.</p><ul><li><code>year</code> должен состоять из четырёх цифр. Для совместимости также принимаются <code>2</code> цифры и рассматриваются как <code>19xx</code>, к примеру, <code>98</code> здесь это тоже самое, что и <code>1998</code>, но настоятельно рекомендуется всегда использовать <code>4</code> цифры.</li><li><code>month</code> начинается с <code>0</code> (январь) по <code>11</code> (декабрь).</li><li>Параметр <code>date</code> здесь представляет собой день месяца. Если параметр не задан, то принимается значение <code>1</code>.</li><li>Если параметры <code>hours</code>/<code>minutes</code>/<code>seconds</code>/<code>ms</code> отсутствуют, их значением становится <code>0</code>.</li></ul><p>Например:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">let</span> date1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">2011</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// // 1 Jan 2011, 00:00:00</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> date1 <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> date2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">2011</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// то же самое, так как часы и проч. равны 0</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> date2 <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Максимальная точность — 1 мс (до 1/1000 секунды):</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">let</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">2011</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">567</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> date <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1.01.2011, 02:03:04.567</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="получение-компонентов-даты" tabindex="-1"><a class="header-anchor" href="#получение-компонентов-даты"><span>Получение компонентов даты</span></a></h3><p>Существуют методы получения года, месяца и т.д. из объекта <code>Date</code>:</p><ul><li><code>getFullYear()</code> — Получить год (4 цифры)</li><li><code>getMonth()</code> — Получить месяц, от 0 до 11.</li><li><code>getDate()</code> — Получить день месяца, от 1 до 31, что несколько противоречит названию метода.</li><li><code>getHours()</code>, <code>getMinutes()</code>, <code>getSeconds()</code>, <code>getMilliseconds()</code> — Получить, соответственно, часы, минуты, секунды или миллисекунды.</li><li><code>getDay()</code> — Вернуть день недели от 0 (воскресенье) до 6 (суббота). Несмотря на то, что в ряде стран за первый день недели принят понедельник, в JavaScript начало недели приходится на воскресенье.</li></ul><blockquote><p>[!WARNING]<br><strong>Никакого <code>getYear()</code>. Только <code>getFullYear()</code>!</strong></p><p>Многие интерпретаторы JavaScript реализуют нестандартный и устаревший метод <code>getYear()</code>, который порой возвращает год в виде двух цифр. Пожалуйста, обходите его стороной. Если нужно значение года, используйте <code>getFullYear()</code>.</p></blockquote><p><strong>Все вышеперечисленные методы возвращают значения в соответствии с местным часовым поясом.</strong></p><p>Однако существуют и их UTC-варианты, возвращающие день, месяц, год для временной зоны UTC+0: <code>getUTCFullYear()</code>, <code>getUTCMonth()</code>, <code>getUTCDay()</code>. Для их использования требуется после <code>get</code> подставить <code>UTC</code>.</p><p>Если ваш местный часовой пояс смещён относительно UTC, то следующий код покажет разные часы:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// текущая дата</span></span>
<span class="line"><span class="token keyword">let</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// час в вашем текущем часовом поясе</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> date<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// час в часовом поясе UTC+0 (лондонское время без перехода на летнее время)</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> date<span class="token punctuation">.</span><span class="token function">getUTCHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Помимо вышеприведённых методов, существуют два особых метода без UTC-варианта:</p><ul><li><p><code>getTime()</code> - Для заданной даты возвращает таймстамп — количество миллисекунд, прошедших с 1 января 1970 года UTC+0.</p></li><li><p><code>getTimezoneOffset()</code> - Возвращает разницу в минутах между UTC и местным часовым поясом:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// если вы в часовом поясе UTC-1, то выводится 60</span></span>
<span class="line"><span class="token comment">// если вы в часовом поясе UTC+3, выводится -180</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTimezoneOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="установка-компонентов-даты" tabindex="-1"><a class="header-anchor" href="#установка-компонентов-даты"><span>Установка компонентов даты</span></a></h3><p>Следующие методы позволяют установить компоненты даты и времени:</p><ul><li><code>setFullYear(year, [month], [date])</code></li><li><code>setMonth(month, [date])</code></li><li><code>setDate(date)</code></li><li><code>setHours(hour, [min], [sec], [ms])</code></li><li><code>setMinutes(min, [sec], [ms])</code></li><li><code>setSeconds(sec, [ms])</code></li><li><code>setMilliseconds(ms)</code></li><li><code>setTime(milliseconds)</code> (устанавливает дату в виде целого количества миллисекунд, прошедших с 01.01.1970 UTC)</li></ul><p>У всех этих методов, кроме <code>setTime()</code>, есть UTC-вариант, например: <code>setUTCHours()</code>.</p><p>Как мы видим, некоторые методы могут устанавливать сразу несколько компонентов даты, например: <code>setHours()</code>. Если какая-то компонента не указана, она не меняется.</p><p>Например:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">let</span> today <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">today<span class="token punctuation">.</span><span class="token function">setHours</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>today<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// выводится сегодняшняя дата, но значение часа будет 0</span></span>
<span class="line"></span>
<span class="line">today<span class="token punctuation">.</span><span class="token function">setHours</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>today<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// всё ещё выводится сегодняшняя дата, но время будет ровно 00:00:00.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="автоисправление-даты" tabindex="-1"><a class="header-anchor" href="#автоисправление-даты"><span>Автоисправление даты</span></a></h3><p>Автоисправление — это очень полезная особенность объектов <code>Date</code>. Можно устанавливать компоненты даты вне обычного диапазона значений, а объект сам себя исправит.</p><p>Пример:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">let</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">2013</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 32 января 2013 ?!?</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ...1-е февраля 2013!</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Неправильные компоненты даты автоматически распределяются по остальным.</p><p>Предположим, нам требуется увеличить дату «28 февраля 2016» на два дня. В зависимости от того, високосный это год или нет, результатом будет «2 марта» или «1 марта». Нам об этом думать не нужно. Просто прибавляем два дня. Объект <code>Date</code> позаботится об остальном:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">let</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">2016</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">date<span class="token punctuation">.</span><span class="token function">setDate</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> date <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 Mar 2016</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Эту возможность часто используют, чтобы получить дату по прошествии заданного отрезка времени. Например, получим дату «спустя 70 секунд с текущего момента»:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">let</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">date<span class="token punctuation">.</span><span class="token function">setSeconds</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">70</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> date <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// выводит правильную дату</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Также можно установить нулевые или даже отрицательные значения. Например:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">let</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">2016</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2 Jan 2016</span></span>
<span class="line"></span>
<span class="line">date<span class="token punctuation">.</span><span class="token function">setDate</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// задать первое число месяца</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> date <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">date<span class="token punctuation">.</span><span class="token function">setDate</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// первый день месяца -- это 1, так что выводится последнее число предыдущего месяца</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> date <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 31 Dec 2015</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="преобразование-к-числу-разность-дат" tabindex="-1"><a class="header-anchor" href="#преобразование-к-числу-разность-дат"><span>Преобразование к числу, разность дат</span></a></h3><p>Если объект <code>Date</code> преобразовать в число, то получим таймстамп по аналогии с <code>date.getTime()</code>:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">let</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">+</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// количество миллисекунд, то же самое, что date.getTime()</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Важный побочный эффект: даты можно вычитать, в результате получаем разность в миллисекундах.</p><p>Этот приём можно использовать для измерения времени:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">let</span> start <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// начинаем отсчёт времени</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// выполняем некоторые действия</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> doSomething <span class="token operator">=</span> i <span class="token operator">*</span> i <span class="token operator">*</span> i<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> end <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// заканчиваем отсчёт времени</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Цикл отработал за </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>end <span class="token operator">-</span> start<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> миллисекунд</span><span class="token template-punctuation string">\`</span></span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="date-now" tabindex="-1"><a class="header-anchor" href="#date-now"><span><strong><code>Date.now()</code></strong></span></a></h3><p>Если нужно просто измерить время, объект <code>Date</code> нам не нужен.</p><p>Существует особый метод <code>Date.now()</code>, возвращающий текущую метку времени. Семантически он эквивалентен <code>new Date().getTime()</code>, однако метод не создаёт промежуточный объект <code>Date</code>. Так что этот способ работает быстрее и не требует лишней памяти. Данный метод используется из соображений удобства или когда важно быстродействие, например, при разработке игр на JavaScript или других специализированных приложений.</p><p>Вероятно, предыдущий пример лучше переписать так:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">let</span> start <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// количество миллисекунд с 1 января 1970 года</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// выполняем некоторые действия</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> doSomething <span class="token operator">=</span> i <span class="token operator">*</span> i <span class="token operator">*</span> i<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> end <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// заканчиваем отсчёт времени</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Цикл отработал за </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>end <span class="token operator">-</span> start<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> миллисекунд</span><span class="token template-punctuation string">\`</span></span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// вычитаются числа, а не даты</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="разбор-строки-с-датои" tabindex="-1"><a class="header-anchor" href="#разбор-строки-с-датои"><span>Разбор строки с датой</span></a></h3><p>Метод <code>Date.parse(str)</code> считывает дату из строки.</p><p>Формат строки должен быть следующим: <code>YYYY-MM-DDTHH:mm:ss.sssZ</code>, где:</p><ul><li><code>YYYY-MM-DD</code> — это дата: год-месяц-день.</li><li>Символ <code>T</code> используется в качестве разделителя.</li><li><code>HH:mm:ss.sss</code> — время: часы, минуты, секунды и миллисекунды.</li><li>Необязательная часть <code>Z</code> обозначает часовой пояс в формате <code>+-hh:mm</code>. Если указать просто букву <code>Z</code>, то получим <code>UTC+0</code>.</li></ul><p>Возможны и более короткие варианты, например, <code>YYYY-MM-DD</code> или <code>YYYY-MM</code>, или даже <code>YYYY</code>.</p><p>Вызов <code>Date.parse(str)</code> обрабатывает строку в заданном формате и возвращает таймстамп (количество миллисекунд с 1 января 1970 года UTC+0). Если формат неправильный, возвращается <code>NaN</code>.</p><p>Например:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">let</span> ms <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">&#39;2012-01-26T13:51:50.417-07:00&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ms<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1327611110417 (таймстамп)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Можно тут же создать объект new <code>Date</code> из таймстампа:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">let</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span> Date<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">&#39;2012-01-26T13:51:50.417-07:00&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="что-почитать-по-теме" tabindex="-1"><a class="header-anchor" href="#что-почитать-по-теме"><span>Что почитать по теме</span></a></h2><ul><li><a href="https://ru.wikipedia.org/wiki/%D0%92%D1%81%D0%B5%D0%BC%D0%B8%D1%80%D0%BD%D0%BE%D0%B5_%D0%B2%D1%80%D0%B5%D0%BC%D1%8F" target="_blank" rel="noopener noreferrer">Статья на Википедии - Всемирное время</a></li><li><a href="https://ru.wikipedia.org/wiki/%D0%92%D1%81%D0%B5%D0%BC%D0%B8%D1%80%D0%BD%D0%BE%D0%B5_%D0%BA%D0%BE%D0%BE%D1%80%D0%B4%D0%B8%D0%BD%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%BD%D0%BE%D0%B5_%D0%B2%D1%80%D0%B5%D0%BC%D1%8F" target="_blank" rel="noopener noreferrer">Статья на Википедии - Всемирное координированное время</a></li><li><a href="https://ru.wikipedia.org/wiki/Unix-%D0%B2%D1%80%D0%B5%D0%BC%D1%8F" target="_blank" rel="noopener noreferrer">Статья на Википедии - Unix-время</a></li><li><a href="https://learn.javascript.ru/date" target="_blank" rel="noopener noreferrer">Современный учебник JavaScript - Дата и время</a></li><li><a href="https://www.w3schools.com/js/js_dates.asp" target="_blank" rel="noopener noreferrer">W3Schools - JavaScript Date Objects</a></li><li><a href="https://www.w3schools.com/js/js_date_formats.asp" target="_blank" rel="noopener noreferrer">W3Schools - JavaScript Date Formats</a></li><li><a href="https://www.w3schools.com/js/js_date_methods.asp" target="_blank" rel="noopener noreferrer">W3Schools - JavaScript Get Date Methods</a></li><li><a href="https://www.w3schools.com/js/js_date_methods_set.asp" target="_blank" rel="noopener noreferrer">W3Schools - JavaScript Set Date Methods</a></li></ul>`,89))])}const v=e(r,[["render",d]]),g=JSON.parse('{"path":"/disciplines/op04/op04_13.html","title":"ОП.04 - 13 - Особенности реализации встроенных функций даты и времени","lang":"ru-RU","frontmatter":{"description":"Примечание ЭТО АРХИВНАЯ ВЕРСИЯ КУРСА! Материалы предназначаются для пересдающих дисциплину \\"ОП.04 - Основы алгоритмизации и программирования\\" в соответствии с учебными планами С...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ОП.04 - 13 - Особенности реализации встроенных функций даты и времени\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-10-31T12:29:12.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://it.vshp.online/disciplines/op04/op04_13.html"}],["meta",{"property":"og:site_name","content":"Кафедра ИТ"}],["meta",{"property":"og:title","content":"ОП.04 - 13 - Особенности реализации встроенных функций даты и времени"}],["meta",{"property":"og:description","content":"Примечание ЭТО АРХИВНАЯ ВЕРСИЯ КУРСА! Материалы предназначаются для пересдающих дисциплину \\"ОП.04 - Основы алгоритмизации и программирования\\" в соответствии с учебными планами С..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ru-RU"}],["meta",{"property":"og:updated_time","content":"2025-10-31T12:29:12.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-31T12:29:12.000Z"}]]},"git":{"updatedTime":1761913752000,"contributors":[{"name":"PAVEL TKACHEV","username":"","email":"phoenixweiss@ya.ru","commits":1}],"changelog":[{"hash":"a771585bc5911f4a729d06794a6706536be6cc56","time":1761913752000,"email":"phoenixweiss@ya.ru","author":"PAVEL TKACHEV","message":"Update <a href=\\"http://index.md\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">index.md</a>, abacus.png, ada_lawlace.png, and 105 more files"}]},"autoDesc":true,"filePathRelative":"disciplines/op04/op04_13.md"}');export{v as comp,g as data};
