import{_ as p,c as o,b as n,a as t,e as a,d as l,w as c,r as i,o as d}from"./app-CRAEKUA-.js";const r={},u={class:"hint-container warning"};function k(v,s){const e=i("RouteLink");return d(),o("div",null,[n("div",u,[s[5]||(s[5]=n("p",{class:"hint-container-title"},"Примечание",-1)),s[6]||(s[6]=n("p",null,[n("strong",null,"ЭТО АРХИВНАЯ ВЕРСИЯ КУРСА!")],-1)),n("p",null,[s[1]||(s[1]=a('Материалы предназначаются для пересдающих дисциплину "ОП.08 - Основы проектирования баз данных" в соответствии с учебными планами СПО годов набора ',-1)),s[2]||(s[2]=n("strong",null,"ДО 2024-го",-1)),s[3]||(s[3]=a('. Для того чтобы ознакомиться с актуальным курсом "ИТ.03 - Основы проектирования баз данных" включающим интерактивные примеры, ',-1)),l(e,{to:"/disciplines/it03/"},{default:c(()=>[...s[0]||(s[0]=[a("перейдите по ссылке",-1)])]),_:1}),s[4]||(s[4]=a(".",-1))]),s[7]||(s[7]=n("p",null,"Материалы были перенесены со старого сайта с минимальной доработкой, поэтому не все возможности курса могут работать как ожидается, где-то может слететь форматирование.",-1)),s[8]||(s[8]=n("p",null,[n("strong",null,"Домашние задания в рамках курса проверяться не будут!")],-1))]),s[9]||(s[9]=t(`<h1 id="оп-08-18-переменные-условия-и-last-insert-id" tabindex="-1"><a class="header-anchor" href="#оп-08-18-переменные-условия-и-last-insert-id"><span>ОП.08 - 18 - Переменные, условия и <code>LAST_INSERT_ID</code></span></a></h1><p>Примеры данной темы используют учебную БД:</p><details><summary><b>bookshelf.sql</b></summary><p><a href="./includes/bookshelf.sql" title=":include">bookshelf.sql</a></p></details><h2 id="переменные" tabindex="-1"><a class="header-anchor" href="#переменные"><span>Переменные</span></a></h2><p>Переменные - это именованные значения, которые могут изменяться в процессе выполнения программы. В языке SQL, переменные позволяют сохранять и использовать значения, которые были вычислены ранее или введены пользователем.</p><p>Переменные являются важным инструментом при работе с базами данных. Они позволяют сохранять значения для дальнейшего использования, выполнения операций над выборкой данных и обновления данных в таблицах.</p><p>В MySQL 8, синтаксис определения переменных выглядит следующим образом:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">SET</span> <span class="token variable">@variable_name</span> <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Здесь <code>@variable_name</code> - имя переменной, а <code>value</code> - значение, которое нужно присвоить переменной. Значение может быть константой, результатом функции или запроса к базе данных.</p><h3 id="пример-1" tabindex="-1"><a class="header-anchor" href="#пример-1"><span>Пример 1</span></a></h3><p>Допустим, мы хотим определить переменную <code>shelf_count</code>, которая будет содержать количество полок в библиотеке. Мы можем использовать следующий запрос:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">SET</span> <span class="token variable">@shelf_count</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> shelves<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token variable">@shelf_count</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Этот запрос выбирает количество строк из таблицы <code>shelves</code> и сохраняет его в переменной <code>@shelf_count</code>.</p><h3 id="пример-2" tabindex="-1"><a class="header-anchor" href="#пример-2"><span>Пример 2</span></a></h3><p>Мы можем также использовать переменные для выполнения операций на выборкой данных. Например, мы можем определить переменную <code>book_count</code> и вывести список книг, опубликованных после указанного года:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">SET</span> <span class="token variable">@year</span> <span class="token operator">=</span> <span class="token number">1970</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">SET</span> <span class="token variable">@book_count</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> books <span class="token keyword">WHERE</span> <span class="token keyword">year</span> <span class="token operator">&gt;</span> <span class="token variable">@year</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token variable">@book_count</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Этот запрос использует переменную <code>@year</code> для указания года, после которого нужно выбрать книги, и переменную <code>@book_count</code> для подсчета количества таких книг.</p><p>Посмотреть что это за книги можно запросом:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">SELECT</span> title<span class="token punctuation">,</span> <span class="token keyword">year</span> <span class="token keyword">FROM</span> books <span class="token keyword">WHERE</span> <span class="token keyword">year</span> <span class="token operator">&gt;</span> <span class="token variable">@year</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="пример-3" tabindex="-1"><a class="header-anchor" href="#пример-3"><span>Пример 3</span></a></h3><p>Мы можем использовать переменные для обновления данных в таблицах. Например, мы можем определить переменную <code>shelves_id</code> и обновить запись в таблице <code>books</code>, указав ее идентификатор:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">SET</span> <span class="token variable">@shelf_id</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> id <span class="token keyword">FROM</span> shelves <span class="token keyword">WHERE</span> title <span class="token operator">=</span> <span class="token string">&#39;Полка в спальне&#39;</span> <span class="token keyword">LIMIT</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">SET</span> <span class="token variable">@book_id</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> id <span class="token keyword">FROM</span> books <span class="token keyword">WHERE</span> title <span class="token operator">=</span> <span class="token string">&#39;Война и мир&#39;</span> <span class="token operator">AND</span> <span class="token keyword">year</span> <span class="token operator">=</span> <span class="token number">1869</span> <span class="token keyword">LIMIT</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">UPDATE</span> books <span class="token keyword">SET</span> shelves_id <span class="token operator">=</span> <span class="token variable">@shelf_id</span> <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token variable">@book_id</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Этот запрос использует переменную <code>@shelf_id</code> для указания идентификатора полки, на которую нужно переместить книгу, id которой хранится в переменной <code>@book_id</code>.</p><h2 id="условия" tabindex="-1"><a class="header-anchor" href="#условия"><span>Условия</span></a></h2><p><code>IF</code> и <code>CASE</code> - это две функции, которые можно использовать для выполнения различных задач. Они позволяют выполнять разные действия в зависимости от значения некоторого условия, что может быть полезно при написании запросов для извлечения данных из таблиц базы данных.</p><h3 id="оператор-if" tabindex="-1"><a class="header-anchor" href="#оператор-if"><span>Оператор <code>IF</code></span></a></h3><p>Оператор <code>IF</code> имеет простой синтаксис и может использоваться в качестве конструкции условия:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">IF</span><span class="token punctuation">(</span>условие<span class="token punctuation">,</span> выражение_1<span class="token punctuation">,</span> выражение_2<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>В этом случае, если условие истинно, оператор вернет значение <code>выражения_1</code>, в противном случае - значение <code>выражения_2</code>.</p><p>Рассмотрим пример использования оператора <code>IF</code> на таблице <code>books</code>, чтобы извлечь данные только тех книг, у которых есть полка:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">SELECT</span> title<span class="token punctuation">,</span> <span class="token keyword">YEAR</span><span class="token punctuation">,</span> <span class="token keyword">IF</span><span class="token punctuation">(</span>shelves_id <span class="token operator">IS</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">&#39;Нет полки&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Есть полка&#39;</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> shelf <span class="token keyword">FROM</span> books<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Это запрос извлекает данные из таблицы <code>books</code> и добавляет новый столбец <code>shelf</code>, который содержит информацию о том, есть ли у книги стеллаж или нет.</p><h3 id="оператор-case" tabindex="-1"><a class="header-anchor" href="#оператор-case"><span>Оператор <code>CASE</code></span></a></h3><p>Оператор <code>CASE</code> похож на оператор <code>IF</code>, но он более гибкий и может проверять несколько условий. Его синтаксис выглядит следующим образом:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">CASE</span></span>
<span class="line">    <span class="token keyword">WHEN</span> условие_1 <span class="token keyword">THEN</span> выражение_1</span>
<span class="line">    <span class="token keyword">WHEN</span> условие_2 <span class="token keyword">THEN</span> выражение_2</span>
<span class="line">    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line">    <span class="token keyword">ELSE</span> выражение_n</span>
<span class="line"><span class="token keyword">END</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>В этом случае, если <code>условие_1</code> истинно, оператор вернет значение <code>выражения_1</code>, если <code>условие_2</code> истинно - значение <code>выражения_2</code> и так далее. Если ни одно из условий не истинно, оператор вернет значение <code>выражения_n</code>.</p><p>Рассмотрим пример использования оператора <code>CASE</code> на таблице <code>books</code>, чтобы добавить новый столбец, отображающий информацию о том, сколько авторов написали каждую книгу:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">SELECT</span> title<span class="token punctuation">,</span></span>
<span class="line">       <span class="token punctuation">(</span><span class="token keyword">CASE</span></span>
<span class="line">            <span class="token keyword">WHEN</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>authors_books<span class="token punctuation">.</span>authors_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">THEN</span> CONCAT<span class="token punctuation">(</span><span class="token function">COUNT</span><span class="token punctuation">(</span>authors_books<span class="token punctuation">.</span>authors_id<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39; автор&#39;</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">ELSE</span> CONCAT<span class="token punctuation">(</span><span class="token function">COUNT</span><span class="token punctuation">(</span>authors_books<span class="token punctuation">.</span>authors_id<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39; авторов&#39;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">END</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> authors_count</span>
<span class="line"><span class="token keyword">FROM</span> books</span>
<span class="line"><span class="token keyword">JOIN</span> authors_books <span class="token keyword">ON</span> books<span class="token punctuation">.</span>id<span class="token operator">=</span>authors_books<span class="token punctuation">.</span>books_id</span>
<span class="line"><span class="token keyword">GROUP</span> <span class="token keyword">BY</span> title<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Этот запрос извлекает данные из таблицы <code>books</code> и связанной таблицы <code>authors_books</code>. Затем он считает количество авторов для каждой книги и создает новый столбец <code>authors_count</code>, который содержит это количество, а также слово &quot;автор&quot; или &quot;авторов&quot; в зависимости от количества.</p><h2 id="last-insert-id" tabindex="-1"><a class="header-anchor" href="#last-insert-id"><span><code>LAST_INSERT_ID</code></span></a></h2><p><code>LAST_INSERT_ID</code> - это функция MySQL, которая возвращает значение первичного ключа последней добавленной записи. Это очень удобно использовать, когда вы хотите вставить данные в несколько таблиц с использованием значения первичного ключа, связанного со вставленным значением.</p><p>Для примеров мы будем использовать базу данных, состоящую из четырех таблиц: <code>shelves</code> (полки), <code>friends</code> (друзья), <code>books</code> (книги) и <code>authors</code> (авторы). Таблицы <code>books</code> и <code>authors</code> связаны многие-ко-многим через таблицу <code>authors_books</code>.</p><p>Предположим, что мы хотим добавить новую полку в таблицу <code>shelves</code> и затем добавить новую книгу в таблицу <code>books</code>, используя только что созданный идентификатор полки. Мы можем использовать <code>LAST_INSERT_ID()</code>, чтобы получить этот идентификатор.</p><p>Пример:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> shelves <span class="token punctuation">(</span>title<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&#39;Новая полка&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">SET</span> <span class="token variable">@shelf_id</span> <span class="token operator">=</span> LAST_INSERT_ID<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> books <span class="token punctuation">(</span>title<span class="token punctuation">,</span> <span class="token keyword">year</span><span class="token punctuation">,</span> shelves_id<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&#39;Гарри Поттер и сдача практического экзамена по основам проектирования баз данных&#39;</span><span class="token punctuation">,</span> <span class="token number">2023</span><span class="token punctuation">,</span> <span class="token variable">@shelf_id</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>В этом примере мы вставляем новую запись в таблицу <code>shelves</code>, затем сохраняем идентификатор этой записи в переменную <code>@shelf_id</code> с помощью <code>LAST_INSERT_ID()</code>. Затем мы используем эту переменную для вставки новой записи в таблицу <code>books</code>, связывая ее с только что созданной полкой.</p><p>Также можно использовать <code>LAST_INSERT_ID()</code> для получения идентификатора автоматически созданных записей, например, когда вы вставляете новую запись в таблицу с автоинкрементным первичным ключом.</p><p>Пример:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> friends <span class="token punctuation">(</span>name<span class="token punctuation">,</span> contacts<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&#39;Денчик&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;deniska@example.com&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">SELECT</span> LAST_INSERT_ID<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>В этом примере мы вставляем новую запись в таблицу <code>friends</code>, которая имеет автоинкрементный первичный ключ. Затем мы используем <code>LAST_INSERT_ID()</code>, чтобы получить идентификатор только что созданной записи.</p><p><code>LAST_INSERT_ID()</code> полезна для выполнения множества операций на нескольких таблицах с использованием значения первичного ключа, связанного со вставленным значением. Она предоставляет удобный способ получить доступ к последнему вставленному идентификатору и использовать его в следующих запросах.</p>`,51))])}const m=p(r,[["render",k]]),h=JSON.parse('{"path":"/disciplines/op08/op08_18.html","title":"ОП.08 - 18 - Переменные, условия и LAST_INSERT_ID","lang":"ru-RU","frontmatter":{"description":"Примечание ЭТО АРХИВНАЯ ВЕРСИЯ КУРСА! Материалы предназначаются для пересдающих дисциплину \\"ОП.08 - Основы проектирования баз данных\\" в соответствии с учебными планами СПО годов...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ОП.08 - 18 - Переменные, условия и LAST_INSERT_ID\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-10-31T12:29:12.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://it.vshp.online/disciplines/op08/op08_18.html"}],["meta",{"property":"og:site_name","content":"Кафедра ИТ"}],["meta",{"property":"og:title","content":"ОП.08 - 18 - Переменные, условия и LAST_INSERT_ID"}],["meta",{"property":"og:description","content":"Примечание ЭТО АРХИВНАЯ ВЕРСИЯ КУРСА! Материалы предназначаются для пересдающих дисциплину \\"ОП.08 - Основы проектирования баз данных\\" в соответствии с учебными планами СПО годов..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ru-RU"}],["meta",{"property":"og:updated_time","content":"2025-10-31T12:29:12.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-31T12:29:12.000Z"}]]},"git":{"updatedTime":1761913752000,"contributors":[{"name":"PAVEL TKACHEV","username":"","email":"phoenixweiss@ya.ru","commits":1}],"changelog":[{"hash":"a771585bc5911f4a729d06794a6706536be6cc56","time":1761913752000,"email":"phoenixweiss@ya.ru","author":"PAVEL TKACHEV","message":"Update <a href=\\"http://index.md\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">index.md</a>, abacus.png, ada_lawlace.png, and 105 more files"}]},"autoDesc":true,"filePathRelative":"disciplines/op08/op08_18.md"}');export{m as comp,h as data};
