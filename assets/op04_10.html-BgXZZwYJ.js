import{_ as e,c as p,a as n,b as t,d as o,w as c,r as l,o as i,e as r}from"./app-CRAEKUA-.js";const u={};function d(k,s){const a=l("RouteLink");return i(),p("div",null,[s[1]||(s[1]=n('<div class="hint-container warning"><p class="hint-container-title">Примечание</p><p><strong>ЭТО АРХИВНАЯ ВЕРСИЯ КУРСА!</strong></p><p>Материалы предназначаются для пересдающих дисциплину &quot;ОП.04 - Основы алгоритмизации и программирования&quot; в соответствии с учебными планами СПО годов набора <strong>ДО 2023-го</strong>.</p><p>Материалы были перенесены со старого сайта с минимальной доработкой, поэтому не все возможности курса могут работать как ожидается, где-то может слететь форматирование.</p><p><strong>Домашние задания в рамках курса проверяться не будут!</strong></p></div><h1 id="оп-04-10-операторы-операции-и-выражения-условия-их-виды-и-комбинации" tabindex="-1"><a class="header-anchor" href="#оп-04-10-операторы-операции-и-выражения-условия-их-виды-и-комбинации"><span>ОП.04 - 10 - Операторы, операции и выражения. Условия, их виды и комбинации</span></a></h1>',2)),t("p",null,[o(a,{to:"/disciplines/op04/includes/_html_example.html",title:":include"},{default:c(()=>[...s[0]||(s[0]=[r("Код примера для практической работы",-1)])]),_:1})]),s[2]||(s[2]=n(`<h2 id="операторы-операции-и-выражения" tabindex="-1"><a class="header-anchor" href="#операторы-операции-и-выражения"><span>Операторы, операции и выражения</span></a></h2><p>Для начала давайте разберёмся с терминологией.</p><blockquote><p><strong>Операция</strong> — конкретная программная инструкция, состоящая из оператора и хотя бы одного операнда.</p></blockquote><p>Как видно из определения, чтобы его понять, нужно рассмотреть также понятия <strong>оператор</strong> и <strong>операнд</strong>.</p><blockquote><p><strong>Оператор</strong> — наименьшая автономная часть языка программирования, представляющая собой команду.</p></blockquote><p>Многие операторы знакомы нам ещё со школы: сложение <code>+</code>, умножение <code>*</code>, вычитание <code>-</code>, деление <code>/</code>, и с одним мы уже познакомились когда проходили переменные, это оператор присваивания <code>=</code>.</p><blockquote><p><strong>Операнд</strong> — то, к чему применяется оператор.</p></blockquote><p>Например, в умножении <code>5 * 2</code> есть два операнда: левый операнд равен <code>5</code>, а правый операнд равен <code>2</code>, при этом между ними стоит один оператор умножения <code>*</code>.</p><blockquote><p><strong>Унарным</strong> называется оператор, который применяется к одному операнду.</p></blockquote><p>Например, оператор унарный минус <code>-</code> меняет знак числа на противоположный:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> x <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span></span>
<span class="line">x <span class="token operator">=</span> <span class="token operator">-</span>x<span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> x <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -1, применили унарный минус</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>Бинарным</strong> называется оператор, который применяется к двум операндам.</p></blockquote><p>Тот же минус существует и в бинарной форме:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> y <span class="token operator">-</span> x <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2, бинарный минус вычитает значения</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Формально, в последних примерах мы говорим о двух разных операторах, использующих один символ: <em>оператор отрицания</em> (унарный оператор, который обращает знак) и <em>оператор вычитания</em> (бинарный оператор, который вычитает одно число из другого).</p><blockquote><p>[!INFO]<br> Часто в источниках используют и несколько более широкое понятие — <strong>выражение</strong>, под которым в информатике понимается комбинация значений, констант, переменных, операций и функций, которая может быть интерпретирована в соответствии с правилами конкретного языка. Интерпретация (выполнение) такого выражения приводит к вычислению некоторого значения (например, числа, строки или значения логического типа).</p></blockquote><h3 id="математические-операторы" tabindex="-1"><a class="header-anchor" href="#математические-операторы"><span>Математические операторы</span></a></h3><p>В JavaScript поддерживаются следующие математические операторы:</p><ul><li>Сложение <code>+</code></li><li>Вычитание <code>-</code></li><li>Умножение <code>*</code></li><li>Деление <code>/</code></li><li>Взятие остатка от деления <code>%</code></li><li>Возведение в степень <code>**</code></li></ul><p>Первые четыре оператора очевидны, а про <code>%</code> и <code>**</code> стоит сказать несколько слов.</p><h4 id="взятие-остатка" tabindex="-1"><a class="header-anchor" href="#взятие-остатка"><span>Взятие остатка <code>%</code></span></a></h4><p>Оператор взятия остатка <code>%</code>, несмотря на обозначение, никакого отношения к процентам не имеет.</p><p>Результат <code>a % b</code> — это остаток от целочисленного деления <code>a</code> на <code>b</code>.</p><p>Например:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token number">5</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1, остаток от деления 5 на 2</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token number">8</span> <span class="token operator">%</span> <span class="token number">3</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2, остаток от деления 8 на 3</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="возведение-в-степень" tabindex="-1"><a class="header-anchor" href="#возведение-в-степень"><span>Возведение в степень <code>**</code></span></a></h4><p>В выражении <code>a ** b</code> оператор возведения в степень умножает <code>a</code> на само себя <code>b</code> раз.</p><p>Например:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token number">2</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4  (2 умножено на себя 2 раза)</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token number">2</span> <span class="token operator">**</span> <span class="token number">3</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 8  (2 * 2 * 2, 3 раза)</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token number">2</span> <span class="token operator">**</span> <span class="token number">4</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 16 (2 * 2 * 2 * 2, 4 раза)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Математически, оператор работает и для нецелых чисел. Например, квадратный корень является возведением в степень 1/2:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token number">4</span> <span class="token operator">**</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2 (степень 1/2 эквивалентна взятию квадратного корня)</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token number">4</span> <span class="token operator">**</span> <span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2 (то же справедливо и для десятичных дробей)</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token number">8</span> <span class="token operator">**</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2 (степень 1/3 эквивалентна взятию кубического корня)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="сложение-строк-конкатенация" tabindex="-1"><a class="header-anchor" href="#сложение-строк-конкатенация"><span>Сложение строк, конкатенация</span></a></h3><p>Обычно при помощи плюса <code>+</code> складывают числа.</p><p>Но если бинарный оператор <code>+</code> применить к строкам, то он их объединяет в одну:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token string">&quot;моя&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;строка&quot;</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// моястрока</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Бинарный оператор <code>+</code> применимо к строкам производит сложение строк, операцию которая называется <strong>конкатенацией</strong>.</p></blockquote><p>Обратите внимание, если хотя бы один операнд является строкой, то второй будет также преобразован в строку.</p><p>Например:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&#39;1&#39;</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;12&quot;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token string">&#39;1&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;21&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Как видите, не важно, первый или второй операнд является строкой.</p><p>Вот пример посложнее:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token string">&#39;1&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// будет &quot;41&quot;, а не &quot;221&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Здесь операторы работают один за другим. Первый <code>+</code> складывает два числа и возвращает <code>4</code>, затем следующий <code>+</code> объединяет результат со строкой, производя действие <code>4 + &#39;1&#39; = &#39;41&#39;</code>.</p><p>Сложение и преобразование строк — это особенность бинарного плюса <code>+</code>. Другие арифметические операторы работают только с числами и всегда преобразуют операнды в числа.</p><p>Например, вычитание и деление:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token number">6</span> <span class="token operator">-</span> <span class="token string">&#39;2&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4, &#39;2&#39; приводится к числу</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&#39;6&#39;</span> <span class="token operator">/</span> <span class="token string">&#39;2&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3, оба операнда приводятся к числам</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="приоритет-операторов" tabindex="-1"><a class="header-anchor" href="#приоритет-операторов"><span>Приоритет операторов</span></a></h3><p>В том случае, если в выражении есть несколько операторов — порядок их выполнения определяется приоритетом, или, другими словами, существует определённый порядок выполнения операторов. Из школы мы знаем, что умножение в выражении <code>1 + 2 * 2</code> выполнится раньше сложения. Это как раз и есть «приоритет». Говорят, что умножение имеет более высокий приоритет, чем сложение. Скобки важнее, чем приоритет, так что, если мы не удовлетворены порядком по умолчанию, мы можем использовать их, чтобы изменить приоритет. Например, написать <code>(1 + 2) * 2</code>.</p><p>В JavaScript много операторов. Каждый оператор имеет соответствующий номер приоритета. Тот, у кого это число больше — выполнится раньше. Если приоритет одинаковый, то порядок выполнения — слева направо.</p><p>Приоритеты всех основных оператором можно посмотреть в <a href="https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/Operator_Precedence" target="_blank" rel="noopener noreferrer">таблице</a> (нет необходимости всё запоминать, обратите внимание, что приоритет унарных операторов выше, чем соответствующих бинарных).</p><h3 id="оператор-присваивания" tabindex="-1"><a class="header-anchor" href="#оператор-присваивания"><span>Оператор присваивания</span></a></h3><p>Давайте отметим, что в таблице приоритетов также есть оператор присваивания <code>=</code>. У него один из самых низких приоритетов: <code>2</code>. Именно поэтому, когда переменной что-либо присваивают, например, <code>x = 2 * 2 + 1</code>, то сначала выполнится арифметика, а уже затем произойдёт присваивание <code>=</code> с сохранением результата в <code>x</code>.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> x <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="инкремент-декремент" tabindex="-1"><a class="header-anchor" href="#инкремент-декремент"><span>Инкремент/декремент</span></a></h3><p>Одной из наиболее частых числовых операций в программировании является увеличение или уменьшение на единицу.</p><p>Для этого существуют даже специальные операторы:</p><blockquote><p><strong>Инкремент</strong> <code>++</code> увеличивает переменную на <code>1</code>.</p></blockquote><p>Пример:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">let</span> counter <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line">counter<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token comment">// работает как counter = counter + 1, просто запись короче</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> counter <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>Декремент</strong> <code>--</code> уменьшает переменную на <code>1</code>.</p></blockquote><p>Пример:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">let</span> counter <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line">counter<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token comment">// работает как counter = counter - 1, просто запись короче</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> counter <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>[!WARNING]<br><strong>Инкремент/декремент</strong> можно применить только к переменной. Попытка использовать его на значении типа <code>5++</code>, приведёт к ошибке.</p></blockquote><h3 id="операторы-сравнения" tabindex="-1"><a class="header-anchor" href="#операторы-сравнения"><span>Операторы сравнения</span></a></h3><p>Многие операторы сравнения известны нам из математики.</p><p>В JavaScript они записываются так:</p><ul><li>Больше/меньше: <code>a &gt; b</code>, <code>a &lt; b</code>.</li><li>Больше/меньше или равно: <code>a &gt;= b</code>, <code>a &lt;= b</code>.</li><li>Равно: <code>a == b</code>. Обратите внимание, для сравнения используется двойной знак равенства <code>==</code>. Один знак равенства <code>a = b</code> означал бы присваивание.</li><li>Не равно. В математике обозначается символом <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo mathvariant="normal">≠</mo></mrow><annotation encoding="application/x-tex">≠</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mrel"><span class="mrel"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="inner"><span class="mord"><span class="mrel"></span></span></span><span class="fix"></span></span></span></span></span><span class="mrel">=</span></span></span></span></span>, но в JavaScript записывается как <code>a != b</code>.</li></ul><blockquote><p>Все операторы сравнения возвращают значение логического типа.</p></blockquote><ul><li><code>true</code> — означает «да», «верно», «истина».</li><li><code>false</code> — означает «нет», «неверно», «ложь».</li></ul><h4 id="сравнение-чисел" tabindex="-1"><a class="header-anchor" href="#сравнение-чисел"><span>Сравнение чисел</span></a></h4><p>Например:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token number">2</span> <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// true (верно)</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false (неверно)</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true (верно)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Результат сравнения можно присвоить переменной, как и любое значение:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">&gt;</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment">// результат сравнения присваивается переменной result</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> result <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="сравнение-строк" tabindex="-1"><a class="header-anchor" href="#сравнение-строк"><span>Сравнение строк</span></a></h4><p>Чтобы определить, что одна строка больше другой, JavaScript использует «алфавитный» или «лексикографический» порядок.</p><p>Другими словами, строки сравниваются посимвольно.</p><p>Например:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&#39;Я&#39;</span> <span class="token operator">&gt;</span> <span class="token string">&#39;А&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&#39;Коты&#39;</span> <span class="token operator">&gt;</span> <span class="token string">&#39;Кода&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&#39;Сонный&#39;</span> <span class="token operator">&gt;</span> <span class="token string">&#39;Сон&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Алгоритм сравнения двух строк довольно прост:</p><ol><li>Сначала сравниваются первые символы строк.</li><li>Если первый символ первой строки больше (меньше), чем первый символ второй, то первая строка больше (меньше) второй. Сравнение завершено.</li><li>Если первые символы равны, то таким же образом сравниваются уже вторые символы строк.</li><li>Сравнение продолжается, пока не закончится одна из строк.</li><li>Если обе строки заканчиваются одновременно, то они равны. Иначе, большей считается более длинная строка.</li></ol><p>В примерах выше сравнение <code>&#39;Я&#39; &gt; &#39;А&#39;</code> завершится на первом шаге, тогда как строки <code>&#39;Коты&#39;</code> и <code>&#39;Кода&#39;</code> будут сравниваться посимвольно:</p><ol><li><code>К</code> равна <code>К</code>.</li><li><code>о</code> равна <code>о</code>.</li><li><code>т</code> больше, чем <code>д</code>. На этом сравнение заканчивается.</li><li>Результат: Первая строка больше.</li></ol><blockquote><p>[!INFO]<br><strong>Используется кодировка Unicode, а не настоящий алфавит</strong><br> Приведённый выше алгоритм сравнения похож на алгоритм, используемый в словарях и телефонных книгах, но между ними есть и различия. Например, в JavaScript имеет значение регистр символов. Заглавная буква <code>&quot;A&quot;</code> не равна строчной <code>&quot;a&quot;</code>. Какая же из них больше? Строчная <code>&quot;a&quot;</code>. Почему? Потому что строчные буквы имеют больший код во внутренней таблице кодирования, которую использует JavaScript (<a href="https://unicode-table.com/ru/" target="_blank" rel="noopener noreferrer">Unicode</a>).</p></blockquote><h4 id="сравнение-разных-типов" tabindex="-1"><a class="header-anchor" href="#сравнение-разных-типов"><span>Сравнение разных типов</span></a></h4><p>При сравнении значений разных типов JavaScript приводит каждое из них к числу.</p><p>Например:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&#39;2&#39;</span> <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true, строка &#39;2&#39; становится числом 2</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&#39;01&#39;</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true, строка &#39;01&#39; становится числом 1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Логическое значение <code>true</code> становится <code>1</code>, а <code>false</code> — <code>0</code>.</p><p>Например:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token boolean">true</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token boolean">false</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="строгое-сравнение" tabindex="-1"><a class="header-anchor" href="#строгое-сравнение"><span>Строгое сравнение</span></a></h4><p>Использование обычного сравнения <code>==</code> может вызывать проблемы.</p><p>Например, оно не отличает <code>0</code> от <code>false</code>:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token number">0</span> <span class="token operator">==</span> <span class="token boolean">false</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Та же проблема с пустой строкой:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&#39;&#39;</span> <span class="token operator">==</span> <span class="token boolean">false</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Это происходит из-за того, что операнды разных типов преобразуются оператором <code>==</code> к числу. В итоге, и пустая строка, и <code>false</code> становятся нулём. Как же тогда отличать <code>0</code> от <code>false</code>?</p><p>Оператор строгого равенства <code>===</code> проверяет равенство без приведения типов. Другими словами, если <code>a</code> и <code>b</code> имеют разные типы, то проверка <code>a === b</code> немедленно возвращает <code>false</code> без попытки их преобразования.</p><p>Давайте проверим:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token number">0</span> <span class="token operator">===</span> <span class="token boolean">false</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false, так как сравниваются разные типы</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Ещё есть оператор строгого неравенства <code>!==</code>, аналогичный <code>!=</code>.</p><p>Оператор строгого равенства делает код более очевидным и оставляет меньше места для ошибок.</p><h4 id="сравнение-с-null-и-undefined" tabindex="-1"><a class="header-anchor" href="#сравнение-с-null-и-undefined"><span>Сравнение с null и undefined</span></a></h4><blockquote><p>Значения <code>null</code> и <code>undefined</code> равны <code>==</code> друг другу и не равны любому другому значению.</p></blockquote><p><strong>При строгом равенстве <code>===</code></strong></p><p>Эти значения различны, так как различны их типы.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token keyword">null</span> <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>При нестрогом равенстве <code>==</code></strong></p><p>Эти значения равны друг другу и не равны никаким другим значениям. Это специальное правило языка.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token keyword">null</span> <span class="token operator">==</span> <span class="token keyword">undefined</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Поведение <code>null</code> и <code>undefined</code> при сравнении с другими значениями — особое. При использовании математических операторов и других операторов сравнения <code>&lt; &gt; &lt;= &gt;=</code>, значения <code>null</code>/<code>undefined</code> преобразуются к числам: <code>null</code> становится <code>0</code>, а <code>undefined</code> — <code>NaN</code>.</p><h3 id="логические-операторы" tabindex="-1"><a class="header-anchor" href="#логические-операторы"><span>Логические операторы</span></a></h3><p>В JavaScript есть четыре логических оператора: <code>||</code> (ИЛИ), <code>&amp;&amp;</code> (И) и <code>!</code> (НЕ), <code>??</code> (Оператор нулевого слияния). В рамках данного курса оператор <code>??</code> мы рассматривать не будем.</p><p>Несмотря на своё название, данные операторы могут применяться к значениям любых типов. Полученные результаты также могут иметь различный тип. Давайте рассмотрим их подробнее.</p><blockquote><p>Если значение не логического типа, то оно к нему приводится в целях вычислений.</p></blockquote><h4 id="оператор-или" tabindex="-1"><a class="header-anchor" href="#оператор-или"><span>Оператор <code>||</code> (ИЛИ)</span></a></h4><p>Оператор ИЛИ выглядит как двойной символ вертикальной черты:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">result <span class="token operator">=</span> a <span class="token operator">||</span> b<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Традиционно в программировании ИЛИ предназначено для манипулирования булевыми значениями: в случае, если какой-либо из аргументов <code>true</code>, он вернёт <code>true</code>, в противоположной ситуации возвращается <code>false</code>.</p><p>Существует всего четыре возможные логические комбинации:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token boolean">true</span> <span class="token operator">||</span> <span class="token boolean">true</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// true</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token boolean">false</span> <span class="token operator">||</span> <span class="token boolean">true</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// true</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token boolean">true</span> <span class="token operator">||</span> <span class="token boolean">false</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// true</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token boolean">false</span> <span class="token operator">||</span> <span class="token boolean">false</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="оператор-и" tabindex="-1"><a class="header-anchor" href="#оператор-и"><span>Оператор <code>&amp;&amp;</code> (И)</span></a></h4><p>Оператор И пишется как два амперсанда:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">result <span class="token operator">=</span> a <span class="token operator">&amp;&amp;</span> b<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>В традиционном программировании И возвращает <code>true</code>, если оба аргумента истинны, а иначе — <code>false</code>.</p><p>Существует всего четыре возможные логические комбинации:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> <span class="token boolean">true</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// true</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token boolean">false</span> <span class="token operator">&amp;&amp;</span> <span class="token boolean">true</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// false</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> <span class="token boolean">false</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// false</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token boolean">false</span> <span class="token operator">&amp;&amp;</span> <span class="token boolean">false</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Приоритет оператора <code>&amp;&amp;</code> больше, чем у <code>||</code>.</p></blockquote><h4 id="оператор-не" tabindex="-1"><a class="header-anchor" href="#оператор-не"><span>Оператор <code>!</code> (НЕ)</span></a></h4><p>Оператор НЕ представлен восклицательным знаком:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">result <span class="token operator">=</span> <span class="token operator">!</span>value<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Оператор принимает один аргумент и выполняет следующие действия:</p><ol><li>Сначала приводит аргумент к логическому типу <code>true</code>/<code>false</code>.</li><li>Затем возвращает противоположное значение.</li></ol><p>Например:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token operator">!</span><span class="token boolean">true</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token operator">!</span><span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>В частности, двойное НЕ <code>!!</code> используют для преобразования значений к логическому типу:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token operator">!</span><span class="token operator">!</span><span class="token string">&quot;непустая строка&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token operator">!</span><span class="token operator">!</span><span class="token keyword">null</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>То есть первое НЕ преобразует значение в логическое значение и возвращает обратное, а второе НЕ снова инвертирует его. В конце мы имеем простое преобразование значения в логическое.</p><p>Есть немного более подробный способ сделать то же самое — встроенная функция <code>Boolean</code> которую мы рассматривали ранее когда говорили о преобразовании типов:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">&quot;non-empty string&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Приоритет НЕ <code>!</code> является наивысшим из всех логических операторов, поэтому он всегда выполняется первым, перед <code>&amp;&amp;</code> или <code>||</code>.</p></blockquote><h2 id="условия-их-виды-и-комбинации" tabindex="-1"><a class="header-anchor" href="#условия-их-виды-и-комбинации"><span>Условия, их виды и комбинации</span></a></h2><p>Иногда нам нужно выполнить различные действия в зависимости от условий. Для этого мы можем использовать инструкцию <code>if</code> и условный оператор <code>?</code>, который также называют «тернарным оператором».</p><h3 id="инструкция-if-если" tabindex="-1"><a class="header-anchor" href="#инструкция-if-если"><span>Инструкция <code>if</code> (ЕСЛИ)</span></a></h3><p>Инструкция <code>if(...)</code> вычисляет условие в скобках и, если результат <code>true</code>, то выполняет блок кода.</p><p>Например:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">let</span> year <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">&#39;В каком году человек полетел в космос?&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>year <span class="token operator">==</span> <span class="token number">1961</span><span class="token punctuation">)</span> <span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">&#39;Именно так!&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>В примере выше, условие — это простая проверка на равенство <code>(year == 1961)</code>, но оно может быть и гораздо более сложным.</p><p>Если мы хотим выполнить более одной инструкции, то нужно заключить блок кода в фигурные скобки:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">let</span> year <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">&#39;В каком году человек полетел в космос?&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>year <span class="token operator">==</span> <span class="token number">1961</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">&quot;Правильно!&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">&quot;Вы такой умный!&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>[!TIP]<br> Рекомендуется использовать фигурные скобки <code>{}</code> всегда, когда вы используете инструкцию <code>if</code>, даже если выполняется только одна команда. Это улучшает читаемость кода.</p></blockquote><p>Инструкция <code>if (…)</code> вычисляет выражение в скобках и преобразует результат к логическому типу.</p><p>Давайте вспомним правила преобразования типов которые мы изучали ранее:</p><ul><li>Число <code>0</code>, пустая строка <code>&quot;&quot;</code>, <code>null</code>, <code>undefined</code> и <code>NaN</code> становятся <code>false</code>. Из-за этого их называют <em>«ложными»</em> значениями или <strong>falsy</strong>.</li><li>Остальные значения становятся <code>true</code>, поэтому их называют <em>«правдивыми»</em> значениями или <strong>truthy</strong>.</li></ul><p>Таким образом, код при таком условии никогда не выполнится:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 0 is falsy</span></span>
<span class="line">  <span class="token operator">...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>...а при таком — выполнится всегда:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 1 is truthy</span></span>
<span class="line">  <span class="token operator">...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="блок-else-иначе" tabindex="-1"><a class="header-anchor" href="#блок-else-иначе"><span>Блок <code>else</code> (ИНАЧЕ)</span></a></h3><p>Инструкция <code>if</code> может содержать необязательный блок <code>else</code> («иначе»). Он выполняется, когда условие ложно.</p><p>Например:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">let</span> year <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">&#39;В каком году человек полетел в космос?&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>year <span class="token operator">==</span> <span class="token number">1961</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">&#39;Да вы знаток!&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">&#39;А вот и неправильно!&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// любое значение, кроме 1961</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="несколько-условии-else-if-иначе-если" tabindex="-1"><a class="header-anchor" href="#несколько-условии-else-if-иначе-если"><span>Несколько условий <code>else if</code> (ИНАЧЕ ЕСЛИ)</span></a></h3><p>Иногда, нужно проверить несколько вариантов условия. Для этого используется блок <code>else if</code>.</p><p>Например:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">let</span> year <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">&#39;В каком году человек полетел в космос?&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>year <span class="token operator">&lt;</span> <span class="token number">1961</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">&#39;Это слишком рано...&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>year <span class="token operator">&gt;</span> <span class="token number">1961</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">&#39;Это поздновато&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>year <span class="token operator">==</span> <span class="token number">1961</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">&#39;Верно!&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">&#39;Что-то странное вы ввели...&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>В приведённом выше коде JavaScript сначала проверит <code>year &lt; 1961</code>. Если это неверно, он переходит к следующему условию <code>year &gt; 1961</code>. Если оно тоже ложно, тогда сработает проверка <code>year == 1961</code>, и если вдруг и она по какой-то причине не пройдет (например если будет введена строка с какими-то данными, например с фразой <em>Я НЕ ЗНАЮ!</em>), тогда сработает последний <code>alert</code>.</p><p>Блоков <code>else if</code> может быть и больше. Присутствие блока <code>else</code> не является обязательным.</p><blockquote><p>[!WARNING]<br> Вне зависимости от того сколько блоков <code>else if</code> используется в коде и есть ли блок <code>else</code>, для того чтобы вся конструкция работала, должен быть один блок с изначальным условием <code>if</code> с которого и начнется проверка. Кроме того, блок <code>else</code> в наборе условий может быть только один и он всегда должен стоять самым последним.</p></blockquote><h3 id="условныи-оператор" tabindex="-1"><a class="header-anchor" href="#условныи-оператор"><span>Условный оператор <code>?</code></span></a></h3><p>Иногда нам нужно определить переменную в зависимости от условия.</p><p>Например:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">let</span> accessAllowed<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">&#39;Сколько вам лет?&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">&gt;</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  accessAllowed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">  accessAllowed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span>accessAllowed<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Так называемый «условный» оператор позволяет нам сделать это более коротким и простым способом. Оператор представлен знаком вопроса <code>?</code>. Его также называют <strong>«тернарный»</strong>, так как этот оператор, единственный в своём роде, имеет <em>три аргумента</em>.</p><p>Синтаксис:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">let</span> result <span class="token operator">=</span> условие <span class="token operator">?</span> значение_если_истина <span class="token operator">:</span> значение_если_ложь<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Сначала вычисляется <code>условие</code>: если оно истинно, тогда возвращается <code>значение_если_истина</code>, в противном случае — <code>значение_если_ложь</code>.</p><p>Например:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">let</span> accessAllowed<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">&#39;Сколько вам лет?&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">accessAllowed <span class="token operator">=</span> <span class="token punctuation">(</span>age <span class="token operator">&gt;</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span>accessAllowed<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Технически, мы можем опустить круглые скобки вокруг <code>age &gt; 18</code>. Оператор имеет низкий приоритет, поэтому он выполняется после сравнения <code>&gt;</code>.</p><blockquote><p>[!TIP]<br> Рекомендуется использовать <code>()</code> всегда, когда вы используете оператор <code>?</code>. Это улучшает читаемость кода.</p></blockquote><h2 id="что-почитать-по-теме" tabindex="-1"><a class="header-anchor" href="#что-почитать-по-теме"><span>Что почитать по теме</span></a></h2><ul><li><a href="https://learn.javascript.ru/operators" target="_blank" rel="noopener noreferrer">Современный учебник JavaScript - Базовые операторы, математика</a></li><li><a href="https://learn.javascript.ru/comparison" target="_blank" rel="noopener noreferrer">Современный учебник JavaScript - Операторы сравнения</a></li><li><a href="https://learn.javascript.ru/ifelse" target="_blank" rel="noopener noreferrer">Современный учебник JavaScript - Условное ветвление: if, &#39;?&#39;</a></li><li><a href="https://learn.javascript.ru/logical-operators" target="_blank" rel="noopener noreferrer">Современный учебник JavaScript - Логические операторы</a></li><li><a href="https://www.w3schools.com/js/js_operators.asp" target="_blank" rel="noopener noreferrer">W3Schools - JavaScript Operators</a></li><li><a href="https://www.w3schools.com/js/js_comparisons.asp" target="_blank" rel="noopener noreferrer">W3Schools - JavaScript Comparison and Logical Operators</a></li><li><a href="https://www.w3schools.com/js/js_if_else.asp" target="_blank" rel="noopener noreferrer">W3Schools - JavaScript if, else, and else if</a></li></ul>`,184))])}const v=e(u,[["render",d]]),g=JSON.parse('{"path":"/disciplines/op04/op04_10.html","title":"ОП.04 - 10 - Операторы, операции и выражения. Условия, их виды и комбинации","lang":"ru-RU","frontmatter":{"description":"Примечание ЭТО АРХИВНАЯ ВЕРСИЯ КУРСА! Материалы предназначаются для пересдающих дисциплину \\"ОП.04 - Основы алгоритмизации и программирования\\" в соответствии с учебными планами С...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ОП.04 - 10 - Операторы, операции и выражения. Условия, их виды и комбинации\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-10-31T12:29:12.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://it.vshp.online/disciplines/op04/op04_10.html"}],["meta",{"property":"og:site_name","content":"Кафедра ИТ"}],["meta",{"property":"og:title","content":"ОП.04 - 10 - Операторы, операции и выражения. Условия, их виды и комбинации"}],["meta",{"property":"og:description","content":"Примечание ЭТО АРХИВНАЯ ВЕРСИЯ КУРСА! Материалы предназначаются для пересдающих дисциплину \\"ОП.04 - Основы алгоритмизации и программирования\\" в соответствии с учебными планами С..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ru-RU"}],["meta",{"property":"og:updated_time","content":"2025-10-31T12:29:12.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-31T12:29:12.000Z"}]]},"git":{"updatedTime":1761913752000,"contributors":[{"name":"PAVEL TKACHEV","username":"","email":"phoenixweiss@ya.ru","commits":1}],"changelog":[{"hash":"a771585bc5911f4a729d06794a6706536be6cc56","time":1761913752000,"email":"phoenixweiss@ya.ru","author":"PAVEL TKACHEV","message":"Update <a href=\\"http://index.md\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">index.md</a>, abacus.png, ada_lawlace.png, and 105 more files"}]},"autoDesc":true,"filePathRelative":"disciplines/op04/op04_10.md"}');export{v as comp,g as data};
