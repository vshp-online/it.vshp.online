import{_ as d,c as k,b as s,d as c,a as m,w as e,r as u,o as v,e as n}from"./app-DiDl7sIA.js";const b={};function y(g,a){const r=u("Mermaid"),i=u("Tabs");return v(),k("div",null,[a[8]||(a[8]=s("h1",{id:"мдк-11-01-17-введение-в-хранимые-процедуры",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#мдк-11-01-17-введение-в-хранимые-процедуры"},[s("span",null,"МДК.11.01 - 17 - Введение в хранимые процедуры")])],-1)),a[9]||(a[9]=s("p",null,"Примеры данной темы используют учебную БД:",-1)),c(i,{data:[{id:"Структура БД"},{id:"Дамп"},{id:"Таблицы"}]},{title0:e(({value:t,isActive:l})=>[...a[0]||(a[0]=[n("Структура БД",-1)])]),title1:e(({value:t,isActive:l})=>[...a[1]||(a[1]=[n("Дамп",-1)])]),title2:e(({value:t,isActive:l})=>[...a[2]||(a[2]=[n("Таблицы",-1)])]),tab0:e(({value:t,isActive:l})=>[c(r,{code:"eJxLLXLJTEwvSszlUlAoLU4tKlaoBrIUFDz9QhQyUxQCvMG8MMcgZw/HIIW8xNxUoEAtECcmJ+eX5pXgV1+SWZID0gCRB5kfD1TkBlHk4urs6evoo5CUmJOYlwwzF+KImhpd3fxqhCVWCkoX9l3YcmHHhb26F3Zd2Kd7Yc+FvUCRzUCRPUpcAN0zQl0="})]),tab1:e(({value:t,isActive:l})=>[...a[3]||(a[3]=[s("div",{class:"language-sql line-numbers-mode has-collapsed-lines collapsed","data-highlighter":"prismjs","data-ext":"sql",style:{"--vp-collapsed-lines":"10"}},[s("pre",null,[s("code",{class:"language-sql"},[s("span",{class:"line"},[s("span",{class:"token keyword"},"SET"),n(" foreign_key_checks "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token number"},"0"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"DROP"),n(),s("span",{class:"token keyword"},"TABLE"),n(),s("span",{class:"token keyword"},"IF"),n(),s("span",{class:"token keyword"},"EXISTS"),n(" users"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"DROP"),n(),s("span",{class:"token keyword"},"TABLE"),n(),s("span",{class:"token keyword"},"IF"),n(),s("span",{class:"token keyword"},"EXISTS"),n(" accounts"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"CREATE"),n(),s("span",{class:"token keyword"},"TABLE"),n(),s("span",{class:"token identifier"},[s("span",{class:"token punctuation"},"`"),n("users"),s("span",{class:"token punctuation"},"`")]),n(),s("span",{class:"token punctuation"},"(")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token identifier"},[s("span",{class:"token punctuation"},"`"),n("id"),s("span",{class:"token punctuation"},"`")]),n(),s("span",{class:"token keyword"},"INT"),n(),s("span",{class:"token operator"},"NOT"),n(),s("span",{class:"token boolean"},"NULL"),n(),s("span",{class:"token keyword"},"AUTO_INCREMENT"),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token identifier"},[s("span",{class:"token punctuation"},"`"),n("name"),s("span",{class:"token punctuation"},"`")]),n(),s("span",{class:"token keyword"},"VARCHAR"),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"255"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token operator"},"NOT"),n(),s("span",{class:"token boolean"},"NULL"),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"PRIMARY"),n(),s("span",{class:"token keyword"},"KEY"),n(),s("span",{class:"token punctuation"},"("),s("span",{class:"token identifier"},[s("span",{class:"token punctuation"},"`"),n("id"),s("span",{class:"token punctuation"},"`")]),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"LOCK"),n(),s("span",{class:"token keyword"},"TABLES"),n(),s("span",{class:"token identifier"},[s("span",{class:"token punctuation"},"`"),n("users"),s("span",{class:"token punctuation"},"`")]),n(),s("span",{class:"token keyword"},"WRITE"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"INSERT"),n(),s("span",{class:"token keyword"},"INTO"),n(),s("span",{class:"token identifier"},[s("span",{class:"token punctuation"},"`"),n("users"),s("span",{class:"token punctuation"},"`")]),n(),s("span",{class:"token keyword"},"VALUES"),n(),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"1"),s("span",{class:"token punctuation"},","),s("span",{class:"token string"},"'Иванов Иван Иванович'"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},","),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"2"),s("span",{class:"token punctuation"},","),s("span",{class:"token string"},"'Петров Петр Петрович'"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},","),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"3"),s("span",{class:"token punctuation"},","),s("span",{class:"token string"},"'Сидоров Сидор Сидорович'"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"UNLOCK"),n(),s("span",{class:"token keyword"},"TABLES"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"CREATE"),n(),s("span",{class:"token keyword"},"TABLE"),n(),s("span",{class:"token identifier"},[s("span",{class:"token punctuation"},"`"),n("accounts"),s("span",{class:"token punctuation"},"`")]),n(),s("span",{class:"token punctuation"},"(")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token identifier"},[s("span",{class:"token punctuation"},"`"),n("id"),s("span",{class:"token punctuation"},"`")]),n(),s("span",{class:"token keyword"},"INT"),n(),s("span",{class:"token operator"},"NOT"),n(),s("span",{class:"token boolean"},"NULL"),n(),s("span",{class:"token keyword"},"AUTO_INCREMENT"),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token identifier"},[s("span",{class:"token punctuation"},"`"),n("title"),s("span",{class:"token punctuation"},"`")]),n(),s("span",{class:"token keyword"},"VARCHAR"),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"255"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token keyword"},"DEFAULT"),n(),s("span",{class:"token boolean"},"NULL"),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token identifier"},[s("span",{class:"token punctuation"},"`"),n("user_id"),s("span",{class:"token punctuation"},"`")]),n(),s("span",{class:"token keyword"},"INT"),n(),s("span",{class:"token operator"},"NOT"),n(),s("span",{class:"token boolean"},"NULL"),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token identifier"},[s("span",{class:"token punctuation"},"`"),n("balance"),s("span",{class:"token punctuation"},"`")]),n(),s("span",{class:"token keyword"},"DECIMAL"),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"10"),s("span",{class:"token punctuation"},","),s("span",{class:"token number"},"2"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token operator"},"NOT"),n(),s("span",{class:"token boolean"},"NULL"),n(),s("span",{class:"token keyword"},"DEFAULT"),n(),s("span",{class:"token string"},"'0.00'"),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"PRIMARY"),n(),s("span",{class:"token keyword"},"KEY"),n(),s("span",{class:"token punctuation"},"("),s("span",{class:"token identifier"},[s("span",{class:"token punctuation"},"`"),n("id"),s("span",{class:"token punctuation"},"`")]),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"KEY"),n(),s("span",{class:"token identifier"},[s("span",{class:"token punctuation"},"`"),n("user_id_idx"),s("span",{class:"token punctuation"},"`")]),n(),s("span",{class:"token punctuation"},"("),s("span",{class:"token identifier"},[s("span",{class:"token punctuation"},"`"),n("user_id"),s("span",{class:"token punctuation"},"`")]),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"CONSTRAINT"),n(),s("span",{class:"token identifier"},[s("span",{class:"token punctuation"},"`"),n("user_id"),s("span",{class:"token punctuation"},"`")])]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token keyword"},"FOREIGN"),n(),s("span",{class:"token keyword"},"KEY"),n(),s("span",{class:"token punctuation"},"("),s("span",{class:"token identifier"},[s("span",{class:"token punctuation"},"`"),n("user_id"),s("span",{class:"token punctuation"},"`")]),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token keyword"},"REFERENCES"),n(),s("span",{class:"token identifier"},[s("span",{class:"token punctuation"},"`"),n("users"),s("span",{class:"token punctuation"},"`")]),n(),s("span",{class:"token punctuation"},"("),s("span",{class:"token identifier"},[s("span",{class:"token punctuation"},"`"),n("id"),s("span",{class:"token punctuation"},"`")]),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token keyword"},"ON"),n(),s("span",{class:"token keyword"},"DELETE"),n(),s("span",{class:"token keyword"},"CASCADE")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token keyword"},"ON"),n(),s("span",{class:"token keyword"},"UPDATE"),n(),s("span",{class:"token keyword"},"CASCADE")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"LOCK"),n(),s("span",{class:"token keyword"},"TABLES"),n(),s("span",{class:"token identifier"},[s("span",{class:"token punctuation"},"`"),n("accounts"),s("span",{class:"token punctuation"},"`")]),n(),s("span",{class:"token keyword"},"WRITE"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"INSERT"),n(),s("span",{class:"token keyword"},"INTO"),n(),s("span",{class:"token identifier"},[s("span",{class:"token punctuation"},"`"),n("accounts"),s("span",{class:"token punctuation"},"`")]),n(),s("span",{class:"token keyword"},"VALUES"),n(),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"1"),s("span",{class:"token punctuation"},","),s("span",{class:"token string"},"'Основной'"),s("span",{class:"token punctuation"},","),s("span",{class:"token number"},"1"),s("span",{class:"token punctuation"},","),s("span",{class:"token number"},"10500.00"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},","),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"2"),s("span",{class:"token punctuation"},","),s("span",{class:"token string"},"'Резервный'"),s("span",{class:"token punctuation"},","),s("span",{class:"token number"},"1"),s("span",{class:"token punctuation"},","),s("span",{class:"token number"},"3412.57"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},","),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"3"),s("span",{class:"token punctuation"},","),s("span",{class:"token string"},"'Основной'"),s("span",{class:"token punctuation"},","),s("span",{class:"token number"},"2"),s("span",{class:"token punctuation"},","),s("span",{class:"token number"},"20750.00"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},","),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"4"),s("span",{class:"token punctuation"},","),s("span",{class:"token string"},"'Основной'"),s("span",{class:"token punctuation"},","),s("span",{class:"token number"},"3"),s("span",{class:"token punctuation"},","),s("span",{class:"token number"},"25000.00"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},","),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"5"),s("span",{class:"token punctuation"},","),s("span",{class:"token string"},"'Накопительный'"),s("span",{class:"token punctuation"},","),s("span",{class:"token number"},"2"),s("span",{class:"token punctuation"},","),s("span",{class:"token number"},"5401.75"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"UNLOCK"),n(),s("span",{class:"token keyword"},"TABLES"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"SET"),n(" foreign_key_checks "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token number"},"1"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})]),s("div",{class:"collapsed-lines"})],-1)])]),tab2:e(({value:t,isActive:l})=>[c(i,{data:[{id:"<strong>users</strong>"},{id:"<strong>accounts</strong>"}]},{title0:e(({value:p,isActive:o})=>[...a[4]||(a[4]=[s("strong",null,"users",-1)])]),title1:e(({value:p,isActive:o})=>[...a[5]||(a[5]=[s("strong",null,"accounts",-1)])]),tab0:e(({value:p,isActive:o})=>[...a[6]||(a[6]=[s("table",null,[s("thead",null,[s("tr",null,[s("th",{style:{"text-align":"right"}},"id"),s("th",{style:{"text-align":"left"}},"name")])]),s("tbody",null,[s("tr",null,[s("td",{style:{"text-align":"right"}},"1"),s("td",{style:{"text-align":"left"}},"Иванов Иван Иванович")]),s("tr",null,[s("td",{style:{"text-align":"right"}},"2"),s("td",{style:{"text-align":"left"}},"Петров Петр Петрович")]),s("tr",null,[s("td",{style:{"text-align":"right"}},"3"),s("td",{style:{"text-align":"left"}},"Сидоров Сидор Сидорович")])])],-1)])]),tab1:e(({value:p,isActive:o})=>[...a[7]||(a[7]=[s("table",null,[s("thead",null,[s("tr",null,[s("th",{style:{"text-align":"right"}},"id"),s("th",{style:{"text-align":"left"}},"title"),s("th",{style:{"text-align":"right"}},"user_id"),s("th",{style:{"text-align":"right"}},"balance")])]),s("tbody",null,[s("tr",null,[s("td",{style:{"text-align":"right"}},"1"),s("td",{style:{"text-align":"left"}},"Основной"),s("td",{style:{"text-align":"right"}},"1"),s("td",{style:{"text-align":"right"}},"10500")]),s("tr",null,[s("td",{style:{"text-align":"right"}},"2"),s("td",{style:{"text-align":"left"}},"Резервный"),s("td",{style:{"text-align":"right"}},"1"),s("td",{style:{"text-align":"right"}},"3412.57")]),s("tr",null,[s("td",{style:{"text-align":"right"}},"3"),s("td",{style:{"text-align":"left"}},"Основной"),s("td",{style:{"text-align":"right"}},"2"),s("td",{style:{"text-align":"right"}},"20750")]),s("tr",null,[s("td",{style:{"text-align":"right"}},"4"),s("td",{style:{"text-align":"left"}},"Основной"),s("td",{style:{"text-align":"right"}},"3"),s("td",{style:{"text-align":"right"}},"25000")]),s("tr",null,[s("td",{style:{"text-align":"right"}},"5"),s("td",{style:{"text-align":"left"}},"Накопительный"),s("td",{style:{"text-align":"right"}},"2"),s("td",{style:{"text-align":"right"}},"5401.75")])])],-1)])]),_:2},1024)]),_:1}),a[10]||(a[10]=m(`<p>MySQL 8 предоставляет возможность создания и использования хранимых процедур, которые являются набором инструкций, объединенных в единую единицу. Хранимые процедуры позволяют упростить и структурировать работу с базой данных, а также повысить безопасность и эффективность выполнения операций.</p><p>Хранимая процедура MySQL представляет собой <em>подпрограмму</em>, хранящуюся в базе данных. Она содержит имя, список параметров и операторы SQL. Все популярные системы управления базами данных поддерживают хранимые процедуры. Они были введены в MySQL 5.</p><p>Существует два вида подпрограмм: <strong>хранимые процедуры</strong> и <strong>функции</strong>, возвращающие значения, которые используются в других операторах SQL.</p><p>Основное отличие заключается в том, что функции могут использоваться, как любое другое выражение в операторах SQL, а хранимые процедуры должны вызываться с помощью оператора <code>CALL</code>.</p><p>Хранимые процедуры MySQL работают быстро. Преимущество сервера MySQL заключается в том, что он использует кэширование, а также заранее заданные операторы. Основной прирост скорости дает сокращение сетевого трафика. Если есть повторяющиеся задачи, которые требуют проверки, обработки циклов, нескольких операторов, и при этом не требуют взаимодействия с пользователем, это можно реализовать с помощью одного вызова процедуры, которая хранится на сервере.</p><p>Исходный код хранимых процедур всегда доступен в базе данных. Это эффективная практика связать данные с процессами, которые их обрабатывают.</p><hr><p>Пример создания хранимой процедуры без параметров:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">DELIMITER</span> $$</span>
<span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> ShowAllUsers<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">BEGIN</span></span>
<span class="line">    <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> users<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">END</span> $$</span>
<span class="line"><span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>В данном примере создается хранимая процедура <code>ShowAllUsers</code>, которая выполняет запрос на выборку всех данных из таблицы <code>users</code>.</p><p>Вызвать такую процедуру можно командой:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">CALL</span> ShowAllUsers<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">Примечание</p><p>Обратите внимание на конструкцию <code>DELIMITER $$</code> и <code>DELIMITER ;</code> — очевидно, что хранимые процедуры могут состоять из нескольких SQL-запросов, которые необходимо разделять, и чтобы не было конфликта с символом <code>;</code> который по-умолчанию разделяет запросы (чтобы он не прервал сам запрос на создание процедуры), на время создания процедуры принято задавать временный разделитель, например <code>$$</code> чтобы <code>;</code> можно было использовать внутри самой процедуры, а после того как процедура задана, значение разделителя возвращается. В качестве разделителя может быть задан почти любой символ или последовательность кроме &quot;пробела&quot;, но чаще всего принято задавать <code>$$</code> или <code>//</code>.</p></div><p>Пример хранимой процедуры с параметром на ввод:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">DELIMITER</span> $$</span>
<span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> GetUser<span class="token punctuation">(</span><span class="token operator">IN</span> userID <span class="token keyword">INT</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">BEGIN</span></span>
<span class="line">    <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> id <span class="token operator">=</span> userID<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">END</span> $$</span>
<span class="line"><span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>В данном примере создается хранимая процедура <code>GetUser</code>, которая принимает входной параметр <code>userID</code> и выполняет запрос на выборку данных из таблицы <code>users</code> по указанному идентификатору пользователя.</p><p>Вызвать такую процедуру можно командой:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">CALL</span> GetUser<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Здесь, мы получим данные пользователя с <code>ID = 1</code>;</p><div class="hint-container info"><p class="hint-container-title">Инфо</p><p>Параметры бывают трёх типов: <code>IN</code>, <code>OUT</code> и <code>INOUT</code>, или параметры ввода, параметры вывода и параметры ввода-вывода соответственно. Параметры ввода — это те что процедура принимает, параметры вывода — те что процедура возвращает по факту своего вызова, а параметры ввода-вывода — те что могут менять свое значение в процессе вызова. Кроме того, важно чтобы для каждого параметра в процедуре был задан его тип.</p></div><p>Пример хранимой процедуры с параметром на вывод:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">DELIMITER</span> $$</span>
<span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> CountUsers<span class="token punctuation">(</span><span class="token keyword">OUT</span> usersCount <span class="token keyword">INT</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">BEGIN</span></span>
<span class="line">    <span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> countInt <span class="token keyword">INTO</span> usersCount <span class="token keyword">FROM</span> users<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">END</span> $$</span>
<span class="line"><span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Данная хранимая процедура считает количество пользователей и возвращает их в виде выходного параметра <code>usersCount</code>. Выходные параметры, как правило, служат для их дальнейшего присвоения переменным.</p><p>Вызвать такую процедуру можно командой:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">SET</span> <span class="token variable">@usersCount</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">CALL</span> CountUsers<span class="token punctuation">(</span><span class="token variable">@usersCount</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token variable">@usersCount</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Обратите внимание, что для начала мы создали переменную <code>@usersCount</code> и задали ей некоторое начальное значение <code>0</code>, после чего вызвали процедуру, передав ей переменную в качестве некоторого &quot;контейнера&quot; в которую будет положен выходной параметр. После вызова процедуры, это значение присвоилось переменной, что мы впоследствии и увидели при помощи <code>SELECT</code>.</p><p>Удалить неиспользуемую процедуру можно при помощи команды:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">DROP</span> <span class="token keyword">PROCEDURE</span> CountUsers<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>При этом для удаления процедуры не нужно передавать каких-либо аргументов или использоваться скобки.</p><hr><p>Пример хранимой процедуры с параметром <code>INOUT</code>:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">DELIMITER</span> $$</span>
<span class="line"></span>
<span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> CalculateFixedTax <span class="token punctuation">(</span></span>
<span class="line">  <span class="token keyword">INOUT</span> amount <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">BEGIN</span></span>
<span class="line">  <span class="token keyword">SELECT</span> amount <span class="token operator">*</span> <span class="token number">0.2</span> <span class="token keyword">INTO</span> amount<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">END</span> $$</span>
<span class="line"></span>
<span class="line"><span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>В данном примере мы написали хранимую процедуру которая рассчитывает фиксированную ставку НДС, составляющую <code>20%</code> от переданной суммы. Результат возвращается в ту же самую переменную в которой хранилось исходной значение, что упрощает использование в рамках более сложных конструкций (например если исходное значение получено другой хранимой процедурой).</p><p>Такую хранимую процедуру мы можем вызвать следующим образом:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">SET</span> <span class="token variable">@amount</span> <span class="token operator">=</span> <span class="token number">10500</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">CALL</span> CalculateFixedTax<span class="token punctuation">(</span><span class="token variable">@amount</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token variable">@amount</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Здесь мы передали некоторую сумму для расчета налога в переменной <code>@amount</code>, и после вызова хранимой процедуры и расчета налога, результат будет записал в ту же переменную.</p><hr><p>Пример хранимой процедуры с несколькими параметрами <code>IN</code> и <code>OUT</code>:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">DELIMITER</span> $$</span>
<span class="line"></span>
<span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> GetUserBalance<span class="token punctuation">(</span></span>
<span class="line">  <span class="token operator">IN</span> userID <span class="token keyword">INT</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token keyword">OUT</span> userBalance <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token keyword">OUT</span> userName <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">BEGIN</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">SELECT</span> <span class="token function">SUM</span><span class="token punctuation">(</span>balance<span class="token punctuation">)</span> <span class="token keyword">INTO</span> userBalance</span>
<span class="line">  <span class="token keyword">FROM</span> accounts</span>
<span class="line">  <span class="token keyword">WHERE</span> user_id <span class="token operator">=</span> userID<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">SELECT</span> name <span class="token keyword">INTO</span> userName</span>
<span class="line">  <span class="token keyword">FROM</span> users</span>
<span class="line">  <span class="token keyword">WHERE</span> id <span class="token operator">=</span> userID<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">END</span> $$</span>
<span class="line"></span>
<span class="line"><span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>В данной хранимой процедуре <code>GetUserBalance</code> объявляются три параметра: <code>userID</code> типа <code>INT</code>, <code>userBalance</code> типа <code>DECIMAL(10,2)</code> и <code>userName</code> типа <code>VARCHAR(255)</code>.</p><p>Процедура сначала получает сумму баланса пользователя, при помощи функции <code>SUM(balance)</code> для переданного <code>userID</code>. Значение суммы баланса присваивается переменной <code>userBalance</code> с помощью оператора <code>SELECT INTO</code>.</p><p>Затем процедура получает имя пользователя для переданного <code>userID</code>. Имя пользователя присваивается переменной <code>userName</code> с помощью оператора <code>SELECT INTO</code>.</p><p>Таким образом, после выполнения процедуры, значения переменных <code>userBalance</code> и <code>userName</code> будут содержать соответствующие значения баланса пользователя и его имени.</p><p>Пример вызова процедуры, например для пользователя с <code>ID = 2</code>:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">SET</span> <span class="token variable">@userBalance</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">SET</span> <span class="token variable">@userName</span> <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">CALL</span> GetUserBalance<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token variable">@userBalance</span><span class="token punctuation">,</span> <span class="token variable">@userName</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token variable">@userBalance</span><span class="token punctuation">,</span> <span class="token variable">@userName</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">Инфо</p><p>Во многих СУБД также существует возможность посмотреть из каких запросов состоит хранимая процедура и как она была создана.<br> Для этого используется команда: <code>SHOW CREATE PROCEDURE ИмяХранимойПроцедуры;</code>.</p></div>`,46))])}const w=d(b,[["render",y]]),T=JSON.parse('{"path":"/disciplines/mdk1101/lectures/17_lecture.html","title":"МДК.11.01 - 17 - Введение в хранимые процедуры","lang":"ru-RU","frontmatter":{"description":"МДК.11.01 - 17 - Введение в хранимые процедуры Примеры данной темы используют учебную БД: MySQL 8 предоставляет возможность создания и использования хранимых процедур, которые я...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"МДК.11.01 - 17 - Введение в хранимые процедуры\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-10-24T14:30:06.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://it.vshp.online/disciplines/mdk1101/lectures/17_lecture.html"}],["meta",{"property":"og:site_name","content":"Кафедра ИТ"}],["meta",{"property":"og:title","content":"МДК.11.01 - 17 - Введение в хранимые процедуры"}],["meta",{"property":"og:description","content":"МДК.11.01 - 17 - Введение в хранимые процедуры Примеры данной темы используют учебную БД: MySQL 8 предоставляет возможность создания и использования хранимых процедур, которые я..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ru-RU"}],["meta",{"property":"og:updated_time","content":"2025-10-24T14:30:06.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-24T14:30:06.000Z"}]]},"git":{"updatedTime":1761316206000,"contributors":[{"name":"PAVEL TKACHEV","username":"","email":"phoenixweiss@ya.ru","commits":1}],"changelog":[{"hash":"7164abf5ea181652ae6e18935015af58c1253ed4","time":1761316206000,"email":"phoenixweiss@ya.ru","author":"PAVEL TKACHEV","message":"Update 14_lecture.md, 15_lecture.md, 16_lecture.md, and 16 more files"}]},"autoDesc":true,"filePathRelative":"disciplines/mdk1101/lectures/17_lecture.md"}');export{w as comp,T as data};
