import{_ as a,c as i,a as o,d as s,r as n,o as e}from"./app-CdTySVJ0.js";const l="/assets/mysql_logo-Cy7NOQGG.svg",g="data:image/svg+xml,%3c?xml%20version='1.0'%20encoding='UTF-8'%20standalone='no'?%3e%3csvg%20width='512px'%20height='67px'%20viewBox='0%200%20512%2067'%20version='1.1'%20xmlns='http://www.w3.org/2000/svg'%20xmlns:xlink='http://www.w3.org/1999/xlink'%20preserveAspectRatio='xMidYMid'%3e%3cg%3e%3cpath%20d='M221.034224,43.3028585%20L254.866139,43.3028585%20L236.977029,14.5219565%20L204.144344,66.5590894%20L189.201618,66.5590894%20L229.137107,4.05139996%20C230.873472,1.52582675%20233.767268,0%20236.977029,0%20C240.081163,0%20242.975008,1.47323786%20244.658785,3.94617225%20L284.75209,66.5590894%20L269.809323,66.5590894%20L262.758717,54.9309781%20L228.505591,54.9309781%20L221.034224,43.3028585%20L221.034224,43.3028585%20Z%20M376.251178,54.9309781%20L376.251178,0.631391222%20L363.570757,0.631391222%20L363.570757,60.2452021%20C363.570757,61.8762982%20364.202256,63.4547554%20365.412325,64.6649074%20C366.62231,65.8751009%20368.25349,66.5590894%20370.042461,66.5590894%20L427.867434,66.5590894%20L435.338818,54.9309781%20L376.251178,54.9309781%20L376.251178,54.9309781%20Z%20M166.471559,45.1970405%20C178.783867,45.1970405%20188.780891,35.2526558%20188.780891,22.9405145%20C188.780891,10.6284147%20178.783867,0.631391222%20166.471559,0.631391222%20L110.99843,0.631391222%20L110.99843,66.5590894%20L123.673825,66.5590894%20L123.673825,12.2595108%20L165.629671,12.2595108%20C171.522872,12.2595108%20176.258211,17.0475214%20176.258211,22.9405145%20C176.258211,28.8334992%20171.522872,33.6215597%20165.629671,33.6215597%20L129.882576,33.5689209%20L167.734175,66.5590894%20L186.150048,66.5590894%20L160.683969,45.1970405%20L166.471559,45.1970405%20L166.471559,45.1970405%20Z%20M32.9694209,66.5590894%20C14.7693798,66.5590894%209.23705556e-14,51.8266442%209.23705556e-14,33.6215597%20C9.23705556e-14,15.4164336%2014.7693798,0.631391222%2032.9694209,0.631391222%20L71.2892929,0.631391222%20C89.4943774,0.631391222%20104.253246,15.4164336%20104.253246,33.6215597%20C104.253246,51.8266442%2089.4943774,66.5590894%2071.2892929,66.5590894%20L32.9694209,66.5590894%20L32.9694209,66.5590894%20Z%20M70.4368936,54.9309781%20C82.2283308,54.9309781%2091.7781116,45.4074876%2091.7781116,33.6215597%20C91.7781116,21.8355819%2082.2283308,12.2595108%2070.4368936,12.2595108%20L33.8163525,12.2595108%20C22.030383,12.2595108%2012.4751261,21.8355819%2012.4751261,33.6215597%20C12.4751261,45.4074876%2022.030383,54.9309781%2033.8163525,54.9309781%20L70.4368936,54.9309781%20L70.4368936,54.9309781%20Z%20M311.217808,66.5590894%20C293.012682,66.5590894%20278.227789,51.8266442%20278.227789,33.6215597%20C278.227789,15.4164336%20293.012682,0.631391222%20311.217808,0.631391222%20L356.73054,0.631391222%20L349.311753,12.2595108%20L312.059696,12.2595108%20C300.273676,12.2595108%20290.697822,21.8355819%20290.697822,33.6215597%20C290.697822,45.4074876%20300.273676,54.9309781%20312.059696,54.9309781%20L357.782733,54.9309781%20L350.311433,66.5590894%20L311.217808,66.5590894%20L311.217808,66.5590894%20Z%20M466.276962,54.9309781%20C456.5429,54.9309781%20448.282225,48.4065938%20445.75656,39.4092751%20L499.951078,39.4092751%20L507.422461,27.7811639%20L445.75656,27.7811639%20C448.282225,18.8364757%20456.5429,12.2595108%20466.276962,12.2595108%20L503.476422,12.2595108%20L511.000403,0.631391222%20L465.435074,0.631391222%20C447.229948,0.631391222%20432.445056,15.4164336%20432.445056,33.6215597%20C432.445056,51.8266442%20447.229948,66.5590894%20465.435074,66.5590894%20L504.528699,66.5590894%20L512,54.9309781%20L466.276962,54.9309781%20L466.276962,54.9309781%20Z'%20fill='%23EA1B22'%3e%3c/path%3e%3c/g%3e%3c/svg%3e",h="/assets/postgresql_logo-CrKK9N4f.svg",p="/assets/sqlite_logo-DoHKUGJO.svg",d="/assets/MSSQL_server_logo-TfU6dwYE.svg",c={};function u(L,t){const r=n("Mermaid");return e(),i("div",null,[t[0]||(t[0]=o('<h1 id="ит-03-02-реляционные-базы-данных-популярные-субд-понятие-связи-типы-связеи" tabindex="-1"><a class="header-anchor" href="#ит-03-02-реляционные-базы-данных-популярные-субд-понятие-связи-типы-связеи"><span>ИТ.03 - 02 - Реляционные базы данных. Популярные СУБД. Понятие связи, типы связей</span></a></h1><h2 id="введение" tabindex="-1"><a class="header-anchor" href="#введение"><span>Введение</span></a></h2><p>Реляционные базы данных (РБД) — это основа современных систем хранения данных, используемых повсеместно: от интернет-магазинов до банковских систем. Понимание их структуры и принципов работы необходимо для разработки программного обеспечения, анализа данных и управления информацией. В этой лекции мы рассмотрим основы реляционных баз данных, популярные СУБД и типы связей между таблицами.</p><hr><h2 id="реляционные-базы-данных" tabindex="-1"><a class="header-anchor" href="#реляционные-базы-данных"><span>Реляционные базы данных</span></a></h2><p>Базы данных (БД) — это организованные структуры, предназначенные для хранения и управления информацией. Они позволяют быстро находить, добавлять и изменять данные, необходимые для решения конкретных задач.</p><p>Для работы с базами данных используются системы управления базами данных (СУБД) — специализированные программы, обеспечивающие создание, хранение, управление и анализ данных.</p><p>В рамках данного курса мы сосредоточимся на <strong>реляционных базах данных (РБД)</strong>, поскольку они являются наиболее распространённым типом.</p><blockquote><p>Реляционная база данных — это данные, организованные в виде взаимосвязанных таблиц, где каждая таблица хранит данные об определённой сущности.</p></blockquote><h3 id="как-устроена-реляционная-база-данных" tabindex="-1"><a class="header-anchor" href="#как-устроена-реляционная-база-данных"><span>Как устроена реляционная база данных?</span></a></h3><p>Реляционная база данных состоит из таблиц. Каждая таблица:</p><ul><li><strong>Имеет строки (записи):</strong> Каждая строка представляет собой один объект или событие, например, конкретного студента.</li><li><strong>Содержит столбцы (поля):</strong> Каждый столбец хранит информацию о свойствах объекта, например, имя, дата рождения или группа.</li></ul><h4 id="пример-таблицы-студенты" tabindex="-1"><a class="header-anchor" href="#пример-таблицы-студенты"><span>Пример таблицы: &quot;Студенты&quot;</span></a></h4><table><thead><tr><th>ID</th><th>ФИО</th><th>Группа</th><th>ID курса</th></tr></thead><tbody><tr><td>1</td><td>Иванов Иван Иванович</td><td>ИСиП-25</td><td>1</td></tr><tr><td>2</td><td>Петров Петр Петрович</td><td>МиУП-25</td><td>2</td></tr><tr><td>3</td><td>Сергеев Сергей Сергеевич</td><td>ИСиП-27</td><td>1</td></tr></tbody></table><p>Каждая строка в этой таблице представляет студента, а столбцы содержат его данные:</p><ul><li><strong>ID</strong> — уникальный идентификатор студента.</li><li><strong>ФИО</strong> — имя студента.</li><li><strong>Группа</strong> — учебная группа.</li><li><strong>ID курса</strong> — идентификатор курса, который он изучает.</li></ul><h4 id="пример-таблицы-курсы" tabindex="-1"><a class="header-anchor" href="#пример-таблицы-курсы"><span>Пример таблицы: &quot;Курсы&quot;</span></a></h4><table><thead><tr><th>ID</th><th>Название курса</th><th>Преподаватель</th></tr></thead><tbody><tr><td>1</td><td>Основы программирования</td><td>Васильев Василий</td></tr><tr><td>2</td><td>Базы данных</td><td>Смирнов Александр</td></tr></tbody></table><p>Каждая строка в этой таблице представляет курс, а столбцы содержат информацию о курсе:</p><ul><li><strong>ID</strong> — уникальный идентификатор курса.</li><li><strong>Название курса</strong> — название, например, &quot;Основы программирования&quot;.</li><li><strong>Преподаватель</strong> — имя преподавателя, ведущего курс.</li></ul><h3 id="как-таблицы-связаны" tabindex="-1"><a class="header-anchor" href="#как-таблицы-связаны"><span>Как таблицы связаны?</span></a></h3><p>Таблица &quot;Студенты&quot; содержит ссылку на таблицу &quot;Курсы&quot; через поле <strong>ID курса</strong>. Это позволяет узнать, какой курс изучает каждый студент.</p><h4 id="пример-связи" tabindex="-1"><a class="header-anchor" href="#пример-связи"><span>Пример связи</span></a></h4><ul><li>Иванов Иван (группа ИСиП-25) изучает курс с ID 1, то есть &quot;Основы программирования&quot;.</li><li>Петров Петр (группа МиУП-25) изучает курс с ID 2, то есть &quot;Базы данных&quot;.</li></ul><h3 id="преимущества-такои-организации-данных" tabindex="-1"><a class="header-anchor" href="#преимущества-такои-организации-данных"><span>Преимущества такой организации данных</span></a></h3><ol><li><strong>Минимизация дублирования данных.</strong> Например, название курса хранится только в одной таблице.</li><li><strong>Удобство поиска и анализа данных.</strong> Можно быстро найти все записи, связанные с конкретным объектом.</li><li><strong>Гибкость и масштабируемость.</strong> Легко добавлять новые данные или изменять структуру таблиц.</li></ol><hr><h2 id="наиболее-популярные-реляционные-субд" tabindex="-1"><a class="header-anchor" href="#наиболее-популярные-реляционные-субд"><span>Наиболее популярные реляционные СУБД</span></a></h2><p>СУБД (Системы Управления Базами Данных) позволяют создавать, изменять и управлять базами данных. Существует огромное количество СУБД, платных и бесплатных, отличающихся между собой по функциональности.</p><hr><h3 id="mysql" tabindex="-1"><a class="header-anchor" href="#mysql"><span><strong>MySQL</strong></span></a></h3><figure><img src="'+l+'" alt="MySQL" width="240" tabindex="0" loading="lazy"><figcaption>MySQL</figcaption></figure><ul><li><strong>Особенность:</strong> Простота использования и популярность.</li><li><strong>Почему выбрать:</strong> Идеально подходит для создания сайтов и приложений. Часто используется вместе с популярными платформами для веб-разработки.</li><li><strong>Пример использования:</strong> Подходит для управления базами данных интернет-магазинов.</li></ul><hr><h3 id="oracle-database" tabindex="-1"><a class="header-anchor" href="#oracle-database"><span><strong>Oracle Database</strong></span></a></h3><figure><img src="'+g+'" alt="Oracle" width="240" tabindex="0" loading="lazy"><figcaption>Oracle</figcaption></figure><ul><li><strong>Особенность:</strong> Подходит для крупных компаний.</li><li><strong>Почему выбрать:</strong> Обрабатывает большие объемы данных и обеспечивает высокий уровень безопасности.</li><li><strong>Пример использования:</strong> Используется в банках и финансовых системах.</li></ul><hr><h3 id="postgresql" tabindex="-1"><a class="header-anchor" href="#postgresql"><span><strong>PostgreSQL</strong></span></a></h3><figure><img src="'+h+'" alt="PostgreSQL" width="120" tabindex="0" loading="lazy"><figcaption>PostgreSQL</figcaption></figure><ul><li><strong>Особенность:</strong> Гибкость и расширяемость.</li><li><strong>Почему выбрать:</strong> Подходит для сложных проектов с особыми требованиями к данным.</li><li><strong>Пример использования:</strong> Управление базами данных научных исследований.</li></ul><hr><h3 id="sqlite" tabindex="-1"><a class="header-anchor" href="#sqlite"><span><strong>SQLite</strong></span></a></h3><figure><img src="'+p+'" alt="SQLite" width="240" tabindex="0" loading="lazy"><figcaption>SQLite</figcaption></figure><ul><li><strong>Особенность:</strong> Устанавливается как один файл, без сервера.</li><li><strong>Почему выбрать:</strong> Легкий и быстрый выбор для мобильных приложений и тестовых проектов.</li><li><strong>Пример использования:</strong> Используется в приложениях для хранения данных на локальной машине.</li></ul><hr><h3 id="microsoft-sql-server" tabindex="-1"><a class="header-anchor" href="#microsoft-sql-server"><span><strong>Microsoft SQL Server</strong></span></a></h3><figure><img src="'+d+'" alt="Microsoft SQL Server" width="240" tabindex="0" loading="lazy"><figcaption>Microsoft SQL Server</figcaption></figure><ul><li><strong>Особенность:</strong> Интеграция с продуктами Microsoft.</li><li><strong>Почему выбрать:</strong> Подходит для Windows-среды и офисных приложений.</li><li><strong>Пример использования:</strong> Используется в компаниях для управления внутренними базами данных на основе решений Microsoft.</li></ul><hr><p>Эти СУБД подходят для различных задач, от небольших приложений до корпоративных систем. Выбор зависит от потребностей, масштаба проекта и бюджета.</p><hr><h2 id="структура-реляционнои-бд" tabindex="-1"><a class="header-anchor" href="#структура-реляционнои-бд"><span>Структура реляционной БД</span></a></h2><p>Основным элементом реляционной БД является таблица. Столбцы таблицы БД называются полями, а строки — записями. Первым этапом создания таблицы БД является задание ее структуры, т.е. определение количества и типа полей. Вторым этапом является ввод и редактирование записей в таблицу. БД считается созданной, даже если она пустая.</p><p>Поля таблицы просто определяют ее структуру и групповые свойства данных, записываемых в ячейках. Рассмотрим основные свойства полей БД:</p><ul><li><strong>Имя поля</strong> — определяет как надо обращаться к данным поля (имена используются как заголовки таблиц).</li><li><strong>Тип поля</strong> — определяет тип данных, которые могут содержаться в данном поле (текстовые, числовые, дата, Memo, денежный, счетчик и др.).</li><li><strong>Размер поля</strong> — определяет предельную длину данных, которые могут размещаться в поле.</li><li><strong>Формат поля</strong> — способ форматирования данных в ячейках.</li></ul><h3 id="типы-таблиц-и-ключеи-в-реляционных-базах-данных" tabindex="-1"><a class="header-anchor" href="#типы-таблиц-и-ключеи-в-реляционных-базах-данных"><span>Типы таблиц и ключей в реляционных базах данных</span></a></h3><p>Для организации данных в реляционных базах данных используются различные типы таблиц и ключей. Эти элементы помогают определить связи между таблицами и обеспечить целостность данных.</p><h4 id="типы-таблиц" tabindex="-1"><a class="header-anchor" href="#типы-таблиц"><span><strong>Типы таблиц</strong></span></a></h4><ol><li><p><strong>Базовая таблица</strong><br> Базовая таблица — это основная таблица, которая хранит данные об объектах предметной области. Она содержит:</p><ul><li>Столбцы (поля), описывающие свойства объектов.</li><li>Первичный ключ (Primary Key, PK), который однозначно идентифицирует каждую запись в таблице.<br> Пример: таблица &quot;Студенты&quot;, где каждый студент имеет уникальный ID.</li></ul></li><li><p><strong>Промежуточная таблица</strong><br> Промежуточная таблица используется для установления связей между базовыми таблицами. Она состоит только из внешних ключей (Foreign Keys, FK), которые ссылаются на первичные ключи других таблиц.<br> Пример: таблица &quot;Заказы&quot; может связывать таблицы &quot;Клиенты&quot; и &quot;Товары&quot;.</p></li></ol><h4 id="типы-ключеи" tabindex="-1"><a class="header-anchor" href="#типы-ключеи"><span><strong>Типы ключей</strong></span></a></h4><ol><li><p><strong>Первичный ключ (Primary Key, PK)</strong><br> Первичный ключ — это поле (или группа полей), которое однозначно идентифицирует каждую запись в таблице. Значения первичного ключа всегда уникальны и не могут повторяться.</p><ul><li>Если первичный ключ состоит из одного поля, он называется <strong>простым первичным ключом</strong>.</li><li>Если для однозначной идентификации записи требуется несколько полей, такой ключ называется <strong>составным первичным ключом</strong>.</li></ul><blockquote><p><strong>Составной ключ</strong> — это подтип первичного ключа, который объединяет несколько столбцов таблицы для создания уникального идентификатора.</p></blockquote><p><strong>Пример:</strong><br> В таблице &quot;Заказы&quot; первичным ключом может быть поле <code>ID заказа</code>.<br> В таблице &quot;Детали заказа&quot; первичным ключом может быть комбинация полей <code>ID заказа</code> и <code>ID товара</code>, что делает его составным первичным ключом.</p></li><li><p><strong>Внешний ключ (Foreign Key, FK)</strong><br> Внешний ключ — это поле, которое ссылается на первичный ключ другой таблицы. Он обеспечивает связь между таблицами и поддерживает целостность данных.<br><strong>Пример:</strong><br> В таблице &quot;Заказы&quot; поле <code>ID клиента</code> является внешним ключом, ссылающимся на таблицу &quot;Клиенты&quot;.</p></li></ol><p>Рассмотрим пример реляционной базы. Допустим, у нас есть сервис доставки еды. Тогда, если мы построим реляционную базу данных для этого сервиса, то она, скорее всего, будет содержать следующие таблицы:</p><ul><li>Таблица с заказами</li><li>Таблица с клиентами</li><li>Таблица с курьерами</li><li>Таблица с ресторанами</li></ul>',64)),s(r,{code:"eJyVk8tKw0AUhvc+xZB9X8BdaSsWbZWibkTK0AYNNElJ00UxQi+CC4UuXAiCeHmCVKwtrY2vcOaNPDO59TIJNSEhIf835/x/zqhWXqOXFtV3CB5HVl21WucKPIELM7wm7F65INfiIz+K5RNiclFVq5PjA6IU8wQmoRhcJVLmC7liKXtIbNOmjSrVzbZhEwXe2QB+8HQTMF6g1tBUw+YV9oIKM5jDFMawYP11saW2bNq26ArAujBmPRR7+OTCYqOC2bY030RUgg1Ylz0gh0SsPstWcvvZSmC6ptkdNPEo1vXgS2LiRtxzwgJP8jluXZJlbDUMM8Fq2EcANK9MQ8VOPlA5x55vsZvFtrCqU62B8CvauONKKRgY8ZMSTuKEZE7iSCMr6ZGGRJKX7ejNXyIBfS+VaFS4nbfVEZFYWh2twFXaaIW9LYEG1bm3FzEinwLAnFNXKZRPS8tL2J2mH88Ufv9bfiOdJN5PyN//xHEyGccJh5jsEoX1OC0i/YYp6/vQmjwYFa5HrSfKuGh6zoZI9vF9KOOWfotAPRiJ3kbg8j0jUovwP7qqFuM="}),t[1]||(t[1]=o('<p>Мы видим таблицы, из которых состоит база, и также видим, какие столбцы содержит каждая из таблиц. Важной характеристикой реляционных баз данных является то, что между таблицами существуют отношения. Реляционные базы данных характеризуются тем, что таблицы связаны между собой через <strong>первичные ключи (PK)</strong> и <strong>внешние ключи (FK)</strong>. Эти связи позволяют организовать данные таким образом, чтобы минимизировать дублирование и обеспечить целостность информации.</p><ol><li><p><strong>Первичный ключ (Primary Key, PK):</strong></p><ul><li>Первичный ключ — это поле (или группа полей), которое однозначно идентифицирует каждую запись в таблице.</li><li>Значения первичного ключа всегда уникальны и не могут повторяться.</li><li>Например, в таблице &quot;Заказы&quot; поле <code>order_id</code> является первичным ключом, так как каждый заказ имеет уникальный идентификатор.</li></ul></li><li><p><strong>Внешний ключ (Foreign Key, FK):</strong></p><ul><li>Внешний ключ — это поле, которое ссылается на первичный ключ другой таблицы.</li><li>Он обеспечивает связь между таблицами и гарантирует, что данные остаются согласованными.</li><li>Например, в таблице &quot;Заказы&quot; поле <code>client_id</code> является внешним ключом, ссылающимся на поле <code>client_id</code> в таблице &quot;Клиенты&quot;. Это позволяет связать каждый заказ с конкретным клиентом.</li></ul></li><li><p><strong>Целостность данных:</strong></p><ul><li>Первичные и внешние ключи играют ключевую роль в поддержании целостности данных.</li><li>Если попытаться добавить в таблицу &quot;Заказы&quot; запись с несуществующим <code>client_id</code>, база данных выдаст ошибку, так как такой клиент отсутствует в таблице &quot;Клиенты&quot;.</li><li>Это помогает избежать ошибок и обеспечивает корректность данных.</li></ul></li><li><p><strong>Преимущества реляционной модели:</strong></p><ul><li><strong>Структурированность:</strong> Данные распределены по таблицам, что делает их удобными для анализа и поиска.</li><li><strong>Масштабируемость:</strong> Легко добавлять новые таблицы или изменять существующие без нарушения целостности.</li><li><strong>Гибкость:</strong> Связи между таблицами позволяют моделировать сложные реальные процессы, такие как взаимодействие клиентов, заказов и товаров.</li></ul></li></ol><h3 id="практическое-применение" tabindex="-1"><a class="header-anchor" href="#практическое-применение"><span><strong>Практическое применение</strong></span></a></h3><p>Реляционные базы данных широко используются в различных областях:</p><ul><li><strong>Интернет-магазины:</strong> Управление заказами, товарами и клиентами.</li><li><strong>Банковские системы:</strong> Хранение информации о клиентах, счетах и транзакциях.</li><li><strong>Образовательные учреждения:</strong> Учёт студентов, курсов и преподавателей.</li></ul><p>Пример из диаграммы выше показывает, как можно организовать базу данных для сервиса доставки еды. Каждая таблица содержит только те данные, которые относятся к определённой сущности (например, клиенты, заказы, рестораны).</p><p>Связи между таблицами обеспечивают возможность быстро находить нужную информацию, например:</p><ul><li>Какие заказы сделал конкретный клиент?</li><li>Какие рестораны обслуживают заказы в определённом городе?</li></ul><hr><h2 id="виды-связеи-в-реляционных-бд" tabindex="-1"><a class="header-anchor" href="#виды-связеи-в-реляционных-бд"><span>Виды связей в реляционных БД</span></a></h2><p>В реляционных базах данных данные обычно распределяются по нескольким таблицам, которые связаны друг с другом. Это позволяет структурировать информацию, избегая её избыточности. Такие связи между таблицами помогают моделировать реальные объекты и процессы, делая базы данных удобными для хранения, поиска и анализа данных.</p><h3 id="зачем-нужны-связи" tabindex="-1"><a class="header-anchor" href="#зачем-нужны-связи"><span>Зачем нужны связи?</span></a></h3><p>Связи между таблицами позволяют:</p><ul><li><strong>Избегать дублирования данных.</strong> Например, вместо хранения информации о клиенте в каждом заказе, она хранится в отдельной таблице клиентов, а заказы просто ссылаются на нужного клиента.</li><li><strong>Улучшить целостность данных.</strong> Например, база не позволит добавить заказ с несуществующим клиентом, если между таблицами установлена связь.</li><li><strong>Облегчить анализ данных.</strong> Можно легко соединить данные из разных таблиц и получить, например, список всех заказов конкретного клиента.</li></ul><h3 id="пример" tabindex="-1"><a class="header-anchor" href="#пример"><span>Пример</span></a></h3><p>Представьте, что мы создаём базу данных для интернет-магазина. В ней есть таблицы с информацией о клиентах, заказах и товарах. Вот как могут выглядеть связи:</p><ul><li>Таблица <strong>&quot;Клиенты&quot;</strong> хранит информацию о каждом клиенте: его имя, телефон и электронную почту.</li><li>Таблица <strong>&quot;Заказы&quot;</strong> содержит записи о заказах, в том числе ссылку на клиента, который сделал заказ.</li><li>Таблица <strong>&quot;Товары&quot;</strong> описывает сами товары: их названия, цены и категории.</li><li>Каждому заказу может соответствовать несколько товаров.</li></ul>',17)),s(r,{code:"eJyNk81Kw0AUhfc+xZB9X8BdaRWLf6WIG5ES2qCBJqkxXUgrtFXoQtCNoBRc2IU7IRRrpT/xFe68kecmGU0xgWYgmzln8p1zJ4ZbNPUzV7c2BJ5CwzRs7/JEoyHN6YsmtJR9eaedina4z0/p4EjUQl3VrIvyrtBKRUGzPz352q/4OF8p7OQrymDrliE0eqaFfFjX0zx3bDaNoJzTRN5SQMt1zYalmw2Y39lKM4Tpsh3LZ4JvCuSAD0g97zp8H7p1w+VKnsiHyqdpSiEOi5J9TJU4CVfcKpT283vCczy9UdUtp2V7gHuVN7TAAkWqbbXx7ezGI+Cy69RbtXCKI4QdI2o3BbkZyRLQOCiWpzWq9PEMX0JKqNElMDLMKrEyN12zxu43Bkfg/65E6UXDw/Q4xyPmjpSceLWjzDmoljILTcSPtekJWHvR0m3P9K4APoQGFHIAoh4cYwoUd/IPEp1OLue048sjNoUme/QR3mCkiBzxXlIZJ471ATtA84nv9SOPmm2WCzy4F/IefD53pm38AO9ws/U="}),t[2]||(t[2]=o('<p>Связи между этими таблицами помогают понять, какой клиент сделал заказ, какие товары в нём были, и сколько он стоит.</p><p>Например, благодаря приведенному примеру можно сделать вывод что:</p><ul><li><strong>Клиенты</strong> и <strong>Заказы</strong> имеют связь <strong>&quot;Один ко многим&quot;</strong>. Это означает, что один клиент может сделать несколько заказов, но каждый заказ принадлежит только одному клиенту. Например, клиент Иван может заказать книгу, затем телефон — оба заказа будут связаны с ним.</li><li><strong>Заказы</strong> и <strong>Товары</strong> связаны через промежуточную таблицу <strong>Детали заказа</strong>. Это сделано потому, что один заказ может содержать сразу несколько товаров (например, книгу и телефон), а один и тот же товар может быть в разных заказах. Такая связь называется <strong>&quot;Многие ко многим&quot;</strong>. Детали заказа хранят информацию о каждом конкретном товаре в заказе: его количество и к какому заказу он относится.</li></ul><hr><p>В реляционных базах данных выделяют три основные типа связей:</p><ol><li><strong>Один к одному (One-to-One).</strong></li><li><strong>Один ко многим (One-to-Many).</strong></li><li><strong>Многие ко многим (Many-to-Many).</strong></li></ol><p>Далее мы разберём каждый тип связи подробно.</p><h3 id="связь-«один-к-одному»" tabindex="-1"><a class="header-anchor" href="#связь-«один-к-одному»"><span>Связь «Один к одному»</span></a></h3><p>Связь «Один к одному» означает, что одной записи в одной таблице соответствует ровно одна запись в другой таблице. Такой тип связи может быть полезен, если данные о каком-то объекте логически разделены на две части.</p><h4 id="пример-1" tabindex="-1"><a class="header-anchor" href="#пример-1"><span>Пример</span></a></h4><p>Представьте, что у нас есть база данных студентов. В таблице <strong>Студенты</strong> хранятся основные данные, такие как имя и группа, а в таблице <strong>Студенческие билеты</strong> — информация о студенческом билете, например номер и дата выдачи. У каждого студента есть только один студенческий билет, а у каждого билета — только один владелец.</p>',11)),s(r,{code:"eJxLLXLJTEwvSszlUgCC4JLSlNS8kuJopQsLLzZdbL6w5cLWC3uBrG6lWIVqsBIQ8PQLUSiGKI3PTFEI8FZQ8nRRuNiIrOXCBiW4+jDHIGcPxyCFvMTcVAWlCzMu7LnYj5AFS6UX5ZcWAOUmX2wAmrEfCKH6a5Ed5pxYlILuuPYLWy82Xth1YceFrQoXNgKp3UABSl0MdlMy0Lb4vNLcpNQioMvmXth3YQ/Q6AYkW5C1uDiGuCpkFheXpsanJJaA/DnlwgaQEoULmy52Ay3ZAHTqDiyeKlaoqdHVralB8aSCFdCAHSALQfYocQEANrm2Ng=="}),t[3]||(t[3]=o('<h4 id="пояснение" tabindex="-1"><a class="header-anchor" href="#пояснение"><span>Пояснение</span></a></h4><ol><li>Таблица <strong>Студенты</strong> хранит основную информацию о студентах: их имена и группы.</li><li>Таблица <strong>Студенческие билеты</strong> содержит данные о студенческих билетах, таких как номер билета и дата его выдачи.</li><li>Связь «Один к одному» здесь логична, потому что каждому студенту соответствует только один студенческий билет.</li></ol><hr><h3 id="связь-«один-ко-многим»" tabindex="-1"><a class="header-anchor" href="#связь-«один-ко-многим»"><span>Связь «Один ко многим»</span></a></h3><p>Связь «Один ко многим» означает, что одной записи в одной таблице может соответствовать несколько записей в другой таблице. Такой тип связи часто встречается в базах данных и используется для описания отношений, где один объект связан с множеством других.</p><h4 id="пример-2" tabindex="-1"><a class="header-anchor" href="#пример-2"><span>Пример</span></a></h4><p>Представьте, что у нас есть база данных университета. В таблице <strong>Преподаватели</strong> хранится информация о преподавателях, а в таблице <strong>Курсы</strong> — информация о курсах, которые они ведут. Один преподаватель может вести несколько курсов, но каждый курс может быть закреплён только за одним преподавателем.</p>',7)),s(r,{code:"eJxLLXLJTEwvSszlUgCCkNTE5IzUouJopQvzLzZc2Hph/4V9F7Zc2HBh04UNF5uA/N0XdijFKlSDFYOAp1+IQglEU3xmikKAt4KSp4vChf3YNV/sV4LrDHMMcvZwDFLIS8xNVVC6MOPCHmRZV79QX4WU1ILEopLc1LwSoIJZQENagIZsARq9AaKwFkw655cWFaeCnDzrYvPFhouNF7sxnJgMVoPswl0QtTCjkF0EVQx12FygB7aDvHBh74UdF7Zi1YkWCm7EhQLE+bAgV6ip0dXNr4Z5R8EKaPcmsH8nXmxS4gIAa4a2Dw=="}),t[4]||(t[4]=o('<h4 id="пояснение-1" tabindex="-1"><a class="header-anchor" href="#пояснение-1"><span>Пояснение</span></a></h4><ol><li>Таблица <strong>Преподаватели</strong> содержит информацию о каждом преподавателе: его имя и кафедру.</li><li>Таблица <strong>Курсы</strong> хранит данные о курсах, таких как название и преподаватель, который их ведёт.</li><li>Связь «Один ко многим» здесь логична, так как один преподаватель может вести несколько курсов, но каждый курс относится только к одному преподавателю.</li></ol><hr><h3 id="связь-«многие-ко-многим»" tabindex="-1"><a class="header-anchor" href="#связь-«многие-ко-многим»"><span>Связь «Многие ко многим»</span></a></h3><p>Связь «Многие ко многим» означает, что одной записи в одной таблице может соответствовать несколько записей в другой таблице, и наоборот. Это типичная ситуация, когда нужно учитывать взаимодействие между двумя наборами объектов.</p><h4 id="пример-3" tabindex="-1"><a class="header-anchor" href="#пример-3"><span>Пример</span></a></h4><p>Представьте, что у нас есть база данных интернет-магазина. В таблице <strong>Покупатели</strong> хранится информация о клиентах, а в таблице <strong>Товары</strong> — информация о продуктах, доступных в магазине. Один покупатель может купить несколько товаров, и один товар может быть куплен несколькими покупателями. Для описания этой связи используется промежуточная таблица <strong>Заказы</strong>.</p>',7)),s(r,{code:"eJyNks1Kw0AUhfd9iiH7voC70FQM/pVS3IjIkAQJmEbTZCGtUOOiC8EiCIogggt3whAMLa2tr3DnjbyTTMoQU+kEspnvnDn3xwkMl54F1KsRPI2oF/qeE/SONXiDJcz4LfwA4zGkMIepdkL6GSeOedAhluRPXZu0dolmGgT5ko6PtZXoSG83dvQ26VLPIRo8w3fVreNR9xyvP/HRFM1iPkTTBX6Mj7MX+Ai9Wa68zv6twLcjKxTJ3xFOEB3yuz+JL3JMCYxGEi8M1SgFLwO/AoOJoDHLFNI1YqPZMPf1PRS7llB9YBWYXY17GNh5m5/QayZcK8L6AlJ7Oylg9bXyILY3GUSpF1Kzphy905RZbBqKgh4zS/ZPoMuIdkM3vEL4BT1xefgIUn6DsgSWaidWO0cGg3rd78vWkC2UfmV7x1AY55JiyhVsgkHm/B434wEWBBKt9gsh6Tm+"}),t[5]||(t[5]=o('<h4 id="пояснение-2" tabindex="-1"><a class="header-anchor" href="#пояснение-2"><span>Пояснение</span></a></h4><ol><li>Таблица <strong>Покупатели</strong> содержит данные о клиентах, такие как их имена и электронные почты.</li><li>Таблица <strong>Товары</strong> хранит информацию о продуктах, включая их название и цену.</li><li>Таблица <strong>Заказы</strong> фиксирует, кто купил какой товар, в каком количестве и когда.</li><li>Связь «Многие ко многим» достигается через таблицу <strong>Заказы</strong>, которая связывает таблицы <strong>Покупатели</strong> и <strong>Товары</strong>.</li></ol><hr><h2 id="практические-задания" tabindex="-1"><a class="header-anchor" href="#практические-задания"><span>Практические задания</span></a></h2><p>Опишите структуру базы данных для следующей задачи:</p><ul><li>В университете есть студенты и курсы.</li><li>Каждый студент может записаться на несколько курсов.</li><li>Каждый курс ведёт один преподаватель.</li></ul><p><strong>Задание:</strong></p><ul><li>Перечислите таблицы, которые нужно создать.</li><li>Для каждой таблицы укажите поля (столбцы) и определите, какие поля будут первичными ключами.</li><li>Определите тип связи между таблицами (&quot;Один к одному&quot;, &quot;Один ко многим&quot;, &quot;Многие ко многим&quot;).</li><li>Объясните, почему вы выбрали именно этот тип связи.</li></ul><hr><h2 id="полезные-ссылки" tabindex="-1"><a class="header-anchor" href="#полезные-ссылки"><span>Полезные ссылки</span></a></h2><ul><li><a href="https://www.oracle.com/cis/database/what-is-a-relational-database/" target="_blank" rel="noopener noreferrer">Что такое реляционная база данных (РСУБД)?</a></li><li><a href="https://drach.pro/blog/hi-tech/item/196-popular-relational-dbms-2022" target="_blank" rel="noopener noreferrer">Владимир Драч / Анализ популярных реляционных систем управления базами данных (2022 г.)</a></li></ul>',11))])}const f=a(c,[["render",u]]),b=JSON.parse('{"path":"/disciplines/it03/lectures/02_lecture.html","title":"ИТ.03 - 02 - Реляционные базы данных. Популярные СУБД. Понятие связи, типы связей","lang":"ru-RU","frontmatter":{"description":"ИТ.03 - 02 - Реляционные базы данных. Популярные СУБД. Понятие связи, типы связей Введение Реляционные базы данных (РБД) — это основа современных систем хранения данных, использ...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ИТ.03 - 02 - Реляционные базы данных. Популярные СУБД. Понятие связи, типы связей\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-10-11T17:08:43.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://it.vshp.online/disciplines/it03/lectures/02_lecture.html"}],["meta",{"property":"og:site_name","content":"Кафедра ИТ"}],["meta",{"property":"og:title","content":"ИТ.03 - 02 - Реляционные базы данных. Популярные СУБД. Понятие связи, типы связей"}],["meta",{"property":"og:description","content":"ИТ.03 - 02 - Реляционные базы данных. Популярные СУБД. Понятие связи, типы связей Введение Реляционные базы данных (РБД) — это основа современных систем хранения данных, использ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ru-RU"}],["meta",{"property":"og:updated_time","content":"2025-10-11T17:08:43.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-11T17:08:43.000Z"}]]},"git":{"updatedTime":1760202523000,"contributors":[{"name":"PAVEL TKACHEV","username":"","email":"phoenixweiss@ya.ru","commits":4}],"changelog":[{"hash":"cf67ec40c692e1456371a639b44b1af99ee17ae1","time":1760202523000,"email":"phoenixweiss@ya.ru","author":"PAVEL TKACHEV","message":"Update 02_lecture.md"},{"hash":"b1549b6eb67a0931c1d3b434781ae9c50159166d","time":1758275524000,"email":"phoenixweiss@ya.ru","author":"PAVEL TKACHEV","message":"Добавил Zoom-in / Zoom-out для всех диаграм Mermaid, подобрал настройки чтобы на реальных материалах работало вменяемо"},{"hash":"5374482c6db708fa62ff0dbc7ba678bbadc5385d","time":1758205253000,"email":"phoenixweiss@ya.ru","author":"PAVEL TKACHEV","message":"Добавил зум-скролл для больших диаграмм"},{"hash":"e7825debe7c4f692acfa75c9f0fd383ed9a8cf89","time":1758178442000,"email":"phoenixweiss@ya.ru","author":"PAVEL TKACHEV","message":"Update settings.json, MSSQL_server_logo.svg, mysql_logo.svg, and 5 more files"}]},"autoDesc":true,"filePathRelative":"disciplines/it03/lectures/02_lecture.md"}');export{f as comp,b as data};
