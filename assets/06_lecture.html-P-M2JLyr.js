import{_ as t,c as l,a,b as s,e as n,o}from"./app-BulSEK8P.js";const p={};function c(i,e){return o(),l("div",null,[...e[0]||(e[0]=[a('<h1 id="ит-03-—-06-—-особыи-тип-данных-null-операторы-like-order-by-limit" tabindex="-1"><a class="header-anchor" href="#ит-03-—-06-—-особыи-тип-данных-null-операторы-like-order-by-limit"><span>ИТ.03 — 06 — Особый тип данных NULL. Операторы LIKE, ORDER BY, LIMIT</span></a></h1><h2 id="введение" tabindex="-1"><a class="header-anchor" href="#введение"><span>Введение</span></a></h2><p>В предыдущих темах мы научились выбирать и фильтровать данные при помощи SQL-запросов.</p><p>Сегодня разберём <strong>ещё несколько важных инструментов</strong>, которые позволяют гибко управлять выборкой: поиск по шаблону (<code>LIKE</code>), сортировку (<code>ORDER BY</code>), ограничение количества строк (<code>LIMIT</code>), а также познакомимся с особым значением — <code>NULL</code>.</p><h2 id="пример-таблицы-employees" tabindex="-1"><a class="header-anchor" href="#пример-таблицы-employees"><span>Пример таблицы <code>employees</code></span></a></h2><table><thead><tr><th>id</th><th>first_name</th><th>last_name</th><th>salary</th><th>job_title</th><th>email</th><th>bonus</th><th>gender</th><th>department</th></tr></thead><tbody><tr><td>1</td><td>Дмитрий</td><td>Петров</td><td>25000</td><td>офис-менеджер</td><td><a href="mailto:d.petrov@company.ru" target="_blank" rel="noopener noreferrer">d.petrov@company.ru</a></td><td>NULL</td><td>М</td><td>Администрация</td></tr><tr><td>2</td><td>Ольга</td><td>Антонова</td><td>41000</td><td>дизайнер</td><td><a href="mailto:designer_olga@nemail.ru" target="_blank" rel="noopener noreferrer">designer_olga@nemail.ru</a></td><td>NULL</td><td>Ж</td><td>Дизайн</td></tr><tr><td>3</td><td>Сергей</td><td>Васильев</td><td>40000</td><td>программист</td><td>NULL</td><td>+5000 руб. за проект</td><td>М</td><td>IT</td></tr><tr><td>4</td><td>Константин</td><td>Сергеев</td><td>30000</td><td>водитель</td><td><a href="mailto:k.sergeev@company.net" target="_blank" rel="noopener noreferrer">k.sergeev@company.net</a></td><td>компенсация топлива</td><td>М</td><td>Логистика</td></tr><tr><td>5</td><td>Алена</td><td>Голубева</td><td>53000</td><td>фотограф</td><td><a href="mailto:alena_photo@negmail.com" target="_blank" rel="noopener noreferrer">alena_photo@negmail.com</a></td><td>NULL</td><td>Ж</td><td>Маркетинг</td></tr><tr><td>6</td><td>Василиса</td><td>Иванова</td><td>28000</td><td>программист</td><td><a href="mailto:v.ivanova@company.ru" target="_blank" rel="noopener noreferrer">v.ivanova@company.ru</a></td><td>NULL</td><td>Ж</td><td>IT</td></tr><tr><td>7</td><td>Александр</td><td>Петров</td><td>120000</td><td>ведущий программист</td><td><a href="mailto:a.petrov@company.ru" target="_blank" rel="noopener noreferrer">a.petrov@company.ru</a></td><td>+3% к окладу</td><td>М</td><td>IT</td></tr><tr><td>8</td><td>алина</td><td>Антонова</td><td>40000</td><td>программист</td><td><a href="mailto:a.antonova@company.su" target="_blank" rel="noopener noreferrer">a.antonova@company.su</a></td><td>+2% к окладу</td><td>Ж</td><td>IT</td></tr><tr><td>9</td><td>Федор</td><td>Яковлев</td><td>27000</td><td>программист-стажер</td><td>NULL</td><td>NULL</td><td>М</td><td>IT</td></tr></tbody></table>',6),s("details",{class:"hint-container details"},[s("summary",null,"Код создания таблицы на языке SQL в диалекте SQLite"),s("div",{class:"language-sql line-numbers-mode","data-highlighter":"prismjs","data-ext":"sql"},[s("pre",null,[s("code",{class:"language-sql"},[s("span",{class:"line"},[s("span",{class:"token keyword"},"CREATE"),n(),s("span",{class:"token keyword"},"TABLE")]),n(`
`),s("span",{class:"line"},[n("  employees "),s("span",{class:"token punctuation"},"(")]),n(`
`),s("span",{class:"line"},[n("    id "),s("span",{class:"token keyword"},"INT"),n(),s("span",{class:"token keyword"},"PRIMARY"),n(),s("span",{class:"token keyword"},"KEY"),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"},[n("    first_name "),s("span",{class:"token keyword"},"VARCHAR"),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"255"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token operator"},"NOT"),n(),s("span",{class:"token boolean"},"NULL"),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"},[n("    last_name "),s("span",{class:"token keyword"},"VARCHAR"),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"255"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token operator"},"NOT"),n(),s("span",{class:"token boolean"},"NULL"),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"},[n("    salary "),s("span",{class:"token keyword"},"INT"),n(),s("span",{class:"token operator"},"NOT"),n(),s("span",{class:"token boolean"},"NULL"),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"},[n("    job_title "),s("span",{class:"token keyword"},"VARCHAR"),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"255"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token boolean"},"NULL"),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"},[n("    email "),s("span",{class:"token keyword"},"VARCHAR"),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"255"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token boolean"},"NULL"),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"},[n("    bonus "),s("span",{class:"token keyword"},"VARCHAR"),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"255"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token boolean"},"NULL"),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"},[n("    gender "),s("span",{class:"token keyword"},"CHAR"),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"1"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token boolean"},"NULL"),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"},[n("    department "),s("span",{class:"token keyword"},"VARCHAR"),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"255"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token boolean"},"NULL")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"INSERT"),n(),s("span",{class:"token keyword"},"INTO")]),n(`
`),s("span",{class:"line"},[n("  employees "),s("span",{class:"token punctuation"},"("),n("id"),s("span",{class:"token punctuation"},","),n(" first_name"),s("span",{class:"token punctuation"},","),n(" last_name"),s("span",{class:"token punctuation"},","),n(" salary"),s("span",{class:"token punctuation"},","),n(" job_title"),s("span",{class:"token punctuation"},","),n(" email"),s("span",{class:"token punctuation"},","),n(" bonus"),s("span",{class:"token punctuation"},","),n(" gender"),s("span",{class:"token punctuation"},","),n(" department"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"VALUES")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"1"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},"'Дмитрий'"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},"'Петров'"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token number"},"25000"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},"'офис-менеджер'"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},"'d.petrov@company.ru'"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token boolean"},"NULL"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},"'М'"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},"'Администрация'"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"2"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},"'Ольга'"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},"'Антонова'"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token number"},"41000"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},"'дизайнер'"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},"'designer_olga@nemail.ru'"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token boolean"},"NULL"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},"'Ж'"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},"'Дизайн'"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"3"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},"'Сергей'"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},"'Васильев'"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token number"},"40000"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},"'программист'"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token boolean"},"NULL"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},"'+5000 руб. за проект'"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},"'М'"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},"'IT'"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"4"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},"'Константин'"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},"'Сергеев'"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token number"},"30000"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},"'водитель'"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},"'k.sergeev@company.net'"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},"'компенсация топлива'"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},"'М'"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},"'Логистика'"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"5"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},"'Алена'"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},"'Голубева'"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token number"},"53000"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},"'фотограф'"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},"'alena_photo@negmail.com'"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token boolean"},"NULL"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},"'Ж'"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},"'Маркетинг'"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"6"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},"'Василиса'"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},"'Иванова'"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token number"},"28000"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},"'программист'"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},"'v.ivanova@company.ru'"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token boolean"},"NULL"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},"'Ж'"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},"'IT'"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"7"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},"'Александр'"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},"'Петров'"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token number"},"120000"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},"'ведущий программист'"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},"'a.petrov@company.ru'"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},"'+3% к окладу'"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},"'М'"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},"'IT'"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"8"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},"'алина'"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},"'Антонова'"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token number"},"40000"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},"'программист'"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},"'a.antonova@company.su'"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},"'+2% к окладу'"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},"'Ж'"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},"'IT'"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"9"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},"'Федор'"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},"'Яковлев'"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token number"},"27000"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},"'программист-стажер'"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token boolean"},"NULL"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token boolean"},"NULL"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},"'М'"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},"'IT'"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])]),s("codapi-snippet",{sandbox:"sqlite",editor:"basic",id:"employees_01_sqlite.sql"})],-1),a('<h2 id="что-такое-null" tabindex="-1"><a class="header-anchor" href="#что-такое-null"><span>Что такое NULL</span></a></h2><p>В SQL значение <code>NULL</code> означает <strong>отсутствие данных</strong>.</p><p>Это не ноль, не пустая строка и не пробел — это именно <strong>неизвестное значение</strong>.</p><p>Чтобы работать с <code>NULL</code>, используются <strong>специальные операторы</strong>:</p><table><thead><tr><th>Оператор</th><th>Назначение</th></tr></thead><tbody><tr><td><code>IS NULL</code></td><td>Проверяет, что значение отсутствует</td></tr><tr><td><code>IS NOT NULL</code></td><td>Проверяет, что значение присутствует</td></tr></tbody></table><div class="hint-container warning"><p class="hint-container-title">Примечание</p><p>Обратите внимание, что сравнение <code>column = NULL</code> <strong>не работает</strong>, потому что <code>NULL</code> не считается ни равным, ни неравным чему-либо.</p></div>',6),s("div",{class:"hint-container note"},[s("p",{class:"hint-container-title"},"Заметка"),s("p",null,[n("В стандарте SQL существует также оператор "),s("strong",null,"эквивалентности"),n(),s("code",null,"<=>"),n(", который сравнивает значения с учётом "),s("code",null,"NULL"),n(". В отличие от обычного оператора "),s("code",null,"="),n(", он возвращает "),s("code",null,"1"),n(" ("),s("code",null,"TRUE"),n("), если "),s("strong",null,[n("оба операнда "),s("code",null,"NULL")]),n(", и "),s("code",null,"0"),n(" ("),s("code",null,"FALSE"),n(") — если только один из них "),s("code",null,"NULL"),n(".")]),s("p",null,"Пример:"),s("div",{class:"language-sql line-numbers-mode","data-highlighter":"prismjs","data-ext":"sql"},[s("pre",null,[s("code",{class:"language-sql"},[s("span",{class:"line"},[s("span",{class:"token keyword"},"SELECT"),n(),s("span",{class:"token boolean"},"NULL"),n(),s("span",{class:"token operator"},"="),n(),s("span",{class:"token boolean"},"NULL"),s("span",{class:"token punctuation"},";"),n("    "),s("span",{class:"token comment"},"-- Результат: NULL")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"SELECT"),n(),s("span",{class:"token boolean"},"NULL"),n(),s("span",{class:"token operator"},"<=>"),n(),s("span",{class:"token boolean"},"NULL"),s("span",{class:"token punctuation"},";"),n("  "),s("span",{class:"token comment"},"-- Результат: 1 (TRUE)")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])]),s("p",null,[n("Оператор "),s("code",null,"<=>"),n(" чаще встречается в MySQL и используется там, где нужно точно учитывать случаи отсутствия значения.")]),s("p",null,[n("В SQLite такого оператора нет, поэтому там можно использовать "),s("code",null,"IS"),n(" / "),s("code",null,"IS NOT"),n(":")]),s("div",{class:"language-sql line-numbers-mode","data-highlighter":"prismjs","data-ext":"sql"},[s("pre",null,[s("code",{class:"language-sql"},[s("span",{class:"line"},[s("span",{class:"token keyword"},"SELECT"),n(),s("span",{class:"token boolean"},"NULL"),n(),s("span",{class:"token operator"},"IS"),n(),s("span",{class:"token boolean"},"NULL"),s("span",{class:"token punctuation"},";"),n("      "),s("span",{class:"token comment"},"-- Результат: 1 (TRUE)")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"SELECT"),n(),s("span",{class:"token boolean"},"NULL"),n(),s("span",{class:"token operator"},"IS"),n(),s("span",{class:"token operator"},"NOT"),n(),s("span",{class:"token boolean"},"NULL"),s("span",{class:"token punctuation"},";"),n("  "),s("span",{class:"token comment"},"-- Результат: 0 (FALSE)")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])]),s("codapi-snippet",{sandbox:"sqlite",editor:"basic",template:"#show_null"}),s("p",null,[n("В SQLite выражения "),s("code",null,"IS NULL"),n(" и "),s("code",null,"IS NOT NULL"),n(" надёжно определяют, является ли поле пустым ("),s("code",null,"NULL"),n(") или нет, в отличие от обычного "),s("code",null,"="),n("/"),s("code",null,"!="),n(".")])],-1),a(`<h2 id="работа-с-null" tabindex="-1"><a class="header-anchor" href="#работа-с-null"><span>Работа с NULL</span></a></h2><div class="hint-container warning"><p class="hint-container-title">Примечание</p><p>По умолчанию в консоли SQLite <strong><code>NULL</code> отображается как пустая ячейка</strong>, из-за чего его легко спутать с пустой строкой (<code>&#39;&#39;</code>).</p><p>Чтобы явно видеть <code>NULL</code> в результатах, в интерактивной среде укажите маркер для вывода:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre id="show_null"><code class="language-sql"><span class="line"><span class="token comment">-- в интерактивной консоли:</span></span>
<span class="line"><span class="token punctuation">.</span>nullvalue <span class="token string">&#39;NULL&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- дальше может идти ваш код:</span></span>
<span class="line"><span class="token comment">##CODE##</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>После этого <code>NULL</code> будет печататься именно словом <code>NULL</code>, а пустые строки останутся пустыми — их станет легко различить визуально.</p><p><strong>В наших интерактивных блоках лекций эта настройка уже включена.</strong></p></div><p>Выведем всех сотрудников, у которых не указана электронная почта:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">SELECT</span> first_name<span class="token punctuation">,</span> last_name<span class="token punctuation">,</span> email</span>
<span class="line"><span class="token keyword">FROM</span> employees</span>
<span class="line"><span class="token keyword">WHERE</span> email <span class="token operator">IS</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),s("codapi-snippet",{sandbox:"sqlite",editor:"basic","depends-on":"employees_01_sqlite.sql",template:"#show_null"},null,-1),a(`<p><strong>Результат:</strong><br> Показаны только те сотрудники, у которых значение <code>email</code> отсутствует.</p><p>А теперь наоборот — сотрудники, у которых почта <strong>указана</strong>:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">SELECT</span> first_name<span class="token punctuation">,</span> last_name<span class="token punctuation">,</span> email</span>
<span class="line"><span class="token keyword">FROM</span> employees</span>
<span class="line"><span class="token keyword">WHERE</span> email <span class="token operator">IS</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),s("codapi-snippet",{sandbox:"sqlite",editor:"basic","depends-on":"employees_01_sqlite.sql",template:"#show_null"},null,-1),a(`<p><strong>Результат:</strong><br> Показаны только сотрудники с заполненным полем <code>email</code>.</p><h2 id="поиск-по-шаблону-оператор-like" tabindex="-1"><a class="header-anchor" href="#поиск-по-шаблону-оператор-like"><span>Поиск по шаблону (оператор LIKE)</span></a></h2><p>Оператор <strong><code>LIKE</code></strong> используется для поиска строк, которые <strong>соответствуют заданному шаблону</strong>.</p><table><thead><tr><th>Символ</th><th>Значение</th></tr></thead><tbody><tr><td><code>%</code></td><td>Любая последовательность символов</td></tr><tr><td><code>_</code></td><td>Один любой символ</td></tr></tbody></table><p>Например, у нас есть таблица <code>employees</code>, в которой у каждого сотрудника есть поле <code>email</code>. Допустим, мы хотим найти всех пользователей, чьи почтовые ящики находятся на домене компании <code>company</code>. Т.е. нужно отобрать только те записи, что отвечают условию:</p><ul><li>после символа <code>@</code> следует <code>company</code></li><li>после <code>company</code> следует символ «.» и далее любая последовательность символов (т.к. есть и другие доменные зоны кроме <code>ru</code>)</li></ul><p>Для таких нетривиальных поисков по строковым полям и нужен оператор <code>LIKE</code>.</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">SELECT</span> first_name<span class="token punctuation">,</span> last_name<span class="token punctuation">,</span> email</span>
<span class="line"><span class="token keyword">FROM</span> employees</span>
<span class="line"><span class="token keyword">WHERE</span> email <span class="token operator">LIKE</span> <span class="token string">&#39;%@company.%&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),s("codapi-snippet",{sandbox:"sqlite",editor:"basic","depends-on":"employees_01_sqlite.sql"},null,-1),s("p",null,[s("strong",null,"Результат:"),s("br"),n(" Все пользователи, чьи почтовые ящики находятся на домене компании "),s("code",null,"company"),n(".")],-1),s("div",{class:"hint-container info"},[s("p",{class:"hint-container-title"},"Инфо"),s("p",null,[n("В "),s("strong",null,"MySQL"),n(" оператор "),s("code",null,"LIKE"),n(),s("strong",null,"не чувствителен к регистру"),n(" (запрос "),s("code",null,"'а%'"),n(" найдёт и "),s("code",null,"Анна"),n(", и "),s("code",null,"анна"),n("), но в "),s("strong",null,"SQLite"),n(" — оператор "),s("code",null,"LIKE"),n(),s("strong",null,"чувствителен к регистру"),n(", поэтому запрос:")]),s("div",{class:"language-sql line-numbers-mode","data-highlighter":"prismjs","data-ext":"sql"},[s("pre",null,[s("code",{class:"language-sql"},[s("span",{class:"line"},[s("span",{class:"token keyword"},"SELECT"),n(" first_name")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"FROM"),n(" employees")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"WHERE"),n(" first_name "),s("span",{class:"token operator"},"LIKE"),n(),s("span",{class:"token string"},"'а%'"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])]),s("codapi-snippet",{sandbox:"sqlite",editor:"basic","depends-on":"employees_01_sqlite.sql"}),s("p",null,"найдёт только имена, начинающиеся с маленькой буквы «а», например «алина» но не найдёт «Александр» или «Алена»."),s("p",null,[n("Если нужно найти значения и с прописной, и со строчной буквы, можно сразу указать оба варианта через "),s("code",null,"OR"),n(":")]),s("div",{class:"language-sql line-numbers-mode","data-highlighter":"prismjs","data-ext":"sql"},[s("pre",null,[s("code",{class:"language-sql"},[s("span",{class:"line"},[s("span",{class:"token keyword"},"SELECT"),n(" first_name")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"FROM"),n(" employees")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"WHERE")]),n(`
`),s("span",{class:"line"},[n("  first_name "),s("span",{class:"token operator"},"LIKE"),n(),s("span",{class:"token string"},"'А%'")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token operator"},"OR")]),n(`
`),s("span",{class:"line"},[n("  first_name "),s("span",{class:"token operator"},"LIKE"),n(),s("span",{class:"token string"},"'а%'")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])]),s("codapi-snippet",{sandbox:"sqlite",editor:"basic","depends-on":"employees_01_sqlite.sql"}),s("p",null,"Таким образом найдутся все имена, начинающиеся как с маленькой буквы «а», так и с большой «А»: «алина», «Александр» и «Алена».")],-1),a(`<p>Вывести сотрудников, чьи имена <strong>содержат букву «а»</strong>:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">SELECT</span> first_name</span>
<span class="line"><span class="token keyword">FROM</span> employees</span>
<span class="line"><span class="token keyword">WHERE</span> first_name <span class="token operator">LIKE</span> <span class="token string">&#39;%а%&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),s("codapi-snippet",{sandbox:"sqlite",editor:"basic","depends-on":"employees_01_sqlite.sql"},null,-1),a(`<p><strong>Результат:</strong><br> Выводятся сотрудники, в имени которых встречается буква <code>а</code>.</p><p>Вывести сотрудников, чьи адреса электронной почты находятся в зоне <strong>.ru</strong>:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">SELECT</span> first_name<span class="token punctuation">,</span> last_name<span class="token punctuation">,</span> email</span>
<span class="line"><span class="token keyword">FROM</span> employees</span>
<span class="line"><span class="token keyword">WHERE</span> email <span class="token operator">LIKE</span> <span class="token string">&#39;%.ru&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),s("codapi-snippet",{sandbox:"sqlite",editor:"basic","depends-on":"employees_01_sqlite.sql"},null,-1),a(`<p><strong>Результат:</strong><br> Выводятся сотрудники, адреса электронной почты которых находятся в зоне <strong>.ru</strong>.</p><p>Вывести сотрудников, получающих шестизначную зарплату:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">SELECT</span> first_name<span class="token punctuation">,</span> last_name<span class="token punctuation">,</span> job_title<span class="token punctuation">,</span> salary</span>
<span class="line"><span class="token keyword">FROM</span> employees</span>
<span class="line"><span class="token keyword">WHERE</span> salary <span class="token operator">LIKE</span> <span class="token string">&#39;______&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),s("codapi-snippet",{sandbox:"sqlite",editor:"basic","depends-on":"employees_01_sqlite.sql"},null,-1),a(`<p><strong>Результат:</strong><br> Выводятся сотрудники, в цифре зарплаты которых <strong>ровно 6 знаков</strong>.</p><h3 id="escape-символ" tabindex="-1"><a class="header-anchor" href="#escape-символ"><span>ESCAPE-символ</span></a></h3><p><code>ESCAPE</code>-символ используется для экранирования специальных символов (<code>%</code>, <code>_</code>, <code>/</code>). В случае если вам нужно найти строки, содержащие их, вы можете использовать <code>ESCAPE</code>-символ.</p><p>Например, вы хотите получить информацию по бонусам к окладу в процентах:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">SELECT</span> first_name<span class="token punctuation">,</span> last_name<span class="token punctuation">,</span> bonus</span>
<span class="line"><span class="token keyword">FROM</span> employees</span>
<span class="line"><span class="token keyword">WHERE</span> bonus <span class="token operator">LIKE</span> <span class="token string">&#39;%!%%&#39;</span> <span class="token keyword">ESCAPE</span> <span class="token string">&#39;!&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),s("codapi-snippet",{sandbox:"sqlite",editor:"basic","depends-on":"employees_01_sqlite.sql"},null,-1),a(`<p><strong>Результат:</strong><br> Выводятся сотрудники, в условиях бонуса которых содержится символ <code>%</code>. Если бы мы не экранировали трафаретный символ, то в выборку попало бы всё.</p><h2 id="сортировка-результатов-order-by" tabindex="-1"><a class="header-anchor" href="#сортировка-результатов-order-by"><span>Сортировка результатов (ORDER BY)</span></a></h2><p>При выполнении запроса <code>SELECT</code>, строки по умолчанию возвращаются в неопределенном порядке. Фактический порядок строк в этом случае зависит от того порядка в котором данные попадали в базу. Для упорядочивания записей используется конструкция <code>ORDER BY</code>.</p><p>Например, выведем всех сотрудников, отсортировав их по зарплате от наименьшей к наибольшей:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">SELECT</span> first_name<span class="token punctuation">,</span> last_name<span class="token punctuation">,</span> salary</span>
<span class="line"><span class="token keyword">FROM</span> employees</span>
<span class="line"><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> salary<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),s("codapi-snippet",{sandbox:"sqlite",editor:"basic","depends-on":"employees_01_sqlite.sql"},null,-1),a(`<p><strong>Результат:</strong><br> Сотрудники, отсортированные по зарплате — от самой высокой к самой низкой.</p><div class="hint-container tip"><p class="hint-container-title">Совет</p><p>По умолчанию используется сортировка по возрастанию (<code>ASC</code>), для сортировки по убыванию добавляется ключевое слово <code>DESC</code>.</p><p>Направление сортировки:</p><ul><li><code>ASC</code> - сортировка по возрастанию (по умолчанию, можно не указывать)</li><li><code>DESC</code> - сортировка по убыванию</li></ul><p><strong>Даже если направление сортировки <code>ASC</code> очевидно, хорошей практикой является его явное указание во всех запросах.</strong></p></div><p>Для сортировки результатов по двум или более столбцам их следует указывать через запятую.</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> столбец_1 <span class="token punctuation">[</span><span class="token keyword">ASC</span> <span class="token operator">|</span> <span class="token keyword">DESC</span><span class="token punctuation">]</span><span class="token punctuation">,</span> столбец_2 <span class="token punctuation">[</span><span class="token keyword">ASC</span> <span class="token operator">|</span> <span class="token keyword">DESC</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Данные будут сортироваться по первому столбцу, но в случае если попадаются несколько записей с совпадающими значениями в первом столбце, то они сортируются по второму столбцу. Количество столбцов, по которым можно отсортировать не ограничено.</p><p>При этом стоит учесть что правило сортировки применяется только к тому столбцу, за которым оно следует.</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> столбец_1<span class="token punctuation">,</span> столбец_2 <span class="token keyword">DESC</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>не то же самое, что</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> столбец_1 <span class="token keyword">DESC</span><span class="token punctuation">,</span> столбец_2 <span class="token keyword">DESC</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Например, выведем всех сотрудников, отсортировав по алфавиту их сначала по фамилии а потом по имени:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">SELECT</span> last_name<span class="token punctuation">,</span> first_name</span>
<span class="line"><span class="token keyword">FROM</span> employees</span>
<span class="line"><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> last_name <span class="token keyword">ASC</span><span class="token punctuation">,</span> first_name <span class="token keyword">ASC</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11),s("codapi-snippet",{sandbox:"sqlite",editor:"basic","depends-on":"employees_01_sqlite.sql"},null,-1),a(`<p><strong>Результат:</strong><br> Сотрудники упорядочены по алфавиту сначала по фамилии, а потом — по имени.</p><p>Также порядок сортировки каждого столбца может различаться, например если мы хотим вывести сотрудников, упорядочив их сначала по должности, а внутри должностей — по убыванию зарплаты:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">SELECT</span> first_name<span class="token punctuation">,</span> last_name<span class="token punctuation">,</span> job_title<span class="token punctuation">,</span> salary</span>
<span class="line"><span class="token keyword">FROM</span> employees</span>
<span class="line"><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> job_title <span class="token keyword">ASC</span><span class="token punctuation">,</span> salary <span class="token keyword">DESC</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),s("codapi-snippet",{sandbox:"sqlite",editor:"basic","depends-on":"employees_01_sqlite.sql"},null,-1),a(`<p><strong>Результат:</strong><br> Сотрудники упорядочены сначала по должности, а внутри должностей — по убыванию зарплаты.</p><h2 id="ограничение-количества-строк-limit" tabindex="-1"><a class="header-anchor" href="#ограничение-количества-строк-limit"><span>Ограничение количества строк (LIMIT)</span></a></h2><p>Оператор <strong><code>LIMIT</code></strong> ограничивает количество строк, возвращаемых запросом.</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">SELECT</span> first_name<span class="token punctuation">,</span> last_name<span class="token punctuation">,</span> salary</span>
<span class="line"><span class="token keyword">FROM</span> employees</span>
<span class="line"><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> salary <span class="token keyword">DESC</span></span>
<span class="line"><span class="token keyword">LIMIT</span> <span class="token number">3</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),s("codapi-snippet",{sandbox:"sqlite",editor:"basic","depends-on":"employees_01_sqlite.sql"},null,-1),a(`<p><strong>Результат:</strong><br> Выводятся только <strong>три сотрудника с самыми высокими зарплатами</strong>.</p><h2 id="комбинация-условии" tabindex="-1"><a class="header-anchor" href="#комбинация-условии"><span>Комбинация условий</span></a></h2><p>Можно комбинировать <code>WHERE</code>, <code>LIKE</code>, <code>ORDER BY</code> и <code>LIMIT</code> для более точных выборок:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">SELECT</span> salary<span class="token punctuation">,</span> last_name<span class="token punctuation">,</span> first_name<span class="token punctuation">,</span> department<span class="token punctuation">,</span> job_title<span class="token punctuation">,</span> email</span>
<span class="line"><span class="token keyword">FROM</span> employees</span>
<span class="line"><span class="token keyword">WHERE</span></span>
<span class="line">  department <span class="token operator">=</span> <span class="token string">&#39;IT&#39;</span></span>
<span class="line">    <span class="token operator">AND</span></span>
<span class="line">  job_title <span class="token operator">LIKE</span> <span class="token string">&#39;%программист%&#39;</span></span>
<span class="line">    <span class="token operator">AND</span></span>
<span class="line">  <span class="token punctuation">(</span>email <span class="token operator">LIKE</span> <span class="token string">&#39;%@company.ru&#39;</span> <span class="token operator">OR</span> email <span class="token operator">IS</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> salary <span class="token keyword">DESC</span><span class="token punctuation">,</span> last_name <span class="token keyword">ASC</span></span>
<span class="line"><span class="token keyword">LIMIT</span> <span class="token number">3</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),s("codapi-snippet",{sandbox:"sqlite",editor:"basic","depends-on":"employees_01_sqlite.sql",template:"#show_null"},null,-1),a(`<p><strong>Результат:</strong><br> Три сотрудника из отдела <code>IT</code> с должностями, содержащими «программист», у кого либо есть корпоративная почта на домене <code>@company.ru</code>, либо её нет; отсортированы по убыванию зарплаты (при равенстве — по фамилии)</p><hr><h2 id="практические-задания" tabindex="-1"><a class="header-anchor" href="#практические-задания"><span>Практические задания</span></a></h2><ol><li>Выведите всех сотрудников, у которых <strong>нет электронной почты</strong>.</li><li>Найдите сотрудников, чьи <strong>фамилии начинаются на «П»</strong>.</li><li>Выведите сотрудников, чьи <strong>адреса электронной почты находятся в домене <code>@company.ru</code></strong>, отсортировав их по зарплате <strong>по убыванию</strong>.</li><li>Покажите <strong>три сотрудника с самыми низкими зарплатами</strong>.</li><li>Найдите всех сотрудников, у которых в должности встречается слово <strong>«программист»</strong>, и выведите их <strong>в порядке возрастания зарплаты</strong>.</li><li>Выведите сотрудников, у которых <strong>зарплата пятизначная</strong>, и отсортируйте их по <strong>фамилии в алфавитном порядке</strong>.</li></ol><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token comment">-- Ваш код можете писать тут</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),s("codapi-snippet",{sandbox:"sqlite",editor:"basic","depends-on":"employees_01_sqlite.sql",template:"#show_null"},null,-1)])])}const r=t(p,[["render",c]]),u=JSON.parse('{"path":"/disciplines/it03/lectures/06_lecture.html","title":"ИТ.03 — 06 — Особый тип данных NULL. Операторы LIKE, ORDER BY, LIMIT","lang":"ru-RU","frontmatter":{"description":"ИТ.03 — 06 — Особый тип данных NULL. Операторы LIKE, ORDER BY, LIMIT Введение В предыдущих темах мы научились выбирать и фильтровать данные при помощи SQL-запросов. Сегодня разб...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ИТ.03 — 06 — Особый тип данных NULL. Операторы LIKE, ORDER BY, LIMIT\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-10-16T08:11:47.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://it.vshp.online/disciplines/it03/lectures/06_lecture.html"}],["meta",{"property":"og:site_name","content":"Кафедра ИТ"}],["meta",{"property":"og:title","content":"ИТ.03 — 06 — Особый тип данных NULL. Операторы LIKE, ORDER BY, LIMIT"}],["meta",{"property":"og:description","content":"ИТ.03 — 06 — Особый тип данных NULL. Операторы LIKE, ORDER BY, LIMIT Введение В предыдущих темах мы научились выбирать и фильтровать данные при помощи SQL-запросов. Сегодня разб..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ru-RU"}],["meta",{"property":"og:updated_time","content":"2025-10-16T08:11:47.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-16T08:11:47.000Z"}]]},"git":{"updatedTime":1760602307000,"contributors":[{"name":"PAVEL TKACHEV","username":"","email":"phoenixweiss@ya.ru","commits":4}],"changelog":[{"hash":"518006074187a4f2a34b578ec081c761f219468b","time":1760602307000,"email":"phoenixweiss@ya.ru","author":"PAVEL TKACHEV","message":"Update 06_lecture.md, employees_01_sqlite.sql, and table_employees_01.md"},{"hash":"ad50c9999d4378e461635297f9cd528f0bbcd880","time":1760223961000,"email":"phoenixweiss@ya.ru","author":"PAVEL TKACHEV","message":"Update 03_lecture.md, 04_lecture.md, 05_lecture.md, and 11 more files"},{"hash":"135c01736ce137e166420cdfbc2dd06692f26703","time":1760110777000,"email":"phoenixweiss@ya.ru","author":"PAVEL TKACHEV","message":"Update 06_lecture.md, orders_02_sqlite.sql, and sqlite_options.sql"},{"hash":"141752b47020c73868b9a5193933d3dbe9d1ca02","time":1760109398000,"email":"phoenixweiss@ya.ru","author":"PAVEL TKACHEV","message":"Update employees_01_sqlite.sql and table_employees_01.md"}]},"autoDesc":true,"filePathRelative":"disciplines/it03/lectures/06_lecture.md"}');export{r as comp,u as data};
