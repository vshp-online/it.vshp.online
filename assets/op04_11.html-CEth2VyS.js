import{_ as p,c as e,a as s,b as t,d as o,w as c,r as l,o as i,e as u}from"./app-CRAEKUA-.js";const r={};function d(k,n){const a=l("RouteLink");return i(),e("div",null,[n[1]||(n[1]=s('<div class="hint-container warning"><p class="hint-container-title">Примечание</p><p><strong>ЭТО АРХИВНАЯ ВЕРСИЯ КУРСА!</strong></p><p>Материалы предназначаются для пересдающих дисциплину &quot;ОП.04 - Основы алгоритмизации и программирования&quot; в соответствии с учебными планами СПО годов набора <strong>ДО 2023-го</strong>.</p><p>Материалы были перенесены со старого сайта с минимальной доработкой, поэтому не все возможности курса могут работать как ожидается, где-то может слететь форматирование.</p><p><strong>Домашние задания в рамках курса проверяться не будут!</strong></p></div><h1 id="оп-04-11-массивы-и-объекты-циклы-и-их-виды" tabindex="-1"><a class="header-anchor" href="#оп-04-11-массивы-и-объекты-циклы-и-их-виды"><span>ОП.04 - 11 - Массивы и объекты. Циклы и их виды</span></a></h1>',2)),t("p",null,[o(a,{to:"/disciplines/op04/includes/_html_example.html",title:":include"},{default:c(()=>[...n[0]||(n[0]=[u("Код примера для практической работы",-1)])]),_:1})]),n[2]||(n[2]=s(`<h2 id="массивы" tabindex="-1"><a class="header-anchor" href="#массивы"><span>Массивы</span></a></h2><p>Для хранения строго упорядоченных данных существует особая структура данных, которая называется массив, <code>Array</code>.</p><blockquote><p><strong>Массив</strong> — структура данных, хранящая набор значений (элементов массива), идентифицируемых по индексу или набору индексов, принимающих значения из некоторого заданного непрерывного диапазона.</p></blockquote><p>Наряду с объектами, которые мы рассмотрим далее, массивы относятся к составным типам данных, и называются так потому что по сути своей состоят из данных более простых типов (чисел, строк и других примитивов). При этом, в JavaScript элементами одного массива могут быть другие массивы, и такие конструкции носят название <em>многомерных массивов</em> (по количеству уровней вложенности).</p><p>Существует два варианта синтаксиса для создания пустого массива: <code>let arr = new Array();</code> или <code>let arr = [];</code>.</p><p>Практически всегда используется второй вариант синтаксиса.</p><blockquote><p>Такое объявление называют литералом массива.</p></blockquote><p>В скобках мы можем указать начальные значения элементов:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">let</span> fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;Яблоко&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Апельсин&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Слива&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> fruits <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Элементы массива нумеруются, начиная с нуля, при этом номера элементов в массивах называются <strong>индексами</strong>.</p><p>Мы можем получить элемент, указав его <strong>индекс</strong> в квадратных скобках:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">let</span> fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;Яблоко&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Апельсин&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Слива&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> fruits<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Яблоко</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> fruits<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Апельсин</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> fruits<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Слива</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Также, используя индексы мы можем заменить элемент:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">let</span> fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;Яблоко&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Апельсин&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Слива&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">fruits<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;Груша&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> fruits <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// теперь [&quot;Яблоко&quot;, &quot;Апельсин&quot;, &quot;Груша&quot;]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>...или же добавить новый к существующему массиву:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">let</span> fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;Яблоко&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Апельсин&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Слива&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">fruits<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;Лимон&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> fruits <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// теперь [&quot;Яблоко&quot;, &quot;Апельсин&quot;, &quot;Груша&quot;, &quot;Лимон&quot;]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Общее число элементов массива содержится в его свойстве length:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">let</span> fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;Яблоко&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Апельсин&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Слива&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> fruits<span class="token punctuation">.</span>length <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>В массиве могут храниться элементы любого типа, например:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token string">&#39;Яблоко&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&quot;Яблоко&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Апельсин&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Слива&quot;</span><span class="token punctuation">]</span> <span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> arr <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>[!INFO]<br> Не все языки позволяют себе такие вольности. Например, на языке <strong>C</strong> (Си) мы сначала должны четко задать длины массива и типы хранимых в нем значений, чтобы выделить строго определенное количество памяти под них. В этом смысле, язык JavaScript позволяет работать с массивами существенно более просто и комфортно (правда, ценой больших расходов памяти).</p></blockquote><p>Допустим, нам нужен последний элемент массива. Некоторые языки программирования позволяют использовать отрицательные индексы для той же цели, как-то так: <code>fruits[-1]</code>. Однако, в JavaScript такая запись не сработает. Её результатом будет <code>undefined</code>, поскольку индекс в квадратных скобках понимается буквально.</p><p>Однако, если мы обратим внимание на то что индексы начинаются с <code>0</code>, а свойство длины массива <code>length</code> всегда возвращает нам целое число его элементов, то мы сможем явно вычислить индекс последнего элемента, а затем получить к нему доступ вот так: <code>fruits[fruits.length - 1]</code>.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">let</span> fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;Яблоко&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Апельсин&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Слива&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> fruits<span class="token punctuation">[</span>fruits<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Слива</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>[!INFO]<br> Существует и более простой способ, опирающийся на сравнительно новый синтаксис <code>at</code>, но эта возможность была добавлена в язык недавно, и в старых браузерах может не работать, поэтому пока рассматривать ее не будем.</p></blockquote><p>Так как массивы в JavaScript — это особая структура данных, то она обладает некоторыми уникальными возможностями, присущими только ей. Такие особые возможности в программировании принято называть <strong>методами</strong>.</p><blockquote><p>Чем больше элементов содержит массив, тем больше времени потребуется для того, чтобы их переместить, больше операций с памятью.</p></blockquote><h3 id="методы-работающие-с-концом-массива" tabindex="-1"><a class="header-anchor" href="#методы-работающие-с-концом-массива"><span>Методы, работающие с концом массива</span></a></h3><h4 id="pop" tabindex="-1"><a class="header-anchor" href="#pop"><span><code>pop</code></span></a></h4><p>Удаляет последний элемент из массива и возвращает его:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">let</span> fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;Яблоко&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Апельсин&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Слива&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> fruits<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// удаляем &quot;Слива&quot; и выводим его</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> fruits <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Яблоко, Апельсин</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>И <code>fruits.pop()</code> и <code>fruits[fruits.length - 1]</code> возвращают последний элемент массива, но <code>fruits.pop()</code> также изменяет массив, удаляя соответствующий элемент.</p><h4 id="push" tabindex="-1"><a class="header-anchor" href="#push"><span><code>push</code></span></a></h4><p>Добавляет элемент в конец массива:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">let</span> fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;Яблоко&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Апельсин&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">fruits<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&quot;Груша&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> fruits <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Яблоко, Апельсин, Груша</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Вызов <code>fruits.push(...)</code> равнозначен <code>fruits[fruits.length] = ...</code>.</p><h3 id="методы-работающие-с-началом-массива" tabindex="-1"><a class="header-anchor" href="#методы-работающие-с-началом-массива"><span>Методы, работающие с началом массива</span></a></h3><h4 id="shift" tabindex="-1"><a class="header-anchor" href="#shift"><span><code>shift</code></span></a></h4><p>Удаляет из массива первый элемент и возвращает его:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">let</span> fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;Яблоко&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Апельсин&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Груша&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> fruits<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// удаляем Яблоко и выводим его</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> fruits <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Апельсин, Груша</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="unshift" tabindex="-1"><a class="header-anchor" href="#unshift"><span><code>unshift</code></span></a></h4><p>Добавляет элемент в начало массива:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">let</span> fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;Апельсин&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Груша&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">fruits<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token string">&#39;Яблоко&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> fruits <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Яблоко, Апельсин, Груша</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="многомерные-массивы" tabindex="-1"><a class="header-anchor" href="#многомерные-массивы"><span>Многомерные массивы</span></a></h3><p>Как было сказано ранее, массивы могут содержать элементы, которые тоже являются массивами. Это можно использовать для создания многомерных массивов, например, для хранения матриц:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">let</span> matrix <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> matrix<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5, центральный элемент</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="объекты" tabindex="-1"><a class="header-anchor" href="#объекты"><span>Объекты</span></a></h2><p>В JavaScript объекты используются очень часто, это одна из основ языка. Поэтому мы должны понять их, прежде чем углубляться куда-либо ещё. Объект может быть создан с помощью фигурных скобок <code>{...}</code> с необязательным списком свойств. Свойство — это пара <strong>«ключ: значение»</strong>, где <strong>ключ</strong> — это строка (также называемая «именем свойства»), а <strong>значением</strong> может быть чем угодно.</p><blockquote><p>[!INFO]<br> Мы можем представить объект в виде ящика с подписанными папками. Каждый элемент данных хранится в своей папке, на которой написан ключ. По ключу папку легко найти, удалить или добавить в неё что-либо.</p></blockquote><p>Пустой объект можно создать, используя один из двух вариантов синтаксиса: <code>let user = new Object();</code> или <code>let user = {};</code>.</p><p>Практически всегда используется второй вариант синтаксиса.</p><blockquote><p>Такое объявление называют литералом объекта.</p></blockquote><p>При использовании литерального синтаксиса <code>{...}</code> мы сразу можем поместить в объект несколько свойств в виде пар <strong>«ключ: значение»</strong>:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>      <span class="token comment">// объект</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Павел&quot;</span><span class="token punctuation">,</span>  <span class="token comment">// под ключом &quot;name&quot; хранится значение &quot;Павел&quot;</span></span>
<span class="line">  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">34</span>         <span class="token comment">// под ключом &quot;age&quot; хранится значение 34</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> user <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// выведется весь объект</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>У каждого свойства есть ключ (также называемый <strong>«имя»</strong> или <strong>«идентификатор»</strong>). После имени свойства следует двоеточие <code>:</code>, и затем указывается значение свойства. Если в объекте несколько свойств, то они перечисляются через запятую.</p><p>В объекте <code>user</code> сейчас находятся два свойства:</p><ol><li>Первое свойство с именем <code>name</code> и значением <code>&quot;Павел&quot;</code>.</li><li>Второе свойство с именем <code>age</code> и значением <code>34</code>.</li></ol><p>Можно сказать, что наш объект <code>user</code> — это ящик с двумя папками, подписанными <em>«name»</em> и <em>«age»</em>. Мы можем в любой момент добавить в него новые папки, удалить папки или прочитать содержимое любой папки.</p><p>Для обращения к свойствам используется запись «через точку»:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Павел&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">34</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// получаем свойства объекта:</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> user<span class="token punctuation">.</span>name <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Павел</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> user<span class="token punctuation">.</span>age <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 34</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Значение объекта может быть любого типа.</p></blockquote><p>Давайте добавим свойство с логическим значением:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Павел&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">34</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">user<span class="token punctuation">.</span>isAdmin <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> user <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// выведется объект с новым свойством</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Для удаления свойства мы можем использовать оператор <code>delete</code>:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Павел&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">34</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">delete</span> user<span class="token punctuation">.</span>age<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> user <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// выведется объект уже без свойства age</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>[!TIP]<br> Для имен свойств объекта не действуют ограничения, применимые к именам переменных, но хорошей практикой является называть их используя символы латинского алфавита, цифры и символы нижнего подчеркивания, и при этом избегать имен, начинающихся с цифр.</p></blockquote><h2 id="циклы-и-их-виды" tabindex="-1"><a class="header-anchor" href="#циклы-и-их-виды"><span>Циклы и их виды</span></a></h2><p>При написании программ зачастую встаёт задача сделать однотипное действие много раз. Например, вывести товары из списка один за другим. Или просто перебрать все числа от <code>1</code> до <code>10</code> и для каждого выполнить одинаковое действие.</p><p>Для многократного повторения одного участка кода в программировании используют <code>циклы</code>.</p><blockquote><p><strong>Цикл</strong> — разновидность управляющей конструкции в языках программирования, предназначенная для организации многократного исполнения набора инструкций при определенных условиях.</p></blockquote><p>Как правило, принято разделять циклы <strong>с предусловием</strong> и <strong>с постусловием</strong>, но иногда отдельно рассматривают и циклы <strong>с заданным количеством итераций</strong> (повторений).</p><p>В языке JavaScript для каждого из перечисленных видов циклов существует своя определенная синтаксическая конструкция.</p><h3 id="цикл-с-предусловием-—-while" tabindex="-1"><a class="header-anchor" href="#цикл-с-предусловием-—-while"><span>Цикл с предусловием — <code>while</code></span></a></h3><blockquote><p>Цикл <strong>с предусловием</strong> — цикл, который выполняется, пока истинно некоторое условие, указанное перед его началом. Это условие проверяется до выполнения тела цикла, поэтому тело может быть не выполнено ни разу (если условие с самого начала ложно).</p></blockquote><p>Цикл <code>while</code> имеет следующий синтаксис:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">while</span> <span class="token punctuation">(</span>условие<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// код, также называемый &quot;телом цикла&quot;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Код из тела цикла выполняется, пока условие <code>условие</code> истинно.</p><blockquote><p>[!INFO]<br><strong>Пример для понимания</strong></p><p>Перед нами тарелка с супом, и <em>пока она не пуста</em>, в рамках каждой итерации нам необходимо зачерпнуть ложной какое-то количество супа. Если изначально тарелка пуста, то нет смысла даже единожды пытаться зачерпнуть суп.</p></blockquote><p>Например, цикл ниже выводит <code>i</code>, пока <code>i &lt; 3</code>:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// выводит 0, затем 1, затем 2</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> i <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  i<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>[!INFO]<br> Одно выполнение тела цикла по-научному называется <strong>итерация</strong>. А переменную, которая изменяется в рамках каждой итерации, как бы отсчитывая каждый шаг цикла, часто называют <strong>итератором</strong>.</p></blockquote><p>Цикл в примере выше совершает <em>три итерации</em>, на каждой из которых инкрементируется (<code>i++</code>) значение <em>итератора</em> <code>i</code>. Значение итератора <code>i</code> также может декрементироваться (<code>i--</code>), или даже меняться произвольно (<code>i = i * 2</code>).</p><p>Если бы строка <code>i++</code> отсутствовала в примере выше, то цикл бы повторялся (в теории) бесконечно. На практике, конечно, браузер не позволит такому случиться, он предоставит пользователю возможность остановить «зависший» скрипт, а JavaScript на стороне сервера придётся «убить» процесс.</p><p>Любое выражение или переменная может быть условием цикла, а не только сравнение: условие <code>while</code> вычисляется и преобразуется в логическое значение подобно тому как это было ранее для условий <code>if (...)</code>.</p><h3 id="цикл-с-постусловием-—-do-while" tabindex="-1"><a class="header-anchor" href="#цикл-с-постусловием-—-do-while"><span>Цикл с постусловием — <code>do..while</code></span></a></h3><blockquote><p>Цикл <strong>с постусловием</strong> — цикл, в котором условие проверяется после выполнения тела цикла. Отсюда следует, что тело всегда выполняется хотя бы один раз.</p></blockquote><p>Цикл <code>do..while</code> имеет следующий синтаксис:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">do</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// тело цикла</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>условие<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Цикл сначала выполнит тело, а затем проверит условие <code>условие</code>, и пока его значение равно <code>true</code>, он будет выполняться снова и снова.</p><blockquote><p>[!INFO]<br><strong>Пример для понимания</strong></p><p>Перед нами закрытая дверь и дверной звонок, мы знаем что хозяин дома и нам очень нужно чтобы дверь открыли, и поэтому мы должны позвонить хотя бы один раз и намерены продолжать звонить <em>до тех пор пока дверь не откроется</em>.</p></blockquote><p>Например:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">do</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> i <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  i<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Такая форма синтаксиса оправдана, если вы хотите, чтобы тело цикла выполнилось <strong>хотя бы один раз</strong>, даже если условие окажется ложным.</p><h3 id="цикл-с-заданным-количеством-итерации-—-for" tabindex="-1"><a class="header-anchor" href="#цикл-с-заданным-количеством-итерации-—-for"><span>Цикл с заданным количеством итераций — <code>for</code></span></a></h3><p>Более сложный, но при этом самый распространённый цикл — цикл <code>for</code>.</p><p>Выглядит он так:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span>начало<span class="token punctuation">;</span> условие<span class="token punctuation">;</span> шаг<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// тело цикла</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>То есть, <code>начало</code> выполняется один раз, а затем каждая итерация заключается в проверке <code>условия</code>, после которой выполняется <code>тело</code> и <code>шаг</code>.</p><blockquote><p>[!INFO]<br><strong>Пример для понимания</strong></p><p>На тренировке нам во что бы то ни стало нужно выполнить упражнение, состоящее из четко заданного числа повторений, например 20 отжиманий. При этом не имеет значения, будем ли мы считать от 0 до 20 (<em>инкрементировать значение итератора</em>) или же от 20 до 0 (<em>декрементировать значение итератора</em>), количество шагов при этом не изменится.</p></blockquote><p>Цикл ниже выполняет <code>console.log(i)</code> для <code>i</code> от <code>0</code> до (но не включая) <code>3</code>:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// выведет 0, затем 1, затем 2</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Здесь переменная счётчика <code>i</code> (итератор) была объявлена прямо в цикле. Это так называемое <em>«встроенное»</em> объявление переменной. Такие переменные существуют только внутри цикла.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0, 1, 2</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ошибка, нет такой переменной</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Вместо объявления новой переменной мы можем использовать уже существующую:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// используем существующую переменную</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0, 1, 2</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3, переменная доступна, т.к. была объявлена снаружи цикла</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>[!INFO]<br> Такое поведение принято называть областью видимости переменной. Мы поговорим об этом подробнее когда будем изучать функции, а пока просто будем иметь ввиду такую особенность.</p></blockquote><h3 id="прерывание-цикла-—-break" tabindex="-1"><a class="header-anchor" href="#прерывание-цикла-—-break"><span>Прерывание цикла — <code>break</code></span></a></h3><p>Обычно цикл завершается автоматически как только вычисляемое значение его условия становится <code>false</code>.</p><p>Но мы можем выйти из цикла в любой момент с помощью специальной директивы <code>break</code>.</p><p>Например, следующий код подсчитывает сумму вводимых чисел до тех пор, пока посетитель их вводит, а затем — выдаёт:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token operator">+</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">&quot;Введите число&quot;</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>value<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  sum <span class="token operator">+=</span> value<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">&#39;Сумма: &#39;</span> <span class="token operator">+</span> sum <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Директива <code>break</code> полностью прекращает выполнение цикла и передаёт управление на строку за его телом, то есть на <code>alert</code>.</p><p>Вообще, сочетание «бесконечного цикла с директивой break» — отличная штука для тех ситуаций, когда условие, по которому нужно прерваться, находится не в начале или конце цикла, а посередине или даже в нескольких местах его тела, либо может произойти динамически в любой момент в процессе его выполнения.</p><blockquote><p>[!INFO]<br> Обычно именно таким образом в компьютерных играх проверяется жив ли персонаж игрока, постоянно проверяя значение его <em>очков здоровья</em> в рамках т.н. <em>игрового цикла</em>, то есть каждого минимального такта расчета состояния игровой сцены.</p></blockquote><h3 id="переход-к-следующеи-итерации-—-continue" tabindex="-1"><a class="header-anchor" href="#переход-к-следующеи-итерации-—-continue"><span>Переход к следующей итерации — <code>continue</code></span></a></h3><p>Директива <code>continue</code> — «облегчённая версия» <code>break</code>. При её выполнении цикл не прерывается, а переходит к следующей итерации (если условие все ещё равно <code>true</code>).</p><p>Её используют, если понятно, что на текущем повторе цикла делать больше нечего.</p><p>Например, цикл ниже использует <code>continue</code>, чтобы выводить только нечётные значения:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// если true, пропустить оставшуюся часть тела цикла</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1, затем 3, 5, 7, 9</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Для чётных значений <code>i</code>, директива <code>continue</code> прекращает выполнение тела цикла и передаёт управление на следующую итерацию <code>for</code> (со следующим числом). Таким образом <code>console.log</code> вызывается только для нечётных значений.</p><h3 id="вложенные-циклы" tabindex="-1"><a class="header-anchor" href="#вложенные-циклы"><span>Вложенные циклы</span></a></h3><p>Практически, довольно часто возникает необходимость использования т.н. <strong>вложенных циклов</strong>, то есть синтаксических конструкций в рамках которых на каждой итерации одного цикла выполняется некоторое количество итераций другого.</p><p>В рамках некоторого простого &quot;бытового&quot; примера можно представить ситуацию когда необходимо снять колеса на автомобиле, при этом чтобы заменить все <code>4</code> колеса, необходимо для каждого открутить <code>5</code> крепежных болтов.</p><p>На языке JavaScript подобная задача могла бы выглядеть так:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Откручиваем </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-е колесо</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Откручиваем </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>j<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-й крепежный болт </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-го колеса</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Фух, вроде все открутили...</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="перебор-элементов-массивов" tabindex="-1"><a class="header-anchor" href="#перебор-элементов-массивов"><span>Перебор элементов массивов</span></a></h3><p>Одним из самых старых способов перебора элементов массива является цикл <code>for</code> по цифровым индексам:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;Яблоко&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Апельсин&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Груша&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Но для массивов возможен и другой вариант цикла, <code>for..of</code>:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">let</span> fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;Яблоко&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Апельсин&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Слива&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// проходит по значениям</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> fruit <span class="token keyword">of</span> fruits<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> fruit <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Цикл <code>for..of</code> не предоставляет доступа к номеру текущего элемента, только к его значению, но в большинстве случаев этого достаточно. А также это короче.</p><h2 id="что-почитать-по-теме" tabindex="-1"><a class="header-anchor" href="#что-почитать-по-теме"><span>Что почитать по теме</span></a></h2><ul><li><a href="https://learn.javascript.ru/array" target="_blank" rel="noopener noreferrer">Современный учебник JavaScript - Массивы</a></li><li><a href="https://learn.javascript.ru/array-methods" target="_blank" rel="noopener noreferrer">Современный учебник JavaScript - Методы массивов</a></li><li><a href="https://learn.javascript.ru/object" target="_blank" rel="noopener noreferrer">Современный учебник JavaScript - Объекты</a></li><li><a href="https://learn.javascript.ru/while-for" target="_blank" rel="noopener noreferrer">Современный учебник JavaScript - Циклы while и for</a></li><li><a href="https://www.w3schools.com/js/js_arrays.asp" target="_blank" rel="noopener noreferrer">W3Schools - JavaScript Arrays</a></li><li><a href="https://www.w3schools.com/js/js_array_methods.asp" target="_blank" rel="noopener noreferrer">W3Schools - JavaScript Array Methods</a></li><li><a href="https://www.w3schools.com/js/js_objects.asp" target="_blank" rel="noopener noreferrer">W3Schools - JavaScript Objects</a></li><li><a href="https://www.w3schools.com/js/js_loop_for.asp" target="_blank" rel="noopener noreferrer">W3Schools - JavaScript For Loop</a></li><li><a href="https://www.w3schools.com/js/js_loop_while.asp" target="_blank" rel="noopener noreferrer">W3Schools - JavaScript While Loop</a></li><li><a href="https://www.w3schools.com/js/js_iterables.asp" target="_blank" rel="noopener noreferrer">W3Schools - JavaScript Iterables</a></li></ul>`,133))])}const m=p(r,[["render",d]]),b=JSON.parse('{"path":"/disciplines/op04/op04_11.html","title":"ОП.04 - 11 - Массивы и объекты. Циклы и их виды","lang":"ru-RU","frontmatter":{"description":"Примечание ЭТО АРХИВНАЯ ВЕРСИЯ КУРСА! Материалы предназначаются для пересдающих дисциплину \\"ОП.04 - Основы алгоритмизации и программирования\\" в соответствии с учебными планами С...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ОП.04 - 11 - Массивы и объекты. Циклы и их виды\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-10-31T12:29:12.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://it.vshp.online/disciplines/op04/op04_11.html"}],["meta",{"property":"og:site_name","content":"Кафедра ИТ"}],["meta",{"property":"og:title","content":"ОП.04 - 11 - Массивы и объекты. Циклы и их виды"}],["meta",{"property":"og:description","content":"Примечание ЭТО АРХИВНАЯ ВЕРСИЯ КУРСА! Материалы предназначаются для пересдающих дисциплину \\"ОП.04 - Основы алгоритмизации и программирования\\" в соответствии с учебными планами С..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ru-RU"}],["meta",{"property":"og:updated_time","content":"2025-10-31T12:29:12.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-31T12:29:12.000Z"}]]},"git":{"updatedTime":1761913752000,"contributors":[{"name":"PAVEL TKACHEV","username":"","email":"phoenixweiss@ya.ru","commits":1}],"changelog":[{"hash":"a771585bc5911f4a729d06794a6706536be6cc56","time":1761913752000,"email":"phoenixweiss@ya.ru","author":"PAVEL TKACHEV","message":"Update <a href=\\"http://index.md\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">index.md</a>, abacus.png, ada_lawlace.png, and 105 more files"}]},"autoDesc":true,"filePathRelative":"disciplines/op04/op04_11.md"}');export{m as comp,b as data};
