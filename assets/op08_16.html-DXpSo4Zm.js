import{_ as p,c as l,b as n,a as o,e as a,d as t,w as c,r as i,o as d}from"./app-CRAEKUA-.js";const r={},u={class:"hint-container warning"};function k(m,s){const e=i("RouteLink");return d(),l("div",null,[n("div",u,[s[5]||(s[5]=n("p",{class:"hint-container-title"},"Примечание",-1)),s[6]||(s[6]=n("p",null,[n("strong",null,"ЭТО АРХИВНАЯ ВЕРСИЯ КУРСА!")],-1)),n("p",null,[s[1]||(s[1]=a('Материалы предназначаются для пересдающих дисциплину "ОП.08 - Основы проектирования баз данных" в соответствии с учебными планами СПО годов набора ',-1)),s[2]||(s[2]=n("strong",null,"ДО 2024-го",-1)),s[3]||(s[3]=a('. Для того чтобы ознакомиться с актуальным курсом "ИТ.03 - Основы проектирования баз данных" включающим интерактивные примеры, ',-1)),t(e,{to:"/disciplines/it03/"},{default:c(()=>[...s[0]||(s[0]=[a("перейдите по ссылке",-1)])]),_:1}),s[4]||(s[4]=a(".",-1))]),s[7]||(s[7]=n("p",null,"Материалы были перенесены со старого сайта с минимальной доработкой, поэтому не все возможности курса могут работать как ожидается, где-то может слететь форматирование.",-1)),s[8]||(s[8]=n("p",null,[n("strong",null,"Домашние задания в рамках курса проверяться не будут!")],-1))]),s[9]||(s[9]=o(`<h1 id="оп-08-16-разнесение-данных-из-однои-таблицы-конструкция-insert-into-select" tabindex="-1"><a class="header-anchor" href="#оп-08-16-разнесение-данных-из-однои-таблицы-конструкция-insert-into-select"><span>ОП.08 - 16 - Разнесение данных из одной таблицы. Конструкция <code>INSERT INTO SELECT</code></span></a></h1><p>Примеры данной темы используют учебную БД:</p><details><summary><b>car_dealership.sql</b></summary><p><a href="./includes/car_dealership.sql" title=":include">car_dealership.sql</a></p></details><h2 id="разнесение-данных-из-однои-таблицы" tabindex="-1"><a class="header-anchor" href="#разнесение-данных-из-однои-таблицы"><span>Разнесение данных из одной таблицы</span></a></h2><p>Одной из важных задач при работе с базами данных является разнесение данных из одной таблицы в несколько. Это может быть необходимо, например, для удобства анализа данных или для более эффективного хранения информации. Разнесение таблиц в БД из одной таблицы по разным таблицам позволяет улучшить организацию данных и повысить производительность системы.</p><p>Например, если рассматривать базу данных для автосалона, то в ней могут быть таблицы с информацией о клиентах, автомобилях, продажах и т.д. Если все данные будут храниться в одной таблице, то при выполнении запросов на выборку данных может возникнуть большая нагрузка на систему, что приведет к замедлению работы.</p><p>Разнесение таблиц по разным таблицам позволяет разделить данные на логически связанные группы и оптимизировать запросы к БД. Например, таблица с информацией о клиентах может содержать поля с их персональными данными, а таблица с информацией об автомобилях — поля с характеристиками автомобилей. Таким образом, при выполнении запроса на выборку информации о конкретном автомобиле не придется сканировать всю таблицу с информацией о клиентах.</p><p>Также разнесение таблиц позволяет упростить работу с данными и обеспечить их целостность. Если все данные будут храниться в одной таблице, то при изменении или удалении какой-либо записи может возникнуть проблема с целостностью данных. Разнесение таблиц позволяет избежать таких проблем и обеспечить более удобную работу с данными.</p><p>Для выполнения данной задачи в MySQL 8 используется конструкция <code>INSERT INTO SELECT</code>, которая имеет следующий синтаксис:</p><p>Скопировать все столбцы из одной таблицы в другую таблицу:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> table_new</span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> table_old</span>
<span class="line"><span class="token keyword">WHERE</span> condition<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Скопировать только некоторые столбцы из одной таблицы в другую таблицу:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> table_new <span class="token punctuation">(</span>column1<span class="token punctuation">,</span> column2<span class="token punctuation">,</span> column3<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2<span class="token punctuation">,</span> column3<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line"><span class="token keyword">FROM</span> table_old</span>
<span class="line"><span class="token keyword">WHERE</span> condition<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Рассмотрим несколько примеров.</p><h2 id="примеры-использования-конструкции-insert-into-select" tabindex="-1"><a class="header-anchor" href="#примеры-использования-конструкции-insert-into-select"><span>Примеры использования конструкции <code>INSERT INTO SELECT</code></span></a></h2><blockquote><p>[!INFO]<br> В данных примерах мы намеренно пренебрегаем предварительной организацией структуры связей создаваемых таблиц, т.к. это будет раскрыто подробнее в рамках отдельной темы. Здесь и далее, связи между создаваемыми таблицами отсутствуют, но подразумеваются.</p></blockquote><h3 id="пример-1-создание-таблицы-брендов-и-вынесение-брендов-в-отдельную-таблицу" tabindex="-1"><a class="header-anchor" href="#пример-1-создание-таблицы-брендов-и-вынесение-брендов-в-отдельную-таблицу"><span>Пример 1. Создание таблицы брендов и вынесение брендов в отдельную таблицу</span></a></h3><p>Допустим, у нас есть таблица <code>tmp</code> с информацией о продажах автомобилей разных брендов. Мы хотим вынести уникальные значения брендов в отдельную таблицу <code>brands</code>.</p><p>Для этого создадим таблицу <code>brands</code> и выполним следующий запрос:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> brands <span class="token punctuation">(</span></span>
<span class="line">  id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span></span>
<span class="line">  name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>После чего заполним таблицу значениями из <code>tmp</code>:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> brands<span class="token punctuation">(</span>name<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> brand</span>
<span class="line"><span class="token keyword">FROM</span> tmp<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>При этом помним что нам нужны только уникальные значения, поэтому используем модификатор <code>DISTINCT</code>.</p><p>В результате выполнения запроса мы получим таблицу <code>brands</code> с уникальными значениями брендов.</p><h3 id="пример-2-создание-таблицы-моделеи-и-вынесение-моделеи-в-отдельную-таблицу" tabindex="-1"><a class="header-anchor" href="#пример-2-создание-таблицы-моделеи-и-вынесение-моделеи-в-отдельную-таблицу"><span>Пример 2. Создание таблицы моделей и вынесение моделей в отдельную таблицу</span></a></h3><p>Подобным образом можно вынести уникальные значения моделей в отдельную таблицу <code>models</code>. Для этого создадим таблицу <code>models</code> и выполним следующий запрос:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> models <span class="token punctuation">(</span></span>
<span class="line">  id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span></span>
<span class="line">  name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>После чего заполним таблицу значениями из <code>tmp</code>:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> models<span class="token punctuation">(</span>name<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> model</span>
<span class="line"><span class="token keyword">FROM</span> tmp<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Здесь также нам нужны только уникальные значения, поэтому используем модификатор <code>DISTINCT</code>.</p><p>В результате выполнения запроса мы получим таблицу <code>models</code> с уникальными значениями моделей.</p><blockquote><p>[!INFO]<br> Конечно, учитывая что модели напрямую связаны с брендами, логичнее сразу учесть это при разборе данных, чему будет посвящена следующая тема, а в рамках данного примера мы рассмотрим как это сделать постфактум в конце лекции.</p></blockquote><h3 id="пример-3-создание-таблицы-характеристик-и-вынесение-характеристик-в-отдельную-таблицу" tabindex="-1"><a class="header-anchor" href="#пример-3-создание-таблицы-характеристик-и-вынесение-характеристик-в-отдельную-таблицу"><span>Пример 3. Создание таблицы характеристик и вынесение характеристик в отдельную таблицу</span></a></h3><p>Подобным образом можно вынести характеристики в отдельную таблицу <code>cars</code>. Для этого создадим таблицу <code>cars</code> и выполним следующий запрос:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> cars <span class="token punctuation">(</span></span>
<span class="line">  id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token keyword">year</span> <span class="token keyword">INT</span><span class="token punctuation">,</span></span>
<span class="line">  power <span class="token keyword">INT</span><span class="token punctuation">,</span></span>
<span class="line">  drivetrain <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  mileage <span class="token keyword">INT</span><span class="token punctuation">,</span></span>
<span class="line">  cost <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>После чего заполним таблицу значениями из <code>tmp</code>:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> cars<span class="token punctuation">(</span><span class="token keyword">year</span><span class="token punctuation">,</span>power<span class="token punctuation">,</span>drivetrain<span class="token punctuation">,</span>mileage<span class="token punctuation">,</span>cost<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token keyword">year</span><span class="token punctuation">,</span>power<span class="token punctuation">,</span>drivetrain<span class="token punctuation">,</span>mileage<span class="token punctuation">,</span>cost</span>
<span class="line"><span class="token keyword">FROM</span> tmp<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>В данном случае, наборы характеристик соответствуют КАЖДОМУ автомобилю, поэтому <code>DISTINCT</code> не используется.</p><p>В результате выполнения запроса мы получим таблицу <code>cars</code> со всеми значениями характеристик.</p><h3 id="пример-4-создание-таблицы-продаж-и-вынесение-продаж-в-отдельную-таблицу" tabindex="-1"><a class="header-anchor" href="#пример-4-создание-таблицы-продаж-и-вынесение-продаж-в-отдельную-таблицу"><span>Пример 4. Создание таблицы продаж и вынесение продаж в отдельную таблицу</span></a></h3><p>Ну и наконец, если мы хотим вынести данные о продажах в отдельную таблицу <code>sales</code>. Для этого создадим таблицу <code>sales</code> и выполним следующий запрос:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> sales <span class="token punctuation">(</span></span>
<span class="line">  id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span></span>
<span class="line">  sold_date <span class="token keyword">DATE</span><span class="token punctuation">,</span></span>
<span class="line">  client_name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>После чего заполним таблицу значениями из <code>tmp</code>:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> sales<span class="token punctuation">(</span>sold_date<span class="token punctuation">,</span>client_name<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">SELECT</span> sold_date<span class="token punctuation">,</span>client_name</span>
<span class="line"><span class="token keyword">FROM</span> tmp</span>
<span class="line"><span class="token keyword">WHERE</span> <span class="token punctuation">(</span>sold_date <span class="token operator">IS</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span> <span class="token operator">AND</span> <span class="token punctuation">(</span>client_name <span class="token operator">IS</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>В данном случае, с продажами всё несколько интереснее, т.к. не каждый автомобиль в автосалоне является проданным, но использовать <code>DISTINCT</code> мы не можем, т.к. даже если совпадет дата продажи и имя клиента, в реальность это могут быть две разные продажи, поэтому вместо <code>DISTINCT</code> мы используем условие.</p><p>В результате выполнения запроса мы получим таблицу <code>sales</code> с данными о продажах.</p><hr><p>Конструкция <code>INSERT INTO SELECT</code> позволяет эффективно разносить данные из одной таблицы в несколько, что может быть полезно при работе с большими объемами информации.</p><h2 id="подготовка-к-разбору-данных" tabindex="-1"><a class="header-anchor" href="#подготовка-к-разбору-данных"><span>Подготовка к разбору данных</span></a></h2><p>Для добавления связи между таблицами брендов и моделей через внешние ключи можно выполнить следующий запрос:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> models</span>
<span class="line"><span class="token keyword">ADD</span> <span class="token keyword">COLUMN</span> brand_id <span class="token keyword">INT</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token keyword">ADD</span> <span class="token keyword">CONSTRAINT</span> fk_brand</span>
<span class="line">  <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>brand_id<span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">REFERENCES</span> brands<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Этот запрос создаст внешний ключ <code>brand_id</code> в таблице <code>models</code>, который будет ссылаться на поле <code>id</code> в таблице <code>brands</code>.</p><blockquote><p>[!WARNING]<br> При работе в режиме &#39;Safe mode&#39; для обоих запросов, приведенных ниже, потребуется упомянуть в блоке <code>WHERE</code> первичный ключ обновляемой таблицы. То есть чтобы запросы сработали без отключения &#39;Safe mode&#39;, в конце обоих запросов после <code>SET</code> стоит добавить <code>WHERE models.id &gt; 0</code>.</p></blockquote><p>Далее, для обновления значений на основании данных из таблицы <code>tmp</code>, можно выполнить следующий запрос:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">UPDATE</span> models</span>
<span class="line"><span class="token keyword">SET</span> brand_id <span class="token operator">=</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token keyword">SELECT</span> id <span class="token keyword">FROM</span> brands</span>
<span class="line">    <span class="token keyword">WHERE</span> brands<span class="token punctuation">.</span>name <span class="token operator">IN</span> <span class="token punctuation">(</span></span>
<span class="line">        <span class="token keyword">SELECT</span> brand <span class="token keyword">FROM</span> tmp</span>
<span class="line">        <span class="token keyword">WHERE</span> tmp<span class="token punctuation">.</span>model <span class="token operator">=</span> models<span class="token punctuation">.</span>name</span>
<span class="line">    <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>В этом запросе внутренний подзапрос выбирает название бренда из таблицы <code>tmp</code> для каждой модели из таблицы <code>models</code>, а затем внешний подзапрос выбирает соответствующий <code>id</code> бренда из таблицы <code>brands</code>, а результат подзапроса присваивается полю <code>brand_id</code> в таблице <code>models</code>.</p><p>Но возможен и другой, намного более понятный и лаконичный вариант запроса, с использованием <code>JOIN</code>:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">UPDATE</span> models</span>
<span class="line"><span class="token keyword">JOIN</span> tmp <span class="token keyword">ON</span> models<span class="token punctuation">.</span>name <span class="token operator">=</span> tmp<span class="token punctuation">.</span>model</span>
<span class="line"><span class="token keyword">JOIN</span> brands <span class="token keyword">ON</span> tmp<span class="token punctuation">.</span>brand <span class="token operator">=</span> brands<span class="token punctuation">.</span>name</span>
<span class="line"><span class="token keyword">SET</span> models<span class="token punctuation">.</span>brand_id <span class="token operator">=</span> brands<span class="token punctuation">.</span>id<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Этот запрос обновит значения поля <code>brand_id</code> в таблице <code>models</code> на соответствующие значения из таблицы <code>brands</code> на основании данных из таблицы <code>tmp</code>.</p>`,59))])}const b=p(r,[["render",k]]),y=JSON.parse('{"path":"/disciplines/op08/op08_16.html","title":"ОП.08 - 16 - Разнесение данных из одной таблицы. Конструкция INSERT INTO SELECT","lang":"ru-RU","frontmatter":{"description":"Примечание ЭТО АРХИВНАЯ ВЕРСИЯ КУРСА! Материалы предназначаются для пересдающих дисциплину \\"ОП.08 - Основы проектирования баз данных\\" в соответствии с учебными планами СПО годов...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ОП.08 - 16 - Разнесение данных из одной таблицы. Конструкция INSERT INTO SELECT\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-10-31T12:29:12.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://it.vshp.online/disciplines/op08/op08_16.html"}],["meta",{"property":"og:site_name","content":"Кафедра ИТ"}],["meta",{"property":"og:title","content":"ОП.08 - 16 - Разнесение данных из одной таблицы. Конструкция INSERT INTO SELECT"}],["meta",{"property":"og:description","content":"Примечание ЭТО АРХИВНАЯ ВЕРСИЯ КУРСА! Материалы предназначаются для пересдающих дисциплину \\"ОП.08 - Основы проектирования баз данных\\" в соответствии с учебными планами СПО годов..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ru-RU"}],["meta",{"property":"og:updated_time","content":"2025-10-31T12:29:12.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-31T12:29:12.000Z"}]]},"git":{"updatedTime":1761913752000,"contributors":[{"name":"PAVEL TKACHEV","username":"","email":"phoenixweiss@ya.ru","commits":1}],"changelog":[{"hash":"a771585bc5911f4a729d06794a6706536be6cc56","time":1761913752000,"email":"phoenixweiss@ya.ru","author":"PAVEL TKACHEV","message":"Update <a href=\\"http://index.md\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">index.md</a>, abacus.png, ada_lawlace.png, and 105 more files"}]},"autoDesc":true,"filePathRelative":"disciplines/op08/op08_16.md"}');export{b as comp,y as data};
