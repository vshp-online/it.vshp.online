import{_ as t,c as i,a as e,o as n}from"./app-WP8x9dhC.js";const c={};function s(o,a){return n(),i("div",null,[...a[0]||(a[0]=[e('<h1 id="_04-алгоритмы-сортировки" tabindex="-1"><a class="header-anchor" href="#_04-алгоритмы-сортировки"><span>04 - Алгоритмы сортировки</span></a></h1><h2 id="сортировка-пузырьком" tabindex="-1"><a class="header-anchor" href="#сортировка-пузырьком"><span>Сортировка пузырьком</span></a></h2><figure><img src="https://yastatic.net/s3/academy/admin/1_49e0bb0f63.gif" alt=" | block" tabindex="0" loading="lazy"><figcaption> | block</figcaption></figure><p>Сортировка пузырьком — один из самых известных алгоритмов сортировки. Здесь нужно последовательно сравнивать значения соседних элементов и менять числа местами, если предыдущее оказывается больше последующего. Таким образом элементы с большими значениями оказываются в конце списка, а с меньшими остаются в начале.</p><p>Этот алгоритм считается учебным и почти не применяется на практике из-за низкой эффективности: он медленно работает на тестах, в которых маленькие элементы (их называют «черепахами») стоят в конце массива. Однако на нём основаны многие другие методы, например, шейкерная сортировка и сортировка расчёской.</p><figure><img src="https://yastatic.net/s3/academy/admin/184_2_fefe14fc80.png" alt=" | block" tabindex="0" loading="lazy"><figcaption> | block</figcaption></figure><h2 id="сортировка-перемешиванием-шеикерная-сортировка" tabindex="-1"><a class="header-anchor" href="#сортировка-перемешиванием-шеикерная-сортировка"><span>Сортировка перемешиванием (шейкерная сортировка)</span></a></h2><figure><img src="https://yastatic.net/s3/academy/img/2.gif" alt=" | block" tabindex="0" loading="lazy"><figcaption> | block</figcaption></figure><p>Шейкерная сортировка отличается от пузырьковой тем, что она двунаправленная: алгоритм перемещается не строго слева направо, а сначала слева направо, затем справа налево.</p><figure><img src="https://yastatic.net/s3/academy/admin/184_4_009e08fefe.png" alt=" | block" tabindex="0" loading="lazy"><figcaption> | block</figcaption></figure><h2 id="сортировка-расческои" tabindex="-1"><a class="header-anchor" href="#сортировка-расческои"><span>Сортировка расчёской</span></a></h2><figure><img src="https://yastatic.net/s3/academy/admin/184_5_bd5ab42310.gif" alt=" | block" tabindex="0" loading="lazy"><figcaption> | block</figcaption></figure><p>Сортировка расчёской — улучшение сортировки пузырьком. Её идея состоит в том, чтобы «устранить» элементы с небольшими значения в конце массива, которые замедляют работу алгоритма. Если при пузырьковой и шейкерной сортировках при переборе массива сравниваются соседние элементы, то при «расчёсывании» сначала берётся достаточно большое расстояние между сравниваемыми значениями, а потом оно сужается вплоть до минимального.</p><p>Первоначальный разрыв нужно выбирать не случайным образом, а с учётом специальной величины — фактора уменьшения, оптимальное значение которого равно 1,247. Сначала расстояние между элементами будет равняться размеру массива, поделённому на 1,247; на каждом последующем шаге расстояние будет снова делиться на фактор уменьшения — и так до окончания работы алгоритма.</p><figure><img src="https://yastatic.net/s3/academy/admin/184_6_9082481200.png" alt=" | block" tabindex="0" loading="lazy"><figcaption> | block</figcaption></figure><h2 id="сортировка-вставками" tabindex="-1"><a class="header-anchor" href="#сортировка-вставками"><span>Сортировка вставками</span></a></h2><figure><img src="https://yastatic.net/s3/academy/admin/184_7_a71e9fe3fb.gif" alt=" | block" tabindex="0" loading="lazy"><figcaption> | block</figcaption></figure><p>При сортировке вставками массив постепенно перебирается слева направо. При этом каждый последующий элемент размещается так, чтобы он оказался между ближайшими элементами с минимальным и максимальным значением.</p><figure><img src="https://yastatic.net/s3/academy/admin/184_8_bf1f6b302b.png" alt=" | block" tabindex="0" loading="lazy"><figcaption> | block</figcaption></figure><h2 id="сортировка-выбором" tabindex="-1"><a class="header-anchor" href="#сортировка-выбором"><span>Сортировка выбором</span></a></h2><figure><img src="https://yastatic.net/s3/academy/admin/184_9_b67b9a57f4.gif" alt=" | block" tabindex="0" loading="lazy"><figcaption> | block</figcaption></figure><p>Сначала нужно рассмотреть подмножество массива и найти в нём максимум (или минимум). Затем выбранное значение меняют местами со значением первого неотсортированного элемента. Этот шаг нужно повторять до тех пор, пока в массиве не закончатся неотсортированные подмассивы.</p><figure><img src="https://yastatic.net/s3/academy/admin/184_10_b1a40207ae.png" alt=" | block" tabindex="0" loading="lazy"><figcaption> | block</figcaption></figure><h2 id="быстрая-сортировка" tabindex="-1"><a class="header-anchor" href="#быстрая-сортировка"><span>Быстрая сортировка</span></a></h2><figure><img src="https://yastatic.net/s3/academy/admin/184_11_3c7583c6cd.gif" alt=" | block" tabindex="0" loading="lazy"><figcaption> | block</figcaption></figure><p>Этот алгоритм состоит из трёх шагов. Сначала из массива нужно выбрать один элемент — его обычно называют опорным. Затем другие элементы в массиве перераспределяют так, чтобы элементы меньше опорного оказались до него, а большие или равные — после. А дальше рекурсивно применяют первые два шага к подмассивам справа и слева от опорного значения.</p><p>Быструю сортировку изобрели в 1960 году для машинного перевода: тогда словари хранились на магнитных лентах, а сортировка слов обрабатываемого текста позволяла получить переводы за один прогон ленты, без перемотки назад.</p><figure><img src="https://yastatic.net/s3/academy/admin/184_12_f91ff3fc7b.png" alt=" | block" tabindex="0" loading="lazy"><figcaption> | block</figcaption></figure><h2 id="сортировка-слиянием" tabindex="-1"><a class="header-anchor" href="#сортировка-слиянием"><span>Сортировка слиянием</span></a></h2><figure><img src="https://yastatic.net/s3/academy/admin/184_13_2ce8dc5e4e.gif" alt=" | block" tabindex="0" loading="lazy"><figcaption> | block</figcaption></figure><p>Сортировка слиянием пригодится для таких структур данных, в которых доступ к элементам осуществляется последовательно (например, для потоков). Здесь массив разбивается на две примерно равные части и каждая из них сортируется по отдельности. Затем два отсортированных подмассива сливаются в один.</p><figure><img src="https://yastatic.net/s3/academy/admin/184_14_fa7d212723.png" alt=" | block" tabindex="0" loading="lazy"><figcaption> | block</figcaption></figure><h2 id="пирамидальная-сортировка" tabindex="-1"><a class="header-anchor" href="#пирамидальная-сортировка"><span>Пирамидальная сортировка</span></a></h2><figure><img src="https://yastatic.net/s3/academy/admin/184_15_8cb63771df.gif" alt=" | block" tabindex="0" loading="lazy"><figcaption> | block</figcaption></figure><p>При этой сортировке сначала строится пирамида из элементов исходного массива. Пирамида (или двоичная куча) — это способ представления элементов, при котором от каждого узла может отходить не больше двух ответвлений. А значение в родительском узле должно быть больше значений в его двух дочерних узлах.</p><figure><img src="https://yastatic.net/s3/academy/admin/184_16_22f343561d.gif" alt=" | block" tabindex="0" loading="lazy"><figcaption> | block</figcaption></figure><p>Пирамидальная сортировка похожа на сортировку выбором, где мы сначала ищем максимальный элемент, а затем помещаем его в конец. Дальше нужно рекурсивно повторять ту же операцию для оставшихся элементов.</p><figure><img src="https://yastatic.net/s3/academy/admin/184_17_f7c3860fbc.png" alt=" | block" tabindex="0" loading="lazy"><figcaption> | block</figcaption></figure><h2 id="поразрядная-сортировка" tabindex="-1"><a class="header-anchor" href="#поразрядная-сортировка"><span>Поразрядная сортировка</span></a></h2><p>Поразрядная сортировка (Radix sort) — сортировка по разрядам. Существует две разновидности: LSD (least significant digit) и MSD (most significant digit). В первом случае происходит сортировка элементов по младшим разрядам (все оканчивающиеся на 0, затем на 1 и так до 9). После этого они группируются по следующему с конца разряду, пока они не закончатся. В MSD сортировка происходит по старшему разряду.</p><figure><img src="https://media.proglib.io/wp-uploads/-000//1/596b7234d2019_AXiQeN1.gif" alt=" | block" tabindex="0" loading="lazy"><figcaption> | block</figcaption></figure><h3 id="почитать-по-теме" tabindex="-1"><a class="header-anchor" href="#почитать-по-теме"><span>Почитать по теме</span></a></h3><ul><li><a href="https://visualgo.net/en/sorting" target="_blank" rel="noopener noreferrer">Визуальное представление алгоритмов сортировки</a></li><li><a href="https://academy.yandex.ru/journal/osnovnye-vidy-sortirovok-i-primery-ikh-realizatsii" target="_blank" rel="noopener noreferrer">Основные виды сортировок и примеры их реализации</a></li><li><a href="https://www.toptal.com/developers/sorting-algorithms" target="_blank" rel="noopener noreferrer">Sorting Algorithms Animations</a></li></ul>',43)])])}const r=t(c,[["render",s]]),d=JSON.parse('{"path":"/disciplines/up02/lectures/04_sort.html","title":"04 - Алгоритмы сортировки","lang":"ru-RU","frontmatter":{"description":"04 - Алгоритмы сортировки Сортировка пузырьком | block | block Сортировка пузырьком — один из самых известных алгоритмов сортировки. Здесь нужно последовательно сравнивать значе...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"04 - Алгоритмы сортировки\\",\\"image\\":[\\"https://yastatic.net/s3/academy/admin/1_49e0bb0f63.gif\\",\\"https://yastatic.net/s3/academy/admin/184_2_fefe14fc80.png\\",\\"https://yastatic.net/s3/academy/img/2.gif\\",\\"https://yastatic.net/s3/academy/admin/184_4_009e08fefe.png\\",\\"https://yastatic.net/s3/academy/admin/184_5_bd5ab42310.gif\\",\\"https://yastatic.net/s3/academy/admin/184_6_9082481200.png\\",\\"https://yastatic.net/s3/academy/admin/184_7_a71e9fe3fb.gif\\",\\"https://yastatic.net/s3/academy/admin/184_8_bf1f6b302b.png\\",\\"https://yastatic.net/s3/academy/admin/184_9_b67b9a57f4.gif\\",\\"https://yastatic.net/s3/academy/admin/184_10_b1a40207ae.png\\",\\"https://yastatic.net/s3/academy/admin/184_11_3c7583c6cd.gif\\",\\"https://yastatic.net/s3/academy/admin/184_12_f91ff3fc7b.png\\",\\"https://yastatic.net/s3/academy/admin/184_13_2ce8dc5e4e.gif\\",\\"https://yastatic.net/s3/academy/admin/184_14_fa7d212723.png\\",\\"https://yastatic.net/s3/academy/admin/184_15_8cb63771df.gif\\",\\"https://yastatic.net/s3/academy/admin/184_16_22f343561d.gif\\",\\"https://yastatic.net/s3/academy/admin/184_17_f7c3860fbc.png\\",\\"https://media.proglib.io/wp-uploads/-000//1/596b7234d2019_AXiQeN1.gif\\"],\\"dateModified\\":\\"2025-10-25T21:38:29.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://it.vshp.online/disciplines/up02/lectures/04_sort.html"}],["meta",{"property":"og:site_name","content":"Кафедра ИТ"}],["meta",{"property":"og:title","content":"04 - Алгоритмы сортировки"}],["meta",{"property":"og:description","content":"04 - Алгоритмы сортировки Сортировка пузырьком | block | block Сортировка пузырьком — один из самых известных алгоритмов сортировки. Здесь нужно последовательно сравнивать значе..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://yastatic.net/s3/academy/admin/1_49e0bb0f63.gif"}],["meta",{"property":"og:locale","content":"ru-RU"}],["meta",{"property":"og:updated_time","content":"2025-10-25T21:38:29.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-25T21:38:29.000Z"}]]},"git":{"updatedTime":1761428309000,"contributors":[{"name":"PAVEL TKACHEV","username":"","email":"phoenixweiss@ya.ru","commits":1}],"changelog":[{"hash":"546d926f390001aa37605e5810db963e64aceaad","time":1761428309000,"email":"phoenixweiss@ya.ru","author":"PAVEL TKACHEV","message":"Update <a href=\\"http://index.md\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">index.md</a>, <a href=\\"http://index.md\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">index.md</a>, 01_complexity.md, and 12 more files"}]},"autoDesc":true,"filePathRelative":"disciplines/up02/lectures/04_sort.md"}');export{r as comp,d as data};
