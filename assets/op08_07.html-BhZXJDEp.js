import{_ as l,c as p,b as a,a as t,e as n,d as o,w as i,r as c,o as d}from"./app-CdTySVJ0.js";const r={},u={class:"hint-container warning"};function k(m,s){const e=c("RouteLink");return d(),p("div",null,[a("div",u,[s[5]||(s[5]=a("p",{class:"hint-container-title"},"Примечание",-1)),s[6]||(s[6]=a("p",null,[a("strong",null,"ЭТО АРХИВНАЯ ВЕРСИЯ КУРСА!")],-1)),a("p",null,[s[1]||(s[1]=n('Материалы предназначаются для пересдающих дисциплину "ОП.08 - Основы проектирования баз данных" в соответствии с учебными планами СПО годов набора ',-1)),s[2]||(s[2]=a("strong",null,"ДО 2024-го",-1)),s[3]||(s[3]=n('. Для того чтобы ознакомиться с актуальным курсом "ИТ.03 - Основы проектирования баз данных" включающим интерактивные примеры, ',-1)),o(e,{to:"/disciplines/it03/"},{default:i(()=>[...s[0]||(s[0]=[n("перейдите по ссылке",-1)])]),_:1}),s[4]||(s[4]=n(".",-1))]),s[7]||(s[7]=a("p",null,"Материалы были перенесены со старого сайта с минимальной доработкой, поэтому не все возможности курса могут работать как ожидается, где-то может слететь форматирование.",-1)),s[8]||(s[8]=a("p",null,[a("strong",null,"Домашние задания в рамках курса проверяться не будут!")],-1))]),s[9]||(s[9]=t(`<h1 id="оп-08-07-оператор-like-сортировка-order-by-группировка-group-by-и-агрегатные-функции" tabindex="-1"><a class="header-anchor" href="#оп-08-07-оператор-like-сортировка-order-by-группировка-group-by-и-агрегатные-функции"><span>ОП.08 - 07 - Оператор <code>LIKE</code>. Сортировка <code>ORDER BY</code>. Группировка <code>GROUP BY</code> и агрегатные функции</span></a></h1><p>Примеры данной темы используют учебную БД:</p><details><summary><b>employees_01.sql</b></summary><p><a href="./includes/employees_01.sql">employees_01.sql</a></p></details><h2 id="оператор-like" tabindex="-1"><a class="header-anchor" href="#оператор-like"><span>Оператор <code>LIKE</code></span></a></h2><p>Оператор <code>LIKE</code> используется при условных запросах, когда мы хотим узнать соответствует ли строка определённому шаблону.</p><p>Например, у нас есть таблица <code>employees</code>, в которой у каждого сотрудника есть поле <code>email</code>. Допустим, мы хотим найти всех пользователей, чьи почтовые ящики находятся на домене компании <code>company</code>. Т.е. нужно отобрать только те записи, что отвечают условию:</p><ul><li>после символа <code>@</code> следует <code>company</code></li><li>после <code>company</code> следует символ «.» и далее любая последовательность символов (т.к. есть и другие доменные зоны кроме <code>ru</code>)</li></ul><p>Для таких нетривиальных поисков по строковым полям и нужен оператор <code>LIKE</code>.</p><p>Пример синтаксиса:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">WHERE</span> поле_таблицы <span class="token punctuation">[</span><span class="token operator">NOT</span><span class="token punctuation">]</span> <span class="token operator">LIKE</span> шаблон_строки<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Шаблон может включать следующие специальные символы:</p><table><thead><tr><th style="text-align:center;">Символ</th><th style="text-align:left;">Описание</th></tr></thead><tbody><tr><td style="text-align:center;"><code>%</code></td><td style="text-align:left;">Любая последовательность символов $ \\ge 0 $</td></tr><tr><td style="text-align:center;"><code>_</code></td><td style="text-align:left;">Любой единичный символ</td></tr></tbody></table><p>Так наш запрос может выглядеть следующим образом:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">SELECT</span> first_name<span class="token punctuation">,</span> last_name<span class="token punctuation">,</span> email <span class="token keyword">FROM</span> employees</span>
<span class="line"><span class="token keyword">WHERE</span> email <span class="token operator">LIKE</span> <span class="token string">&#39;%@company.%&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>[!TIP]<br> В MySQL по-умолчанию шаблоны не чувствительны к регистру</p></blockquote><h3 id="escape-символ" tabindex="-1"><a class="header-anchor" href="#escape-символ"><span><code>ESCAPE</code>-символ</span></a></h3><p><code>ESCAPE</code>-символ используется для экранирования специальных символов (<code>%</code>, <code>_</code>, <code>/</code>). В случае если вам нужно найти строки, содержащие их, вы можете использовать <code>ESCAPE</code>-символ.</p><p>Например, вы хотите получить информацию по бонусам к окладу в процентах:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">SELECT</span> first_name<span class="token punctuation">,</span> last_name<span class="token punctuation">,</span> bonus <span class="token keyword">FROM</span> employees</span>
<span class="line"><span class="token keyword">WHERE</span> bonus <span class="token operator">LIKE</span> <span class="token string">&#39;%!%%&#39;</span> <span class="token keyword">ESCAPE</span> <span class="token string">&#39;!&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Если бы мы не экранировали трафаретный символ, то в выборку попало бы всё.</p><h2 id="сортировка-order-by" tabindex="-1"><a class="header-anchor" href="#сортировка-order-by"><span>Сортировка <code>ORDER BY</code></span></a></h2><p>При выполнении запроса <code>SELECT</code>, строки по умолчанию возвращаются в неопределенном порядке. Фактический порядок строк в этом случае зависит от того порядка в котором данные попадали в базу. Для упорядочивания записей используется конструкция <code>ORDER BY</code>.</p><p>Общая структура запроса с оператором <code>ORDER BY</code>:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">SELECT</span> поля_таблиц <span class="token keyword">FROM</span> наименование_таблицы</span>
<span class="line"><span class="token keyword">WHERE</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line"><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> столбец_1 <span class="token punctuation">[</span><span class="token keyword">ASC</span> <span class="token operator">|</span> <span class="token keyword">DESC</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">,</span> столбец_n <span class="token punctuation">[</span><span class="token keyword">ASC</span> <span class="token operator">|</span> <span class="token keyword">DESC</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Где <code>ASC</code> и <code>DESC</code> - направление сортировки:</p><ul><li><code>ASC</code> - сортировка по возрастанию (по умолчанию)</li><li><code>DESC</code> - сортировка по убыванию</li></ul><p>Например, выведем всех сотрудников, отсортировав их по зарплате от наибольшей к наименьшей:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">SELECT</span> first_name<span class="token punctuation">,</span> last_name<span class="token punctuation">,</span> job_title<span class="token punctuation">,</span> salary <span class="token keyword">FROM</span> employees</span>
<span class="line"><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> salary <span class="token keyword">DESC</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="сортировка-по-нескольким-столбцам" tabindex="-1"><a class="header-anchor" href="#сортировка-по-нескольким-столбцам"><span>Сортировка по нескольким столбцам</span></a></h3><p>Для сортировки результатов по двум или более столбцам их следует указывать через запятую.</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> столбец_1 <span class="token punctuation">[</span><span class="token keyword">ASC</span> <span class="token operator">|</span> <span class="token keyword">DESC</span><span class="token punctuation">]</span><span class="token punctuation">,</span> столбец_2 <span class="token punctuation">[</span><span class="token keyword">ASC</span> <span class="token operator">|</span> <span class="token keyword">DESC</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Данные будут сортироваться по первому столбцу, но в случае если попадаются несколько записей с совпадающими значениями в первом столбце, то они сортируются по второму столбцу. Количество столбцов, по которым можно отсортировать не ограничено.</p><p>При этом стоит учесть что правило сортировки применяется только к тому столбцу, за которым оно следует.</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> столбец_1<span class="token punctuation">,</span> столбец_2 <span class="token keyword">DESC</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>не то же самое, что</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> столбец_1 <span class="token keyword">DESC</span><span class="token punctuation">,</span> столбец_2 <span class="token keyword">DESC</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Например, выведем всех сотрудников, отсортировав по алфавиту их сначала по фамилии а потом по имени:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">SELECT</span> last_name<span class="token punctuation">,</span> first_name <span class="token keyword">FROM</span> employees</span>
<span class="line"><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> last_name <span class="token keyword">ASC</span><span class="token punctuation">,</span> first_name <span class="token keyword">ASC</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="группировка-group-by-и-агрегатные-функции" tabindex="-1"><a class="header-anchor" href="#группировка-group-by-и-агрегатные-функции"><span>Группировка <code>GROUP BY</code> и агрегатные функции</span></a></h2><p>Что если мы хотим получить информацию не о каждой записи отдельно, а о группах, которые они образуют? Такими группами могут выступать любые данные, одинаковые для нескольких записей. Эти группы включают разные записи в таблице и, соответственно, обладают разными характеристиками, которые нам могут быть весьма полезны.</p><p>Общая структура запроса с <code>GROUP BY</code>:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">SELECT</span> <span class="token punctuation">[</span>поля_группировки<span class="token operator">|</span>агрегатные_функции<span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">FROM</span> имя_таблицы</span>
<span class="line"><span class="token keyword">GROUP</span> <span class="token keyword">BY</span> поля_группировки<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Для того, чтобы записи у нас образовали группы <code>GROUP BY</code> поле, по которому будет происходить группировка, например по полу:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">SELECT</span> gender</span>
<span class="line"><span class="token keyword">FROM</span> employees</span>
<span class="line"><span class="token keyword">GROUP</span> <span class="token keyword">BY</span> gender<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>На самом деле, такой же результат мы могли получить выполнив и простой запрос <code>SELECT</code> по полю <code>gender</code> с модификатором <code>DISTINCT</code>. Но при попытке добавить к запросу с группировкой какие-либо поля, скорее всего возникнет ошибка вида:</p><p><code>Error Code: 1055. Expression #2 of SELECT list is not in GROUP BY clause and contains nonaggregated column &#39;db.employees.gender&#39; which is not functionally dependent on columns in GROUP BY clause</code></p><p>Дело в том что при использовании оператора <code>GROUP BY</code> мы перешли от работы с отдельными записями на работу с образовавшимися группами. В связи с этим мы не можем просто вывести любое поле из записи (например, <code>job_title</code>), как мы это могли делать раньше. Так как в каждой группе может быть несколько записей и в каждой из них в этом поле может быть разное значение.</p><p>Поэтому, для того чтобы работать с группами, необходимо использовать особые функции.</p><h3 id="агрегатные-функции" tabindex="-1"><a class="header-anchor" href="#агрегатные-функции"><span>Агрегатные функции</span></a></h3><blockquote><p>Агрегатная функция – это функция, которая выполняет вычисление на наборе значений и возвращает одиночное значение.</p></blockquote><p>В разных СУБД существует довольно много разных агрегатных функций, но мы рассмотрим основные:</p><table><thead><tr><th style="text-align:left;">Функция</th><th style="text-align:left;">Описание</th></tr></thead><tbody><tr><td style="text-align:left;"><code>SUM(столбец)</code></td><td style="text-align:left;">Возвращает сумму значений</td></tr><tr><td style="text-align:left;"><code>AVG(столбец)</code></td><td style="text-align:left;">Возвращает среднее значение</td></tr><tr><td style="text-align:left;"><code>COUNT(столбец)</code></td><td style="text-align:left;">Возвращает количество записей</td></tr><tr><td style="text-align:left;"><code>MIN(столбец)</code></td><td style="text-align:left;">Возвращает минимальное значение</td></tr><tr><td style="text-align:left;"><code>MAX(столбец)</code></td><td style="text-align:left;">Возвращает максимальное значение</td></tr></tbody></table><p>Например, запрос с использованием агрегатной функции <code>AVG</code> для вычисления средней зарплаты для каждой из профессий может выглядеть так:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">SELECT</span> job_title<span class="token punctuation">,</span> <span class="token function">AVG</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">FROM</span> employees</span>
<span class="line"><span class="token keyword">GROUP</span> <span class="token keyword">BY</span> job_title<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Таким же образом можно найти максимальную зарплату по каждому полу</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">SELECT</span> gender<span class="token punctuation">,</span> <span class="token function">MAX</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">FROM</span> employees</span>
<span class="line"><span class="token keyword">GROUP</span> <span class="token keyword">BY</span> gender<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Или же посчитать количество мужчин и женщин:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">SELECT</span> gender<span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>gender<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">FROM</span> employees</span>
<span class="line"><span class="token keyword">GROUP</span> <span class="token keyword">BY</span> gender<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>[!TIP]<br> Агрегатные функции применяются для значений, не равных NULL. Исключением является функция <code>COUNT(*)</code>.</p></blockquote><p>Кроме того, агрегатные функции могут использоваться и без группировки, например если мы хотим посчитать общее количество сотрудников компании:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">FROM</span> employees<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>или сумму всех зарплат за месяц (Фонд Оплаты Труда, ФОТ):</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">SELECT</span> <span class="token function">SUM</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">FROM</span> employees<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="задания-для-самопроверки" tabindex="-1"><a class="header-anchor" href="#задания-для-самопроверки"><span>Задания для самопроверки</span></a></h2><h3 id="задание-1" tabindex="-1"><a class="header-anchor" href="#задание-1"><span>Задание 1</span></a></h3><p>Напишите запрос, который выберет все строки из таблицы <code>employees</code>, где фамилия пользователя начинается на букву <code>&quot;А&quot;</code>.</p><details><summary><b>ОТВЕТ</b></summary><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> last_name <span class="token operator">LIKE</span> <span class="token string">&#39;А%&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></details><h3 id="задание-2" tabindex="-1"><a class="header-anchor" href="#задание-2"><span>Задание 2</span></a></h3><p>Напишите запрос, который выберет все строки из таблицы <code>employees</code>, отсортированные по дате рождения в порядке убывания.</p><details><summary><b>ОТВЕТ</b></summary><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employees <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> birthday <span class="token keyword">DESC</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></details><h3 id="задание-3" tabindex="-1"><a class="header-anchor" href="#задание-3"><span>Задание 3</span></a></h3><p>Напишите запрос, который выберет среднюю зарплату сотрудника из таблицы <code>employees</code>.</p><details><summary><b>ОТВЕТ</b></summary><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">SELECT</span> <span class="token function">AVG</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">FROM</span> employees<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></details><h3 id="задание-4" tabindex="-1"><a class="header-anchor" href="#задание-4"><span>Задание 4</span></a></h3><p>Напишите запрос, который выберет все строки из таблицы <code>employees</code>, где должность содержит слово <code>&quot;программист&quot;</code>.</p><details><summary><b>ОТВЕТ</b></summary><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> job_title <span class="token operator">LIKE</span> <span class="token string">&#39;%программист%&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></details><h3 id="задание-5" tabindex="-1"><a class="header-anchor" href="#задание-5"><span>Задание 5</span></a></h3><p>Напишите запрос, который выберет количество сотрудников каждого пола из таблицы <code>employees</code>.</p><details><summary><b>ОТВЕТ</b></summary><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">SELECT</span> gender<span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> employees <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> gender<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></details><h3 id="задание-6" tabindex="-1"><a class="header-anchor" href="#задание-6"><span>Задание 6</span></a></h3><p>Напишите запрос, который выберет максимальную зарплату сотрудника из таблицы <code>employees</code>.</p><details><summary><b>ОТВЕТ</b></summary><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">SELECT</span> <span class="token function">MAX</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">FROM</span> employees<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></details><h3 id="задание-7" tabindex="-1"><a class="header-anchor" href="#задание-7"><span>Задание 7</span></a></h3><p>Напишите запрос, который выведет имя и фамилию сотрудника из таблицы <code>employees</code> с адресом электронной почты <code>&quot;v.ivanova@company.ru&quot;</code>.</p><details><summary><b>ОТВЕТ</b></summary><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">SELECT</span> first_name<span class="token punctuation">,</span> last_name <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> email <span class="token operator">=</span> <span class="token string">&#39;v.ivanova@company.ru&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></details><h3 id="задание-8" tabindex="-1"><a class="header-anchor" href="#задание-8"><span>Задание 8</span></a></h3><p>Напишите запрос, который выберет суммарную заплату всех сотрудников должности <code>&quot;программист&quot;</code> (не считая ведущего программиста!) из таблицы <code>employees</code>.</p><details><summary><b>ОТВЕТ</b></summary><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">SELECT</span> <span class="token function">SUM</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> job_title <span class="token operator">=</span> <span class="token string">&#39;программист&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></details><h3 id="задание-9" tabindex="-1"><a class="header-anchor" href="#задание-9"><span>Задание 9</span></a></h3><p>Напишите запрос, который выберет все должности сотрудников, состоящие более чем из одного слова (должность через дефис также считается таковой) из таблицы <code>employees</code>.</p><details><summary><b>ОТВЕТ</b></summary><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">SELECT</span> job_title <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> job_title <span class="token operator">LIKE</span> <span class="token string">&#39;% %&#39;</span> <span class="token operator">OR</span> job_title <span class="token operator">LIKE</span> <span class="token string">&#39;%-%&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></details>`,91))])}const g=l(r,[["render",k]]),h=JSON.parse('{"path":"/disciplines/op08/op08_07.html","title":"ОП.08 - 07 - Оператор LIKE. Сортировка ORDER BY. Группировка GROUP BY и агрегатные функции","lang":"ru-RU","frontmatter":{"description":"Примечание ЭТО АРХИВНАЯ ВЕРСИЯ КУРСА! Материалы предназначаются для пересдающих дисциплину \\"ОП.08 - Основы проектирования баз данных\\" в соответствии с учебными планами СПО годов...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ОП.08 - 07 - Оператор LIKE. Сортировка ORDER BY. Группировка GROUP BY и агрегатные функции\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-10-31T15:45:09.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://it.vshp.online/disciplines/op08/op08_07.html"}],["meta",{"property":"og:site_name","content":"Кафедра ИТ"}],["meta",{"property":"og:title","content":"ОП.08 - 07 - Оператор LIKE. Сортировка ORDER BY. Группировка GROUP BY и агрегатные функции"}],["meta",{"property":"og:description","content":"Примечание ЭТО АРХИВНАЯ ВЕРСИЯ КУРСА! Материалы предназначаются для пересдающих дисциплину \\"ОП.08 - Основы проектирования баз данных\\" в соответствии с учебными планами СПО годов..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ru-RU"}],["meta",{"property":"og:updated_time","content":"2025-10-31T15:45:09.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-31T15:45:09.000Z"}]]},"git":{"updatedTime":1761925509000,"contributors":[{"name":"PAVEL TKACHEV","username":"","email":"phoenixweiss@ya.ru","commits":2}],"changelog":[{"hash":"799f1f79d8c5d9f1b4401f594c1135b605f001ab","time":1761925509000,"email":"phoenixweiss@ya.ru","author":"PAVEL TKACHEV","message":"Update op04_08.md, op04_09.md, op04_10.md, and 24 more files"},{"hash":"a771585bc5911f4a729d06794a6706536be6cc56","time":1761913752000,"email":"phoenixweiss@ya.ru","author":"PAVEL TKACHEV","message":"Update <a href=\\"http://index.md\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">index.md</a>, abacus.png, ada_lawlace.png, and 105 more files"}]},"autoDesc":true,"filePathRelative":"disciplines/op08/op08_07.md"}');export{g as comp,h as data};
