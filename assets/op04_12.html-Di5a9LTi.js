import{_ as e,c as p,a as n,b as t,d as c,w as l,r as o,o as i,e as r}from"./app-CdTySVJ0.js";const u={};function d(m,s){const a=o("RouteLink");return i(),p("div",null,[s[1]||(s[1]=n('<div class="hint-container warning"><p class="hint-container-title">Примечание</p><p><strong>ЭТО АРХИВНАЯ ВЕРСИЯ КУРСА!</strong></p><p>Материалы предназначаются для пересдающих дисциплину &quot;ОП.04 - Основы алгоритмизации и программирования&quot; в соответствии с учебными планами СПО годов набора <strong>ДО 2023-го</strong>.</p><p>Материалы были перенесены со старого сайта с минимальной доработкой, поэтому не все возможности курса могут работать как ожидается, где-то может слететь форматирование.</p><p><strong>Домашние задания в рамках курса проверяться не будут!</strong></p></div><h1 id="оп-04-12-функции-и-аргументы-область-видимости-и-контекст-выполнения-понятие-рекурсии" tabindex="-1"><a class="header-anchor" href="#оп-04-12-функции-и-аргументы-область-видимости-и-контекст-выполнения-понятие-рекурсии"><span>ОП.04 - 12 - Функции и аргументы. Область видимости и контекст выполнения. Понятие рекурсии</span></a></h1>',2)),t("p",null,[c(a,{to:"/disciplines/op04/includes/_html_example.html"},{default:l(()=>[...s[0]||(s[0]=[r("Код примера для практической работы",-1)])]),_:1})]),s[2]||(s[2]=n(`<h2 id="функции-и-аргументы" tabindex="-1"><a class="header-anchor" href="#функции-и-аргументы"><span>Функции и аргументы</span></a></h2><p>Зачастую нам надо повторять одно и то же действие во многих частях программы. Например, необходимо красиво вывести сообщение при приветствии посетителя, при выходе посетителя с сайта, ещё где-нибудь. Чтобы не повторять один и тот же код во многих местах, придуманы функции.</p><blockquote><p><strong>Функция</strong> — фрагмент программного кода, к которому можно обратиться из другого места программы вызвав его. В большинстве случаев с функцией связывается идентификатор, но многие языки допускают и безымянные функции. Во многих источниках (особенно старых), функции называли также <em>подпрограммами</em>.</p></blockquote><p>Функции являются основными «строительными блоками» программы. Примеры встроенных функций вы уже видели — это <code>alert()</code>, <code>prompt()</code> и <code>confirm()</code>. Но можно создавать и свои.</p><p>Для создания функций мы можем использовать <em>объявление функции</em>.</p><p>Пример объявления функции:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">function</span> <span class="token function">имя</span><span class="token punctuation">(</span><span class="token parameter">параметры</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// код, также называемый &quot;телом функции&quot;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Как видно из примера, вначале идёт ключевое слово <code>function</code>, после него имя функции, затем список параметров (их еще называют аргументами, но некоторую разницу этих понятий мы еще затронем) в круглых скобках через запятую (он вполне может быть и пустым) и, наконец, код функции, также называемый «телом функции», внутри фигурных скобок.</p><blockquote><p>[!INFO]<br><strong>Пример для понимания</strong></p><p>В целях соблюдения личной гигиены, обычно утром и вечером нам необходимо из раза в раз выполнять одно и то же действие — чистить зубы. Это действие можно рассмотреть в качестве <em>функции</em>, для успешного выполнения которой нам необходимо два <em>аргумента</em> — зубная щетка и зубная паста. При этом значения аргументов (цвет щетки или вкус пасты) могут быть различны а в каких-то ситуациях даже отсутствовать.</p></blockquote><p>Давайте попробуем задать простую функцию, которая может выполняться без аргументов:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">function</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&#39;Привет, мир!&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Если запустить этот код, то ничего не произойдет, т.к. простого объявления функции явно недостаточно — её необходимо вызвать. Наша новая функция может быть вызвана по своему имени: <code>sayHi()</code>.</p><p>Например:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">function</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&#39;Привет, мир!&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&#39;Какое-то другое сообщение!&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Вызов <code>sayHi()</code> выполняет код функции. Здесь мы увидим сообщение дважды.</p><p>Этот пример явно демонстрирует одно из главных предназначений функций: <em>избавление от дублирования кода</em>.</p><p>Если понадобится поменять сообщение или способ его вывода — достаточно изменить его в одном месте: в функции, которая его выводит.</p><h3 id="аргументы-и-параметры" tabindex="-1"><a class="header-anchor" href="#аргументы-и-параметры"><span>Аргументы и параметры</span></a></h3><p>Мы можем передать внутрь функции любую информацию, используя параметры.</p><p>В нижеприведённом примере функции передаются два параметра: <code>from</code> и <code>text</code>. Значение, передаваемое в качестве параметра функции, называется аргументом.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">function</span> <span class="token function">showMessage</span><span class="token punctuation">(</span><span class="token parameter">from<span class="token punctuation">,</span> text</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// параметры: from, text</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>from <span class="token operator">+</span> <span class="token string">&#39;: &#39;</span> <span class="token operator">+</span> text<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">showMessage</span><span class="token punctuation">(</span><span class="token string">&#39;Аня&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Привет!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Аня: Привет!</span></span>
<span class="line"><span class="token function">showMessage</span><span class="token punctuation">(</span><span class="token string">&#39;Вася&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;И тебе привет!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Вася: И тебе привет!</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Когда функция вызывается с соответствующими аргументами, переданные значения используются в теле функции.</p><blockquote><p>Другими словами:</p><ul><li><em>Параметр</em> — это переменная, указанная в круглых скобках в объявлении функции.</li><li><em>Аргумент</em> — это значение, которое передаётся функции при её вызове.</li></ul></blockquote><p>Мы объявляем функции со списком параметров, затем вызываем их, передавая аргументы.</p><p>Рассматривая приведённый выше пример, мы могли бы сказать, что функция <code>showMessage</code> объявляется с двумя параметрами, затем вызывается с двумя аргументами: <code>&#39;Аня&#39;</code> и <code>&#39;Привет!&#39;</code>.</p><h3 id="значения-по-умолчанию" tabindex="-1"><a class="header-anchor" href="#значения-по-умолчанию"><span>Значения по умолчанию</span></a></h3><p>Если при вызове функции аргумент не был указан, то его значением становится <code>undefined</code>.</p><p>Например, вышеупомянутая функция <code>showMessage(from, text)</code> может быть вызвана с одним аргументом:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token function">showMessage</span><span class="token punctuation">(</span><span class="token string">&quot;Аня&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Это не приведёт к ошибке. Такой вызов выведет <code>&quot;Аня: undefined&quot;</code>. В вызове не указан параметр <code>text</code>, поэтому предполагается, что <code>text === undefined</code>.</p><p>Если мы хотим задать параметру text значение по умолчанию, мы должны указать его после <code>=</code>:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">function</span> <span class="token function">showMessage</span><span class="token punctuation">(</span>from<span class="token punctuation">,</span> text <span class="token operator">=</span> <span class="token string">&quot;текст не добавлен&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> from <span class="token operator">+</span> <span class="token string">&quot;: &quot;</span> <span class="token operator">+</span> text <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">showMessage</span><span class="token punctuation">(</span><span class="token string">&quot;Аня&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Аня: текст не добавлен</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Теперь, если параметр <code>text</code> не указан, его значением будет <code>&quot;текст не добавлен&quot;</code>.</p><p>В данном случае <code>&quot;текст не добавлен&quot;</code> это строка, но на её месте могло бы быть и более сложное выражение, которое бы вычислялось и присваивалось при отсутствии параметра, даже другая функция.</p><h3 id="возврат-значения" tabindex="-1"><a class="header-anchor" href="#возврат-значения"><span>Возврат значения</span></a></h3><p>Функция может вернуть результат, который будет передан в вызвавший её код.</p><p>Простейшим примером может служить функция сложения двух чисел:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> result <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Директива <code>return</code> может находиться в любом месте тела функции. Как только выполнение доходит до этого места, функция останавливается, и значение возвращается в вызвавший её код (присваивается переменной <code>result</code> выше).</p><p>Вызовов <code>return</code> может быть несколько, например, в зависимости от условия:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">function</span> <span class="token function">checkAge</span><span class="token punctuation">(</span><span class="token parameter">age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">&gt;=</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">&#39;А родители разрешили?&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">&#39;Сколько вам лет?&#39;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">checkAge</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">&#39;Доступ получен&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">&#39;Доступ закрыт&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Возможно использовать <code>return</code> и без значения. Это приведёт к немедленному выходу из функции.</p><p>Например:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">function</span> <span class="token function">checkAge</span><span class="token punctuation">(</span><span class="token parameter">age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">&gt;=</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">&#39;А родители разрешили?&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">&#39;Сколько вам лет?&#39;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">showMovie</span><span class="token punctuation">(</span><span class="token parameter">age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">checkAge</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token comment">// не выполнится если checkAge(age) вернет false</span></span>
<span class="line">  <span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">&quot;Вам показывается кино&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>В коде выше, если <code>checkAge(age)</code> вернёт <code>false</code>, <code>showMovie</code> не выполнит <code>alert</code>.</p><h3 id="пустои-return-и-undefined" tabindex="-1"><a class="header-anchor" href="#пустои-return-и-undefined"><span>Пустой <code>return</code> и <code>undefined</code></span></a></h3><p>Результат функции с пустым <code>return</code> или без него — <code>undefined</code></p><p>Если функция не возвращает значения, это всё равно, как если бы она возвращала <code>undefined</code>:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">function</span> <span class="token function">doNothing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* пусто */</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token function">doNothing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Пустой <code>return</code> аналогичен <code>return undefined</code>:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">function</span> <span class="token function">doNothing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token function">doNothing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="перевод-строки-между-return-и-его-значением" tabindex="-1"><a class="header-anchor" href="#перевод-строки-между-return-и-его-значением"><span>Перевод строки между <code>return</code> и его значением</span></a></h3><p>Для длинного выражения в <code>return</code> может быть заманчиво разместить его на нескольких отдельных строках, например так:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">return</span></span>
<span class="line"> <span class="token punctuation">(</span>some <span class="token operator">+</span> long <span class="token operator">+</span> expression <span class="token operator">+</span> or <span class="token operator">+</span> whatever <span class="token operator">*</span> <span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">f</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Код не выполнится, потому что интерпретатор JavaScript подставит точку с запятой после <code>return</code>.</p><p>Для него это будет выглядеть так:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line"> <span class="token punctuation">(</span>some <span class="token operator">+</span> long <span class="token operator">+</span> expression <span class="token operator">+</span> or <span class="token operator">+</span> whatever <span class="token operator">*</span> <span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">f</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Таким образом, это фактически стало пустым <code>return</code>.</p><blockquote><p>[!DANGER]<br> Никогда не добавляйте перевод строки между <code>return</code> и его значением!</p></blockquote><p>Если мы хотим, чтобы возвращаемое выражение занимало несколько строк, нужно начать его на той же строке, что и <code>return</code>.</p><p>Или, хотя бы, поставить там открывающую скобку, вот так:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">  some <span class="token operator">+</span> long <span class="token operator">+</span> expression</span>
<span class="line">  <span class="token operator">+</span> or <span class="token operator">+</span></span>
<span class="line">  whatever <span class="token operator">*</span> <span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">f</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>И тогда всё сработает, как задумано.</p><h2 id="область-видимости-и-контекст-выполнения" tabindex="-1"><a class="header-anchor" href="#область-видимости-и-контекст-выполнения"><span>Область видимости и контекст выполнения</span></a></h2><blockquote><p><strong>Область видимости</strong> — часть программы, в пределах которой идентификатор, объявленный как имя некоторой программной сущности (обычно — переменной, типа данных или функции), остаётся связанным с этой сущностью, то есть позволяет посредством себя обратиться к ней.</p></blockquote><p>Говорят, что идентификатор объекта «виден» в определённом месте программы, если в данном месте по нему можно обратиться к данному объекту. За пределами области видимости тот же самый идентификатор может быть связан с другой переменной или функцией, либо быть свободным (не связанным ни с какой из них). Область видимости может, но не обязана совпадать с областью существования объекта, с которым связано имя.</p><blockquote><p><strong>Контекст выполнения</strong> — это концепция, описывающая окружение, в котором производится выполнение кода программы. Код всегда выполняется внутри некоего контекста, будь то вся программа, программный модуль, конкретная функция, цикл или какое-либо конкретное выражение.</p></blockquote><p>Как правило, контекст выполнения в программировании довольно тесно связан с областью видимости переменных и функций. Далее мы рассмотрим основные виды контекстов на примере области видимости переменных.</p><p>Для простоты, на данном этапе мы будем разделять только <em>глобальный</em> и <em>локальный</em> контексты, определяя их по области видимости переменных.</p><h3 id="локальные-переменные-локальныи-контекст" tabindex="-1"><a class="header-anchor" href="#локальные-переменные-локальныи-контекст"><span>Локальные переменные (локальный контекст)</span></a></h3><p>Переменные, объявленные внутри функции, видны только внутри этой функции.</p><p>Например:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">function</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> message <span class="token operator">=</span> <span class="token string">&#39;Привет, мир!&#39;</span><span class="token punctuation">;</span> <span class="token comment">// локальная переменная</span></span>
<span class="line"></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> message <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Привет, мир!</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> message <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &lt;-- будет ошибка, т.к. переменная видна только внутри функции</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="внешние-переменные-глобальныи-контекст" tabindex="-1"><a class="header-anchor" href="#внешние-переменные-глобальныи-контекст"><span>Внешние переменные (глобальный контекст)</span></a></h3><p>У функции есть доступ к внешним переменным, например:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">let</span> userName <span class="token operator">=</span> <span class="token string">&#39;Вася&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> message <span class="token operator">=</span> <span class="token string">&#39;Привет, &#39;</span> <span class="token operator">+</span> userName<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Привет, Вася</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Функция обладает полным доступом к внешним переменным и может изменять их значение.</p><p>Например:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">let</span> userName <span class="token operator">=</span> <span class="token string">&#39;Вася&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  userName <span class="token operator">=</span> <span class="token string">&quot;Петя&quot;</span><span class="token punctuation">;</span> <span class="token comment">// изменяем значение внешней переменной</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">let</span> message <span class="token operator">=</span> <span class="token string">&#39;Привет, &#39;</span> <span class="token operator">+</span> userName<span class="token punctuation">;</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> userName <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Вася перед вызовом функции</span></span>
<span class="line"></span>
<span class="line"><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> userName <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Петя, значение внешней переменной было изменено функцией</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Внешняя переменная используется, только если внутри функции нет такой же локальной.</p><p>Если одноимённая переменная объявляется внутри функции, тогда она перекрывает внешнюю. Например, в коде ниже функция использует локальную переменную <code>userName</code>. Внешняя будет проигнорирована:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">let</span> userName <span class="token operator">=</span> <span class="token string">&#39;Вася&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> userName <span class="token operator">=</span> <span class="token string">&quot;Петя&quot;</span><span class="token punctuation">;</span> <span class="token comment">// объявляем локальную переменную</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">let</span> message <span class="token operator">=</span> <span class="token string">&#39;Привет, &#39;</span> <span class="token operator">+</span> userName<span class="token punctuation">;</span> <span class="token comment">// Петя</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> userName <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Вася перед вызовом функции</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// функция создаст и будет использовать свою собственную локальную переменную userName</span></span>
<span class="line"><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> userName <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Вася, не изменилась, функция не трогала внешнюю переменную</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Переменные, объявленные снаружи всех функций, такие как внешняя переменная <code>userName</code> в вышеприведённом коде — называются <em>глобальными</em>. Глобальные переменные видимы для любой функции (если только их не перекрывают одноимённые локальные переменные).</p><p>Желательно сводить использование глобальных переменных к минимуму. В современном коде обычно мало или совсем нет глобальных переменных. Хотя они иногда полезны для хранения данных, которые могут потребоваться в любой части проекта.</p><h2 id="выбор-имени-функции" tabindex="-1"><a class="header-anchor" href="#выбор-имени-функции"><span>Выбор имени функции</span></a></h2><p>Функция по своему смыслу — это действие (а переменная — значение). Поэтому имя функции обычно является глаголом. Оно должно быть кратким, точным и описывать действие функции, чтобы программист, который будет читать код, получил верное представление о том, что делает функция.</p><p>Как правило, используются глагольные префиксы, обозначающие общий характер действия, после которых следует уточнение. Обычно в командах разработчиков действуют соглашения, касающиеся значений этих префиксов.</p><p>Например, функции, начинающиеся с <code>&quot;show&quot;</code> обычно что-то показывают.</p><p>Функции, начинающиеся с…</p><ul><li><code>&quot;get…&quot;</code> — возвращают значение,</li><li><code>&quot;calc…&quot;</code> — что-то вычисляют,</li><li><code>&quot;create…&quot;</code> — что-то создают,</li><li><code>&quot;check…&quot;</code> — что-то проверяют и возвращают логическое значение, и т.д.</li></ul><p>Примеры таких имён:</p><ul><li><code>showMessage(..)</code> // показывает сообщение</li><li><code>getAge(..)</code> // возвращает возраст (получая его каким-то образом)</li><li><code>calcSum(..)</code> // вычисляет сумму и возвращает результат</li><li><code>createForm(..)</code> // создаёт форму (и обычно возвращает её)</li><li><code>checkPermission(..)</code> // проверяет доступ, возвращая <code>true</code> или <code>false</code></li></ul><p>Благодаря префиксам, при первом взгляде на имя функции становится понятным, что делает её код, и какое значение она может возвращать.</p><blockquote><p>[!TIP]<br><strong>Одна функция — одно действие.</strong></p><p>Функция должна делать только то, что явно подразумевается её названием. И это должно быть одним действием. Два независимых действия обычно подразумевают две функции, даже если предполагается, что они будут вызываться вместе (в этом случае мы можем создать третью функцию, которая будет их вызывать).</p></blockquote><h2 id="анонимные-функции-на-примере-«стрелочных-функции»" tabindex="-1"><a class="header-anchor" href="#анонимные-функции-на-примере-«стрелочных-функции»"><span>Анонимные функции на примере «стрелочных функций»</span></a></h2><blockquote><p><strong>Анонимная функция</strong> — особый вид функций, которые объявляются в месте использования и не получают уникального идентификатора для доступа к ним.</p></blockquote><p>Несмотря на то что в языке JavaScript можно создать функцию без имени, для того чтобы как-то её вызвать, необходимо использовать т.н. «функциональные выражения», которые выходят несколько за рамки данного курса, но в языке JavaScript существует и ещё один очень простой и лаконичный синтаксис для создания функций, применимый для ситуаций в которых анонимную функцию нужно создать и выполнить «здесь и сейчас», а результат сразу присвоить переменной — это «стрелочные функции».</p><p>Синтаксис выглядит следующим образом:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">let</span> <span class="token function-variable function">переменная</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">аргумент<span class="token number">1</span><span class="token punctuation">,</span> аргумент<span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">...</span>аргумент<span class="token constant">N</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> выражение<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Это создаёт функцию, которая принимает аргументы, затем вычисляет выражение в правой части с переданными аргументами и сразу же возвращает результат, присваивая переменной.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">let</span> <span class="token function-variable function">sum</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Эта стрелочная функция представляет собой более короткую форму следующей анонимной функции, полученной при помощи т.н. «функционального выражения»:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">let</span> <span class="token function-variable function">sum</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Как вы можете видеть, <code>(a, b) =&gt; a + b</code> задаёт функцию, которая принимает два аргумента с именами <code>a</code> и <code>b</code>. И при выполнении она вычисляет выражение <code>a + b</code> и возвращает результат.</p><p>При этом, если у нас только один аргумент, то круглые скобки вокруг параметров можно опустить, сделав запись ещё короче:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">let</span> <span class="token function-variable function">double</span> <span class="token operator">=</span> <span class="token parameter">n</span> <span class="token operator">=&gt;</span> n <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token function">double</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 6</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Если аргументов нет, круглые скобки будут пустыми, но они должны присутствовать:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">let</span> <span class="token function-variable function">sayHi</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Hello!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Иногда нам нужна более сложная функция, с несколькими выражениями и инструкциями. Это также возможно, нужно лишь заключить их в фигурные скобки. При этом важное отличие — в том, что в таких скобках для возврата значения нужно использовать <code>return</code> (как в обычных функциях):</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">let</span> <span class="token function-variable function">sum</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token comment">// фигурная скобка, открывающая тело многострочной функции</span></span>
<span class="line">  <span class="token keyword">let</span> result <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> result<span class="token punctuation">;</span> <span class="token comment">// если мы используем фигурные скобки, то нам нужно явно указать &quot;return&quot;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="рекурсия" tabindex="-1"><a class="header-anchor" href="#рекурсия"><span>Рекурсия</span></a></h2><blockquote><p>В программировании <strong>рекурсия</strong>, или же <strong>рекурсивная функция</strong> — это такая функция, которая вызывает саму себя.</p></blockquote><p>В процессе выполнения задачи в теле функции могут быть вызваны другие функции для выполнения подзадач. Частный случай — когда функция вызывает сама себя. Это как раз и называется рекурсией. Рекурсия полезна в ситуациях, когда задача может быть естественно разделена на несколько аналогичных, но более простых задач. Или когда задача может быть упрощена до несложных действий.</p><figure><img src="https://rus-promisel.ru/images/articles/viatskaya/viatskaya-matrioshka-sudarushka.jpg" alt="Матрешки | block" tabindex="0" loading="lazy"><figcaption>Матрешки | block</figcaption></figure><blockquote><p>[!INFO]<br><strong>Пример для понимания</strong></p><p>Рекурсию также можно сравнить с матрёшкой. Первая кукла самая большая, за ней идёт точно такая же кукла, но поменьше. Суть матрёшки состоит в том, что вы можете открывать её и доставать из неё точно такую же куклу, только немного меньше. Такой продолжительный процесс длится до тех пор, пока вы не дойдёте до последней куклы. Так выглядит визуальная репрезентация рекурсии.</p></blockquote><p>Например, при возведении числа в степень мы берём число, умножаем его на себя несколько раз. Эту операцию можно представить в виде:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// 2^5 = 2 * 2 * 2 * 2 * 2</span></span>
<span class="line"><span class="token comment">//</span></span>
<span class="line"><span class="token comment">// 1 шаг: 2</span></span>
<span class="line"><span class="token comment">// 2 шаг: 2 * 2</span></span>
<span class="line"><span class="token comment">// 3 шаг: 2 * 2 * 2</span></span>
<span class="line"><span class="token comment">// 4 шаг: 2 * 2 * 2 * 2</span></span>
<span class="line"><span class="token comment">// 5 шаг: 2 * 2 * 2 * 2 * 2</span></span>
<span class="line"><span class="token comment">//</span></span>
<span class="line"><span class="token comment">// Какой по счёту шаг — столько и умножений.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Но это же можно представить в виде нескольких последовательных умножений на 2:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// 2^5 = ((((2 * 2) * 2) * 2) * 2)</span></span>
<span class="line"><span class="token comment">//</span></span>
<span class="line"><span class="token comment">// 1 шаг: 2</span></span>
<span class="line"><span class="token comment">// 2 шаг: 2 * 2  (результат 1-го шага * 2)</span></span>
<span class="line"><span class="token comment">// 3 шаг: 4 * 2  (результат 2-го шага * 2)</span></span>
<span class="line"><span class="token comment">// 4 шаг: 8 * 2  (результат 3-го шага * 2)</span></span>
<span class="line"><span class="token comment">// 5 шаг: 16 * 2  (результат 4-го шага * 2)</span></span>
<span class="line"><span class="token comment">//</span></span>
<span class="line"><span class="token comment">// Для получения нового результата</span></span>
<span class="line"><span class="token comment">// мы берём предыдущий и умножаем его на 2.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>При таком представлении всё возведение в степень — это лишь умножение предыдущего результата на 2:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// 2^n = 2^(n-1) * 2</span></span>
<span class="line"><span class="token comment">// Значение степени двойки —</span></span>
<span class="line"><span class="token comment">// это предыдущее значение, умноженное на 2.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Именно такие задачи называются рекурсивными — когда часть условия ссылается на всю задачу в целом (или похожую на неё). У рекурсии 2 составляющие: <em>повторяющиеся операции</em> и <em>базовый случай</em>.</p><blockquote><p><strong>Базовый случай</strong> — это условие, при выполнении которого рекурсия заканчивается и функция больше не вызывает саму себя.</p></blockquote><p>Вот пример кода того, как можно реализовать функцию обратного отсчёта с использованием рекурсии:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">function</span> <span class="token function">countDown</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">countDown</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// вызов рекурсии</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token boolean">true</span> <span class="token comment">// основное действие</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// 5</span></span>
<span class="line"><span class="token comment">// 4</span></span>
<span class="line"><span class="token comment">// 3</span></span>
<span class="line"><span class="token comment">// 2</span></span>
<span class="line"><span class="token comment">// 1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Проще говоря, рекурсия в рамках вызова <code>countDown(5)</code> делает то же, что и код ниже:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token parameter"><span class="token number">5</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">countDown</span><span class="token punctuation">(</span><span class="token parameter"><span class="token number">4</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">countDown</span><span class="token punctuation">(</span><span class="token parameter"><span class="token number">3</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">countDown</span><span class="token punctuation">(</span><span class="token parameter"><span class="token number">2</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">countDown</span><span class="token punctuation">(</span><span class="token parameter"><span class="token number">1</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">return</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">return</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token keyword">return</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Из-за повторяющихся операций рекурсия схожа с циклом. Их часто считают взаимозаменяемыми, но это всё же не совсем так.</p><blockquote><p>[!INFO]<br><strong>Не приведёт ли рекурсивная функция к бесконечному циклу?</strong></p><p>Да, такой исход вполне возможен. Однако, как и у функции <code>for</code> или <code>while</code>, рекурсию можно прервать условием <code>break</code>, чтобы функция перестала вызывать саму себя.</p><p><strong>Стоит ли использовать рекурсии вместо обычных циклов?</strong></p><p>Оба этих метода одинаково эффективны для решения задач, однако выбор одного из них зависит от типа проблемы, поставленной перед вами. Рекурсии эффективны тогда, когда вы работаете с данными, которые слишком сложны, чтобы пройтись по ним с помощью обычных циклов.</p></blockquote><p>Давайте решим одну и ту же задачу с использованием цикла и рекурсии, чтобы увидеть разницу в подходах. Будем писать функцию для нахождения факториала.</p><blockquote><p><strong>Факториал</strong> — функция, определённая на множестве неотрицательных целых чисел. Название происходит от лат. <em>factorialis</em> — действующий, производящий, умножающий; обозначается <strong><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo stretchy="false">!</mo></mrow><annotation encoding="application/x-tex">n!</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">n</span><span class="mclose">!</span></span></span></span></strong>, произносится эн факториал. Факториал натурального числа <strong><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span></strong> определяется как произведение всех натуральных чисел от <strong><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></strong> до <strong><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span></strong> включительно.</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mi>n</mi><mo stretchy="false">!</mo><mo>=</mo><mn>1</mn><mo>⋅</mo><mn>2</mn><mo>⋅</mo><mo>…</mo><mo>⋅</mo><mi>n</mi><mo>=</mo><munderover><mo>∏</mo><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mi>k</mi></mstyle></mrow><annotation encoding="application/x-tex">{\\displaystyle n!=1\\cdot 2\\cdot \\ldots \\cdot n=\\prod _{k=1}^{n}k}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.9535em;vertical-align:-1.3021em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="mclose">!</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8479em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∏</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.3021em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span></span>.</p><p>Например,</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mn>5</mn><mo stretchy="false">!</mo><mo>=</mo><mn>1</mn><mo>⋅</mo><mn>2</mn><mo>⋅</mo><mn>3</mn><mo>⋅</mo><mn>4</mn><mo>⋅</mo><mn>5</mn><mo>=</mo><mn>120</mn></mstyle></mrow><annotation encoding="application/x-tex">{\\displaystyle 5!=1\\cdot 2\\cdot 3\\cdot 4\\cdot 5=120}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord"><span class="mord">5</span><span class="mclose">!</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">5</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">120</span></span></span></span></span></p><p>Для <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mi>n</mi><mo>=</mo><mn>0</mn></mstyle></mrow><annotation encoding="application/x-tex">{\\displaystyle n=0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">0</span></span></span></span></span> принимается в качестве соглашения, что <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mn>0</mn><mo stretchy="false">!</mo><mo>=</mo><mn>1</mn></mstyle></mrow><annotation encoding="application/x-tex">{\\displaystyle 0!=1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord"><span class="mord">0</span><span class="mclose">!</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">1</span></span></span></span></span>.</p></blockquote><h3 id="факториал-с-помощью-цикла" tabindex="-1"><a class="header-anchor" href="#факториал-с-помощью-цикла"><span>Факториал с помощью цикла</span></a></h3><p>Сперва решим задачу нахождения факториала с помощью цикла.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">function</span> <span class="token function">factorial</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    result <span class="token operator">*=</span> i <span class="token operator">+</span> <span class="token number">1</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> result</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">factorial</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 120</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>В этой функции мы используем цикл, чтобы умножить каждое число на результат предыдущего умножения. То же самое мы можем сделать и рекурсивно.</p><h3 id="факториал-с-помощью-рекурсии" tabindex="-1"><a class="header-anchor" href="#факториал-с-помощью-рекурсии"><span>Факториал с помощью рекурсии</span></a></h3><p>Для расчёта факториала рекурсивно мы создадим функцию, в которой в первую очередь опишем базовый случай, а уже потом — повторяющиеся действия.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">function</span> <span class="token function">factorial</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">1</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> n <span class="token operator">*</span> <span class="token function">factorial</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">factorial</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 120</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>[!TIP]<br> Хорошим правилом при работе с рекурсией считается первым делом описывать базовый случай и только потом — всё остальное. Это позволяет сделать работу с рекурсией понятнее.</p></blockquote><h2 id="что-почитать-по-теме" tabindex="-1"><a class="header-anchor" href="#что-почитать-по-теме"><span>Что почитать по теме</span></a></h2><ul><li><a href="https://learn.javascript.ru/function-basics" target="_blank" rel="noopener noreferrer">Современный учебник JavaScript - Функции</a></li><li><a href="https://learn.javascript.ru/function-expressions" target="_blank" rel="noopener noreferrer">Современный учебник JavaScript - Function Expression</a></li><li><a href="https://learn.javascript.ru/arrow-functions-basics" target="_blank" rel="noopener noreferrer">Современный учебник JavaScript - Стрелочные функции, основы</a></li><li><a href="https://learn.javascript.ru/recursion" target="_blank" rel="noopener noreferrer">Современный учебник JavaScript - Рекурсия и стек</a></li><li><a href="https://doka.guide/js/recursion/" target="_blank" rel="noopener noreferrer">Дока - Саша Беспоясов - Рекурсия</a></li><li><a href="https://medium.com/nuances-of-programming/%D0%BF%D1%80%D0%BE%D1%81%D1%82%D1%8B%D0%BC%D0%B8-%D1%81%D0%BB%D0%BE%D0%B2%D0%B0%D0%BC%D0%B8-%D0%BE-%D1%80%D0%B5%D0%BA%D1%83%D1%80%D1%81%D0%B8%D0%B8-61e12c344a41" target="_blank" rel="noopener noreferrer">NOP::Nuances of Programming - Артур Хайбуллин - Простыми словами о рекурсии</a></li><li><a href="https://blog.csssr.com/ru/article/recursion/" target="_blank" rel="noopener noreferrer">CSSSR - МАКСИМ ВИСЛОГУРОВ - Рекурсия для неискушённых</a></li><li><a href="https://ru.hexlet.io/blog/posts/recursive" target="_blank" rel="noopener noreferrer">Хекслет - R. D. - Что такое рекурсия, рекурсивный и итеративный процесс в программировании</a></li><li><a href="https://www.w3schools.com/js/js_function_definition.asp" target="_blank" rel="noopener noreferrer">W3Schools - JavaScript Function Definitions</a></li><li><a href="https://www.w3schools.com/js/js_function_parameters.asp" target="_blank" rel="noopener noreferrer">W3Schools - JavaScript Function Parameters</a></li><li><a href="https://www.w3schools.com/js/js_function_invocation.asp" target="_blank" rel="noopener noreferrer">W3Schools - JavaScript Function Invocation</a></li><li><a href="https://www.w3schools.com/js/js_scope.asp" target="_blank" rel="noopener noreferrer">W3Schools - JavaScript Scope</a></li><li><a href="https://www.w3schools.com/js/js_arrow_function.asp" target="_blank" rel="noopener noreferrer">W3Schools - JavaScript Arrow Function</a></li><li><a href="https://www.javascripttutorial.net/javascript-recursive-function/" target="_blank" rel="noopener noreferrer">JavaScript Tutorial - JavaScript Recursive Function</a></li></ul>`,141))])}const v=e(u,[["render",d]]),g=JSON.parse('{"path":"/disciplines/op04/op04_12.html","title":"ОП.04 - 12 - Функции и аргументы. Область видимости и контекст выполнения. Понятие рекурсии","lang":"ru-RU","frontmatter":{"description":"Примечание ЭТО АРХИВНАЯ ВЕРСИЯ КУРСА! Материалы предназначаются для пересдающих дисциплину \\"ОП.04 - Основы алгоритмизации и программирования\\" в соответствии с учебными планами С...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ОП.04 - 12 - Функции и аргументы. Область видимости и контекст выполнения. Понятие рекурсии\\",\\"image\\":[\\"https://rus-promisel.ru/images/articles/viatskaya/viatskaya-matrioshka-sudarushka.jpg\\"],\\"dateModified\\":\\"2025-10-31T15:45:09.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://it.vshp.online/disciplines/op04/op04_12.html"}],["meta",{"property":"og:site_name","content":"Кафедра ИТ"}],["meta",{"property":"og:title","content":"ОП.04 - 12 - Функции и аргументы. Область видимости и контекст выполнения. Понятие рекурсии"}],["meta",{"property":"og:description","content":"Примечание ЭТО АРХИВНАЯ ВЕРСИЯ КУРСА! Материалы предназначаются для пересдающих дисциплину \\"ОП.04 - Основы алгоритмизации и программирования\\" в соответствии с учебными планами С..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://rus-promisel.ru/images/articles/viatskaya/viatskaya-matrioshka-sudarushka.jpg"}],["meta",{"property":"og:locale","content":"ru-RU"}],["meta",{"property":"og:updated_time","content":"2025-10-31T15:45:09.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-31T15:45:09.000Z"}]]},"git":{"updatedTime":1761925509000,"contributors":[{"name":"PAVEL TKACHEV","username":"","email":"phoenixweiss@ya.ru","commits":2}],"changelog":[{"hash":"799f1f79d8c5d9f1b4401f594c1135b605f001ab","time":1761925509000,"email":"phoenixweiss@ya.ru","author":"PAVEL TKACHEV","message":"Update op04_08.md, op04_09.md, op04_10.md, and 24 more files"},{"hash":"a771585bc5911f4a729d06794a6706536be6cc56","time":1761913752000,"email":"phoenixweiss@ya.ru","author":"PAVEL TKACHEV","message":"Update <a href=\\"http://index.md\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">index.md</a>, abacus.png, ada_lawlace.png, and 105 more files"}]},"autoDesc":true,"filePathRelative":"disciplines/op04/op04_12.md"}');export{v as comp,g as data};
